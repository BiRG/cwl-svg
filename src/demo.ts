import "./assets/styles/style.scss";
import {WorkflowFactory} from "cwlts/models";
import {Workflow} from "./graph/workflow";

declare const Snap: any;

const bcbio = {
    "class": "Workflow",
    "cwlVersion": "v1.0",
    "hints": [{
        "class": "DockerRequirement",
        "dockerImageId": "bcbio/bcbio",
        "dockerPull": "bcbio/bcbio"
    }],
    "inputs": [{
        "id": "config__algorithm__align_split_size",
        "type": {"items": "long", "type": "array"}
    }, {
        "id": "config__algorithm__validate",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "reference__fasta__base",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "reference__rtg",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "config__algorithm__variantcaller",
        "type": {"items": {"items": "string", "type": "array"}, "type": "array"}
    }, {
        "id": "config__algorithm__svcaller",
        "type": {"items": {"items": "string", "type": "array"}, "type": "array"}
    }, {
        "id": "genome_resources__rnaseq__transcripts_mask",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "genome_resources__variation__train_1000g",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "config__algorithm__coverage_interval",
        "type": {"items": "null", "type": "array"}
    }, {
        "id": "genome_resources__rnaseq__gene_bed",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "genome_resources__variation__train_hapmap",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "rgnames__lb",
        "type": {"items": "null", "type": "array"}
    }, {
        "id": "genome_resources__variation__dbnsfp",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "rgnames__rg",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "config__algorithm__realign",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "metadata__batch",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "rgnames__lane",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "config__algorithm__nomap_split_targets",
        "type": {"items": "long", "type": "array"}
    }, {
        "id": "reference__bwa__indexes",
        "type": {"items": ["null", "File"], "type": "array"}
    }, {
        "id": "reference__genome_context",
        "type": {"items": {"items": "File", "type": "array"}, "type": "array"}
    }, {
        "id": "config__algorithm__nomap_split_size",
        "type": {"items": "long", "type": "array"}
    }, {
        "id": "files",
        "type": {"items": {"items": "File", "type": "array"}, "type": "array"}
    }, {
        "id": "genome_resources__srnaseq__srna_transcripts",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "config__algorithm__cwl_reporting",
        "type": {"items": ["string", "null"], "type": "array"}
    }, {
        "id": "reference__snpeff__hg19",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "description",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "config__algorithm__validate_regions",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "config__algorithm__aligner",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "genome_resources__variation__train_omni",
        "type": {"items": "File", "type": "array"}
    }, {"id": "rgnames__pl", "type": {"items": "string", "type": "array"}}, {
        "id": "genome_build",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "rgnames__pu",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "config__algorithm__recalibrate",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "metadata__phenotype",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "genome_resources__rnaseq__transcripts",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "genome_resources__aliases__human",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "config__algorithm__tools_off",
        "type": {"items": {"items": "string", "type": "array"}, "type": "array"}
    }, {
        "id": "genome_resources__variation__dbsnp",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "config__algorithm__mark_duplicates",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "genome_resources__variation__ancestral",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "vrn_file",
        "type": {"items": "null", "type": "array"}
    }, {
        "id": "genome_resources__version",
        "type": {"items": "long", "type": "array"}
    }, {
        "id": "genome_resources__variation__cosmic",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "genome_resources__srnaseq__mirbase",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "config__algorithm__qc",
        "type": {"items": {"items": "string", "type": "array"}, "type": "array"}
    }, {"id": "analysis", "type": {"items": "string", "type": "array"}}, {
        "id": "rgnames__sample",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "config__algorithm__tools_on",
        "type": {"items": {"items": "null", "type": "array"}, "type": "array"}
    }, {
        "id": "config__algorithm__variant_regions",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "genome_resources__aliases__ensembl",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "reference__snap__indexes",
        "type": {"items": ["File", "null"], "type": "array"}
    }, {
        "id": "genome_resources__variation__train_indels",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "genome_resources__aliases__snpeff",
        "type": {"items": "string", "type": "array"}
    }, {
        "id": "config__algorithm__archive",
        "type": {"items": {"items": "null", "type": "array"}, "type": "array"}
    }],
    "outputs": [{
        "id": "align_bam",
        "outputSource": "alignment/align_bam",
        "type": {"items": "File", "type": "array"}
    }, {
        "id": "summary__multiqc",
        "outputSource": "multiqc_summary/summary__multiqc",
        "type": {"items": ["File", "null"], "type": "array"}
    }],
    "requirements": [{
        "class": "EnvVarRequirement",
        "envDef": [{"envName": "MPLCONFIGDIR", "envValue": "."}]
    }, {"class": "ScatterFeatureRequirement"}, {"class": "StepInputExpressionRequirement"}, {"class": "SubworkflowFeatureRequirement"}, {"class": "InlineJavascriptRequirement"}],
    "steps": [{
        "id": "alignment",
        "in": [{"id": "files", "source": "files"}, {
            "id": "config__algorithm__align_split_size",
            "source": "config__algorithm__align_split_size"
        }, {
            "id": "config__algorithm__aligner",
            "source": "config__algorithm__aligner"
        }, {"id": "description", "source": "description"}, {
            "id": "reference__fasta__base",
            "source": "reference__fasta__base"
        }, {"id": "rgnames__pl", "source": "rgnames__pl"}, {
            "id": "rgnames__sample",
            "source": "rgnames__sample"
        }, {"id": "rgnames__pu", "source": "rgnames__pu"}, {
            "id": "rgnames__lane",
            "source": "rgnames__lane"
        }, {"id": "rgnames__rg", "source": "rgnames__rg"}, {
            "id": "rgnames__lb",
            "source": "rgnames__lb"
        }, {
            "id": "reference__bwa__indexes",
            "source": "reference__bwa__indexes"
        }, {
            "id": "reference__snap__indexes",
            "source": "reference__snap__indexes"
        }, {
            "id": "config__algorithm__mark_duplicates",
            "source": "config__algorithm__mark_duplicates"
        }],
        "out": [{"id": "align_bam"}, {"id": "work_bam_plus__disc"}, {"id": "work_bam_plus__sr"}, {"id": "hla__fastq"}],
        "run": {
            "class": "Workflow",
            "cwlVersion": "v1.0",
            "hints": [{
                "class": "DockerRequirement",
                "dockerImageId": "bcbio/bcbio",
                "dockerPull": "bcbio/bcbio"
            }],
            "inputs": [{
                "id": "files",
                "type": {"items": "File", "type": "array"}
            }, {
                "id": "config__algorithm__align_split_size",
                "type": "long"
            }, {"id": "config__algorithm__aligner", "type": "string"}, {
                "id": "description",
                "type": "string"
            }, {"id": "reference__fasta__base", "type": "File"}, {
                "id": "rgnames__pl",
                "type": "string"
            }, {"id": "rgnames__sample", "type": "string"}, {
                "id": "rgnames__pu",
                "type": "string"
            }, {"id": "rgnames__lane", "type": "string"}, {
                "id": "rgnames__rg",
                "type": "string"
            }, {"id": "rgnames__lb", "type": "null"}, {
                "id": "reference__bwa__indexes",
                "type": ["null", "File"]
            }, {
                "id": "reference__snap__indexes",
                "type": ["File", "null"]
            }, {"id": "config__algorithm__mark_duplicates", "type": "string"}],
            "outputs": [{
                "id": "align_bam",
                "outputSource": "merge_split_alignments/align_bam",
                "secondaryFiles": [".bai"],
                "type": "File"
            }, {
                "id": "work_bam_plus__disc",
                "outputSource": "merge_split_alignments/work_bam_plus__disc",
                "secondaryFiles": [".bai"],
                "type": ["File", "null"]
            }, {
                "id": "work_bam_plus__sr",
                "outputSource": "merge_split_alignments/work_bam_plus__sr",
                "secondaryFiles": [".bai"],
                "type": ["File", "null"]
            }, {
                "id": "hla__fastq",
                "outputSource": "merge_split_alignments/hla__fastq",
                "type": ["File", "null"]
            }],
            "requirements": [{
                "class": "EnvVarRequirement",
                "envDef": [{"envName": "MPLCONFIGDIR", "envValue": "."}]
            }, {"class": "ScatterFeatureRequirement"}, {"class": "StepInputExpressionRequirement"}, {"class": "SubworkflowFeatureRequirement"}, {"class": "InlineJavascriptRequirement"}],
            "steps": [{
                "id": "prep_align_inputs",
                "in": [{
                    "id": "files",
                    "source": "files"
                }, {
                    "id": "config__algorithm__align_split_size",
                    "source": "config__algorithm__align_split_size"
                }, {
                    "id": "config__algorithm__aligner",
                    "source": "config__algorithm__aligner"
                }, {"id": "description", "source": "description"}],
                "out": [{"id": "files"}, {"id": "config__algorithm__quality_format"}, {"id": "align_split"}],
                "run": {
                    "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
                    "baseCommand": ["bcbio_nextgen.py", "runfn", "prep_align_inputs", "cwl"],
                    "class": "CommandLineTool",
                    "cwlVersion": "v1.0",
                    "hints": [{
                        "class": "ResourceRequirement",
                        "coresMin": 4,
                        "ramMin": 4096,
                        "tmpdirMin": 4
                    }],
                    "inputs": [{
                        "default": "single-split",
                        "id": "sentinel-parallel",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 0,
                            "prefix": "sentinel-parallel=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "default": "[\"files\",\"config__algorithm__quality_format\",\"align_split\"]",
                        "id": "sentinel-outputs",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 1,
                            "prefix": "sentinel-outputs=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "files",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 2,
                            "prefix": "files=",
                            "separate": false
                        },
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "id": "config__algorithm__align_split_size",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 3,
                            "prefix": "config__algorithm__align_split_size=",
                            "separate": false
                        },
                        "type": "long"
                    }, {
                        "id": "config__algorithm__aligner",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 4,
                            "prefix": "config__algorithm__aligner=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "description",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 5,
                            "prefix": "description=",
                            "separate": false
                        },
                        "type": "string"
                    }],
                    "outputs": [{
                        "id": "files",
                        "secondaryFiles": [".gbi"],
                        "type": {"items": {"items": "File", "type": "array"}, "type": "array"}
                    }, {
                        "id": "config__algorithm__quality_format",
                        "type": {"items": "string", "type": "array"}
                    }, {
                        "id": "align_split",
                        "type": {"items": ["string", "null"], "type": "array"}
                    }]
                },
                "sbg:rdfId": "steps/prep_align_inputs.cwl",
                "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/prep_align_inputs.cwl"
            }, {
                "id": "process_alignment",
                "in": [{
                    "id": "files",
                    "source": "prep_align_inputs/files"
                }, {
                    "id": "reference__fasta__base",
                    "source": "reference__fasta__base"
                }, {
                    "id": "align_split",
                    "source": "prep_align_inputs/align_split"
                }, {"id": "rgnames__pl", "source": "rgnames__pl"}, {
                    "id": "rgnames__sample",
                    "source": "rgnames__sample"
                }, {"id": "rgnames__pu", "source": "rgnames__pu"}, {
                    "id": "rgnames__lane",
                    "source": "rgnames__lane"
                }, {"id": "rgnames__rg", "source": "rgnames__rg"}, {
                    "id": "rgnames__lb",
                    "source": "rgnames__lb"
                }, {
                    "id": "reference__bwa__indexes",
                    "source": "reference__bwa__indexes"
                }, {
                    "id": "reference__snap__indexes",
                    "source": "reference__snap__indexes"
                }, {
                    "id": "config__algorithm__aligner",
                    "source": "config__algorithm__aligner"
                }, {
                    "id": "config__algorithm__mark_duplicates",
                    "source": "config__algorithm__mark_duplicates"
                }, {
                    "id": "config__algorithm__quality_format",
                    "source": "prep_align_inputs/config__algorithm__quality_format"
                }, {"id": "description", "source": "description"}],
                "out": [{"id": "work_bam"}, {"id": "align_bam"}, {"id": "hla__fastq"}, {"id": "work_bam_plus__disc"}, {"id": "work_bam_plus__sr"}],
                "run": {
                    "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
                    "baseCommand": ["bcbio_nextgen.py", "runfn", "process_alignment", "cwl"],
                    "class": "CommandLineTool",
                    "cwlVersion": "v1.0",
                    "hints": [{
                        "class": "ResourceRequirement",
                        "coresMin": 4,
                        "ramMin": 4096,
                        "tmpdirMin": 4
                    }],
                    "inputs": [{
                        "default": "single-parallel",
                        "id": "sentinel-parallel",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 0,
                            "prefix": "sentinel-parallel=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "default": "[\"work_bam\",\"align_bam\",\"hla__fastq\",\"work_bam_plus__disc\",\"work_bam_plus__sr\"]",
                        "id": "sentinel-outputs",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 1,
                            "prefix": "sentinel-outputs=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "files",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 2,
                            "prefix": "files=",
                            "separate": false
                        },
                        "secondaryFiles": [".gbi"],
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "id": "reference__fasta__base",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 3,
                            "prefix": "reference__fasta__base=",
                            "separate": false
                        },
                        "type": "File"
                    }, {
                        "id": "align_split",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 4,
                            "prefix": "align_split=",
                            "separate": false
                        },
                        "type": ["string", "null"]
                    }, {
                        "id": "rgnames__pl",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 5,
                            "prefix": "rgnames__pl=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "rgnames__sample",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 6,
                            "prefix": "rgnames__sample=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "rgnames__pu",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 7,
                            "prefix": "rgnames__pu=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "rgnames__lane",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 8,
                            "prefix": "rgnames__lane=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "rgnames__rg",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 9,
                            "prefix": "rgnames__rg=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "rgnames__lb",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 10,
                            "prefix": "rgnames__lb=",
                            "separate": false
                        },
                        "type": "null"
                    }, {
                        "id": "reference__bwa__indexes",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 11,
                            "prefix": "reference__bwa__indexes=",
                            "separate": false
                        },
                        "type": ["null", "File"]
                    }, {
                        "id": "reference__snap__indexes",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 12,
                            "prefix": "reference__snap__indexes=",
                            "separate": false
                        },
                        "type": ["File", "null"]
                    }, {
                        "id": "config__algorithm__aligner",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 13,
                            "prefix": "config__algorithm__aligner=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "config__algorithm__mark_duplicates",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 14,
                            "prefix": "config__algorithm__mark_duplicates=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "config__algorithm__quality_format",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 15,
                            "prefix": "config__algorithm__quality_format=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "description",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 16,
                            "prefix": "description=",
                            "separate": false
                        },
                        "type": "string"
                    }],
                    "outputs": [{"id": "work_bam", "type": "File"}, {
                        "id": "align_bam",
                        "type": "File"
                    }, {"id": "hla__fastq", "type": ["File", "null"]}, {
                        "id": "work_bam_plus__disc",
                        "secondaryFiles": [".bai"],
                        "type": ["File", "null"]
                    }, {
                        "id": "work_bam_plus__sr",
                        "secondaryFiles": [".bai"],
                        "type": ["File", "null"]
                    }]
                },
                "scatter": ["files", "align_split", "config__algorithm__quality_format"],
                "scatterMethod": "dotproduct",
                "sbg:rdfId": "steps/process_alignment.cwl",
                "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/process_alignment.cwl"
            }, {
                "id": "merge_split_alignments",
                "in": [{
                    "id": "work_bam",
                    "source": "process_alignment/work_bam"
                }, {
                    "id": "align_bam",
                    "source": "process_alignment/align_bam"
                }, {
                    "id": "work_bam_plus__disc",
                    "source": "process_alignment/work_bam_plus__disc"
                }, {
                    "id": "work_bam_plus__sr",
                    "source": "process_alignment/work_bam_plus__sr"
                }, {
                    "id": "hla__fastq",
                    "source": "process_alignment/hla__fastq"
                }, {"id": "description", "source": "description"}],
                "out": [{"id": "align_bam"}, {"id": "work_bam_plus__disc"}, {"id": "work_bam_plus__sr"}, {"id": "hla__fastq"}],
                "run": {
                    "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
                    "baseCommand": ["bcbio_nextgen.py", "runfn", "merge_split_alignments", "cwl"],
                    "class": "CommandLineTool",
                    "cwlVersion": "v1.0",
                    "hints": [{
                        "class": "ResourceRequirement",
                        "coresMin": 4,
                        "ramMin": 4096,
                        "tmpdirMin": 9
                    }],
                    "inputs": [{
                        "default": "single-merge",
                        "id": "sentinel-parallel",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 0,
                            "prefix": "sentinel-parallel=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "default": "[\"align_bam\",\"work_bam_plus__disc\",\"work_bam_plus__sr\",\"hla__fastq\"]",
                        "id": "sentinel-outputs",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 1,
                            "prefix": "sentinel-outputs=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "work_bam",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 2,
                            "prefix": "work_bam=",
                            "separate": false
                        },
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "id": "align_bam",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 3,
                            "prefix": "align_bam=",
                            "separate": false
                        },
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "id": "work_bam_plus__disc",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 4,
                            "prefix": "work_bam_plus__disc=",
                            "separate": false
                        },
                        "secondaryFiles": [".bai"],
                        "type": {"items": ["File", "null"], "type": "array"}
                    }, {
                        "id": "work_bam_plus__sr",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 5,
                            "prefix": "work_bam_plus__sr=",
                            "separate": false
                        },
                        "secondaryFiles": [".bai"],
                        "type": {"items": ["File", "null"], "type": "array"}
                    }, {
                        "id": "hla__fastq",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 6,
                            "prefix": "hla__fastq=",
                            "separate": false
                        },
                        "type": {"items": ["File", "null"], "type": "array"}
                    }, {
                        "id": "description",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 7,
                            "prefix": "description=",
                            "separate": false
                        },
                        "type": "string"
                    }],
                    "outputs": [{
                        "id": "align_bam",
                        "secondaryFiles": [".bai"],
                        "type": "File"
                    }, {
                        "id": "work_bam_plus__disc",
                        "secondaryFiles": [".bai"],
                        "type": ["File", "null"]
                    }, {
                        "id": "work_bam_plus__sr",
                        "secondaryFiles": [".bai"],
                        "type": ["File", "null"]
                    }, {"id": "hla__fastq", "type": ["File", "null"]}]
                },
                "sbg:rdfId": "steps/merge_split_alignments.cwl",
                "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/merge_split_alignments.cwl"
            }]
        },
        "scatter": ["files", "config__algorithm__align_split_size", "config__algorithm__aligner", "description", "reference__fasta__base", "rgnames__pl", "rgnames__sample", "rgnames__pu", "rgnames__lane", "rgnames__rg", "rgnames__lb", "reference__bwa__indexes", "reference__snap__indexes", "config__algorithm__mark_duplicates"],
        "scatterMethod": "dotproduct",
        "sbg:rdfId": "wf-alignment.cwl",
        "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/wf-alignment.cwl"
    }, {
        "id": "prep_samples",
        "in": [{
            "id": "config__algorithm__variant_regions",
            "source": "config__algorithm__variant_regions"
        }, {
            "id": "reference__fasta__base",
            "source": "reference__fasta__base"
        }, {"id": "description", "source": "description"}],
        "out": [{"id": "config__algorithm__variant_regions"}, {"id": "config__algorithm__variant_regions_merged"}, {"id": "config__algorithm__variant_regions_orig"}, {"id": "config__algorithm__seq2c_bed_ready"}],
        "run": {
            "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
            "baseCommand": ["bcbio_nextgen.py", "runfn", "prep_samples", "cwl"],
            "class": "CommandLineTool",
            "cwlVersion": "v1.0",
            "hints": [{"class": "ResourceRequirement", "coresMin": 4, "ramMin": 4096}],
            "inputs": [{
                "default": "multi-parallel",
                "id": "sentinel-parallel",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 0,
                    "prefix": "sentinel-parallel=",
                    "separate": false
                },
                "type": "string"
            }, {
                "default": "[\"config__algorithm__variant_regions\",\"config__algorithm__variant_regions_merged\",\"config__algorithm__variant_regions_orig\",\"config__algorithm__seq2c_bed_ready\"]",
                "id": "sentinel-outputs",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 1,
                    "prefix": "sentinel-outputs=",
                    "separate": false
                },
                "type": "string"
            }, {
                "id": "config__algorithm__variant_regions",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 2,
                    "prefix": "config__algorithm__variant_regions=",
                    "separate": false
                },
                "type": "File"
            }, {
                "id": "reference__fasta__base",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 3,
                    "prefix": "reference__fasta__base=",
                    "separate": false
                },
                "type": "File"
            }, {
                "id": "description",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 4,
                    "prefix": "description=",
                    "separate": false
                },
                "type": "string"
            }],
            "outputs": [{
                "id": "config__algorithm__variant_regions",
                "type": "File"
            }, {
                "id": "config__algorithm__variant_regions_merged",
                "type": ["File", "null"]
            }, {
                "id": "config__algorithm__variant_regions_orig",
                "type": ["File", "null"]
            }, {"id": "config__algorithm__seq2c_bed_ready", "type": ["File", "null"]}]
        },
        "scatter": ["config__algorithm__variant_regions", "reference__fasta__base", "description"],
        "scatterMethod": "dotproduct",
        "sbg:rdfId": "steps/prep_samples.cwl",
        "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/prep_samples.cwl"
    }, {
        "id": "postprocess_alignment",
        "in": [{
            "id": "align_bam",
            "source": "alignment/align_bam"
        }, {
            "id": "config__algorithm__variant_regions",
            "source": "prep_samples/config__algorithm__variant_regions"
        }, {
            "id": "config__algorithm__coverage_interval",
            "source": "config__algorithm__coverage_interval"
        }, {
            "id": "config__algorithm__variant_regions_merged",
            "source": "prep_samples/config__algorithm__variant_regions_merged"
        }, {
            "id": "config__algorithm__variant_regions_orig",
            "source": "prep_samples/config__algorithm__variant_regions_orig"
        }, {
            "id": "config__algorithm__seq2c_bed_ready",
            "source": "prep_samples/config__algorithm__seq2c_bed_ready"
        }, {
            "id": "config__algorithm__recalibrate",
            "source": "config__algorithm__recalibrate"
        }, {
            "id": "reference__fasta__base",
            "source": "reference__fasta__base"
        }, {"id": "description", "source": "description"}],
        "out": [{"id": "config__algorithm__coverage_interval"}, {"id": "config__algorithm__variant_regions"}, {"id": "config__algorithm__variant_regions_merged"}, {"id": "config__algorithm__variant_regions_orig"}, {"id": "config__algorithm__seq2c_bed_ready"}, {"id": "regions__callable"}, {"id": "regions__sample_callable"}, {"id": "regions__nblock"}, {"id": "regions__highdepth"}],
        "run": {
            "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
            "baseCommand": ["bcbio_nextgen.py", "runfn", "postprocess_alignment", "cwl"],
            "class": "CommandLineTool",
            "cwlVersion": "v1.0",
            "hints": [{"class": "ResourceRequirement", "coresMin": 4, "ramMin": 4096}],
            "inputs": [{
                "default": "multi-parallel",
                "id": "sentinel-parallel",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 0,
                    "prefix": "sentinel-parallel=",
                    "separate": false
                },
                "type": "string"
            }, {
                "default": "[\"config__algorithm__coverage_interval\",\"config__algorithm__variant_regions\",\"config__algorithm__variant_regions_merged\",\"config__algorithm__variant_regions_orig\",\"config__algorithm__seq2c_bed_ready\",\"regions__callable\",\"regions__sample_callable\",\"regions__nblock\",\"regions__highdepth\"]",
                "id": "sentinel-outputs",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 1,
                    "prefix": "sentinel-outputs=",
                    "separate": false
                },
                "type": "string"
            }, {
                "id": "align_bam",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 2,
                    "prefix": "align_bam=",
                    "separate": false
                },
                "secondaryFiles": [".bai"],
                "type": "File"
            }, {
                "id": "config__algorithm__variant_regions",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 3,
                    "prefix": "config__algorithm__variant_regions=",
                    "separate": false
                },
                "type": "File"
            }, {
                "id": "config__algorithm__coverage_interval",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 4,
                    "prefix": "config__algorithm__coverage_interval=",
                    "separate": false
                },
                "type": "null"
            }, {
                "id": "config__algorithm__variant_regions_merged",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 5,
                    "prefix": "config__algorithm__variant_regions_merged=",
                    "separate": false
                },
                "type": ["File", "null"]
            }, {
                "id": "config__algorithm__variant_regions_orig",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 6,
                    "prefix": "config__algorithm__variant_regions_orig=",
                    "separate": false
                },
                "type": ["File", "null"]
            }, {
                "id": "config__algorithm__seq2c_bed_ready",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 7,
                    "prefix": "config__algorithm__seq2c_bed_ready=",
                    "separate": false
                },
                "type": ["File", "null"]
            }, {
                "id": "config__algorithm__recalibrate",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 8,
                    "prefix": "config__algorithm__recalibrate=",
                    "separate": false
                },
                "type": "string"
            }, {
                "id": "reference__fasta__base",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 9,
                    "prefix": "reference__fasta__base=",
                    "separate": false
                },
                "type": "File"
            }, {
                "id": "description",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 10,
                    "prefix": "description=",
                    "separate": false
                },
                "type": "string"
            }],
            "outputs": [{
                "id": "config__algorithm__coverage_interval",
                "type": "string"
            }, {
                "id": "config__algorithm__variant_regions",
                "type": "File"
            }, {
                "id": "config__algorithm__variant_regions_merged",
                "type": ["File", "null"]
            }, {
                "id": "config__algorithm__variant_regions_orig",
                "type": ["File", "null"]
            }, {
                "id": "config__algorithm__seq2c_bed_ready",
                "type": ["File", "null"]
            }, {"id": "regions__callable", "type": "File"}, {
                "id": "regions__sample_callable",
                "type": "File"
            }, {"id": "regions__nblock", "type": "File"}, {
                "id": "regions__highdepth",
                "type": ["File", "null"]
            }]
        },
        "scatter": ["align_bam", "config__algorithm__variant_regions", "config__algorithm__coverage_interval", "config__algorithm__variant_regions_merged", "config__algorithm__variant_regions_orig", "config__algorithm__seq2c_bed_ready", "config__algorithm__recalibrate", "reference__fasta__base", "description"],
        "scatterMethod": "dotproduct",
        "sbg:rdfId": "steps/postprocess_alignment.cwl",
        "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/postprocess_alignment.cwl"
    }, {
        "id": "combine_sample_regions",
        "in": [{
            "id": "regions__callable",
            "source": "postprocess_alignment/regions__callable"
        }, {
            "id": "regions__nblock",
            "source": "postprocess_alignment/regions__nblock"
        }, {
            "id": "config__algorithm__nomap_split_size",
            "source": "config__algorithm__nomap_split_size"
        }, {
            "id": "config__algorithm__nomap_split_targets",
            "source": "config__algorithm__nomap_split_targets"
        }, {
            "id": "reference__fasta__base",
            "source": "reference__fasta__base"
        }, {"id": "description", "source": "description"}],
        "out": [{"id": "config__algorithm__callable_regions"}, {"id": "config__algorithm__non_callable_regions"}, {"id": "config__algorithm__callable_count"}],
        "run": {
            "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
            "baseCommand": ["bcbio_nextgen.py", "runfn", "combine_sample_regions", "cwl"],
            "class": "CommandLineTool",
            "cwlVersion": "v1.0",
            "hints": [{"class": "ResourceRequirement", "coresMin": 4, "ramMin": 4096}],
            "inputs": [{
                "default": "multi-combined",
                "id": "sentinel-parallel",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 0,
                    "prefix": "sentinel-parallel=",
                    "separate": false
                },
                "type": "string"
            }, {
                "default": "[\"config__algorithm__callable_regions\",\"config__algorithm__non_callable_regions\",\"config__algorithm__callable_count\"]",
                "id": "sentinel-outputs",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 1,
                    "prefix": "sentinel-outputs=",
                    "separate": false
                },
                "type": "string"
            }, {
                "id": "regions__callable",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 2,
                        "prefix": "regions__callable=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "regions__nblock",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 3,
                        "prefix": "regions__nblock=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "config__algorithm__nomap_split_size",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 4,
                        "prefix": "config__algorithm__nomap_split_size=",
                        "separate": false
                    }, "items": "long", "type": "array"
                }
            }, {
                "id": "config__algorithm__nomap_split_targets",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 5,
                        "prefix": "config__algorithm__nomap_split_targets=",
                        "separate": false
                    }, "items": "long", "type": "array"
                }
            }, {
                "id": "reference__fasta__base",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 6,
                        "prefix": "reference__fasta__base=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "description",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 7,
                        "prefix": "description=",
                        "separate": false
                    }, "items": "string", "type": "array"
                }
            }],
            "outputs": [{
                "id": "config__algorithm__callable_regions",
                "type": {"items": "File", "type": "array"}
            }, {
                "id": "config__algorithm__non_callable_regions",
                "type": {"items": "File", "type": "array"}
            }, {
                "id": "config__algorithm__callable_count",
                "type": {"items": "int", "type": "array"}
            }]
        },
        "sbg:rdfId": "steps/combine_sample_regions.cwl",
        "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/combine_sample_regions.cwl"
    }, {
        "id": "batch_for_variantcall",
        "in": [{"id": "analysis", "source": "analysis"}, {
            "id": "genome_build",
            "source": "genome_build"
        }, {
            "id": "align_bam",
            "source": "alignment/align_bam"
        }, {
            "id": "config__algorithm__callable_regions",
            "source": "combine_sample_regions/config__algorithm__callable_regions"
        }, {"id": "metadata__batch", "source": "metadata__batch"}, {
            "id": "metadata__phenotype",
            "source": "metadata__phenotype"
        }, {
            "id": "regions__callable",
            "source": "postprocess_alignment/regions__callable"
        }, {
            "id": "config__algorithm__variantcaller",
            "source": "config__algorithm__variantcaller"
        }, {
            "id": "config__algorithm__coverage_interval",
            "source": "postprocess_alignment/config__algorithm__coverage_interval"
        }, {
            "id": "config__algorithm__variant_regions",
            "source": "postprocess_alignment/config__algorithm__variant_regions"
        }, {
            "id": "config__algorithm__validate",
            "source": "config__algorithm__validate"
        }, {
            "id": "config__algorithm__validate_regions",
            "source": "config__algorithm__validate_regions"
        }, {
            "id": "config__algorithm__tools_on",
            "source": "config__algorithm__tools_on"
        }, {
            "id": "config__algorithm__tools_off",
            "source": "config__algorithm__tools_off"
        }, {
            "id": "reference__fasta__base",
            "source": "reference__fasta__base"
        }, {"id": "reference__rtg", "source": "reference__rtg"}, {
            "id": "reference__genome_context",
            "source": "reference__genome_context"
        }, {
            "id": "genome_resources__variation__cosmic",
            "source": "genome_resources__variation__cosmic"
        }, {
            "id": "genome_resources__variation__dbsnp",
            "source": "genome_resources__variation__dbsnp"
        }, {"id": "description", "source": "description"}],
        "out": [{"id": "batch_rec"}],
        "run": {
            "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
            "baseCommand": ["bcbio_nextgen.py", "runfn", "batch_for_variantcall", "cwl"],
            "class": "CommandLineTool",
            "cwlVersion": "v1.0",
            "hints": [{"class": "ResourceRequirement", "coresMin": 4, "ramMin": 4096}],
            "inputs": [{
                "default": "multi-batch",
                "id": "sentinel-parallel",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 0,
                    "prefix": "sentinel-parallel=",
                    "separate": false
                },
                "type": "string"
            }, {
                "default": "[\"batch_rec\"]",
                "id": "sentinel-outputs",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 1,
                    "prefix": "sentinel-outputs=",
                    "separate": false
                },
                "type": "string"
            }, {
                "id": "analysis",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 2,
                        "prefix": "analysis=",
                        "separate": false
                    }, "items": "string", "type": "array"
                }
            }, {
                "id": "genome_build",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 3,
                        "prefix": "genome_build=",
                        "separate": false
                    }, "items": "string", "type": "array"
                }
            }, {
                "id": "align_bam",
                "secondaryFiles": [".bai"],
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 4,
                        "prefix": "align_bam=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "config__algorithm__callable_regions",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 5,
                        "prefix": "config__algorithm__callable_regions=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "metadata__batch",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 6,
                        "prefix": "metadata__batch=",
                        "separate": false
                    }, "items": "string", "type": "array"
                }
            }, {
                "id": "metadata__phenotype",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 7,
                        "prefix": "metadata__phenotype=",
                        "separate": false
                    }, "items": "string", "type": "array"
                }
            }, {
                "id": "regions__callable",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 8,
                        "prefix": "regions__callable=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "config__algorithm__variantcaller",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 9,
                        "prefix": "config__algorithm__variantcaller=",
                        "separate": false
                    }, "items": {"items": "string", "type": "array"}, "type": "array"
                }
            }, {
                "id": "config__algorithm__coverage_interval",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 10,
                        "prefix": "config__algorithm__coverage_interval=",
                        "separate": false
                    }, "items": "string", "type": "array"
                }
            }, {
                "id": "config__algorithm__variant_regions",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 11,
                        "prefix": "config__algorithm__variant_regions=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "config__algorithm__validate",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 12,
                        "prefix": "config__algorithm__validate=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "config__algorithm__validate_regions",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 13,
                        "prefix": "config__algorithm__validate_regions=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "config__algorithm__tools_on",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 14,
                        "prefix": "config__algorithm__tools_on=",
                        "separate": false
                    }, "items": {"items": "null", "type": "array"}, "type": "array"
                }
            }, {
                "id": "config__algorithm__tools_off",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 15,
                        "prefix": "config__algorithm__tools_off=",
                        "separate": false
                    }, "items": {"items": "string", "type": "array"}, "type": "array"
                }
            }, {
                "id": "reference__fasta__base",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 16,
                        "prefix": "reference__fasta__base=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "reference__rtg",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 17,
                        "prefix": "reference__rtg=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "reference__genome_context",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 18,
                        "prefix": "reference__genome_context=",
                        "separate": false
                    }, "items": {"items": "File", "type": "array"}, "type": "array"
                }
            }, {
                "id": "genome_resources__variation__cosmic",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 19,
                        "prefix": "genome_resources__variation__cosmic=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "genome_resources__variation__dbsnp",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 20,
                        "prefix": "genome_resources__variation__dbsnp=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "description",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 21,
                        "prefix": "description=",
                        "separate": false
                    }, "items": "string", "type": "array"
                }
            }],
            "outputs": [{
                "id": "batch_rec",
                "type": {
                    "items": {
                        "fields": [{
                            "name": "description",
                            "type": {"items": "string", "type": "array"}
                        }, {
                            "name": "config__algorithm__validate",
                            "type": {"items": "File", "type": "array"}
                        }, {
                            "name": "reference__fasta__base",
                            "type": {"items": "File", "type": "array"}
                        }, {
                            "name": "reference__rtg",
                            "type": {"items": "File", "type": "array"}
                        }, {
                            "name": "config__algorithm__variantcaller",
                            "type": {"items": "string", "type": "array"}
                        }, {
                            "name": "config__algorithm__coverage_interval",
                            "type": {"items": "string", "type": "array"}
                        }, {
                            "name": "metadata__batch",
                            "type": {"items": "string", "type": "array"}
                        }, {
                            "name": "reference__genome_context",
                            "type": {"items": {"items": "File", "type": "array"}, "type": "array"}
                        }, {
                            "name": "config__algorithm__validate_regions",
                            "type": {"items": "File", "type": "array"}
                        }, {
                            "name": "genome_build",
                            "type": {"items": "string", "type": "array"}
                        }, {
                            "name": "metadata__phenotype",
                            "type": {"items": "string", "type": "array"}
                        }, {
                            "name": "config__algorithm__tools_off",
                            "type": {"items": {"items": "string", "type": "array"}, "type": "array"}
                        }, {
                            "name": "genome_resources__variation__dbsnp",
                            "type": {"items": "File", "type": "array"}
                        }, {
                            "name": "genome_resources__variation__cosmic",
                            "type": {"items": "File", "type": "array"}
                        }, {
                            "name": "analysis",
                            "type": {"items": "string", "type": "array"}
                        }, {
                            "name": "config__algorithm__tools_on",
                            "type": {"items": {"items": "null", "type": "array"}, "type": "array"}
                        }, {
                            "name": "config__algorithm__variant_regions",
                            "type": {"items": "File", "type": "array"}
                        }, {
                            "name": "align_bam",
                            "type": {"items": "File", "type": "array"}
                        }, {
                            "name": "regions__callable",
                            "type": {"items": "File", "type": "array"}
                        }, {
                            "name": "config__algorithm__callable_regions",
                            "type": {"items": "File", "type": "array"}
                        }], "name": "batch_rec", "type": "record"
                    }, "type": "array"
                }
            }]
        },
        "sbg:rdfId": "steps/batch_for_variantcall.cwl",
        "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/batch_for_variantcall.cwl"
    }, {
        "id": "variantcall",
        "in": [{
            "id": "description",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['description'])"
        }, {
            "id": "config__algorithm__validate",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['config__algorithm__validate'])"
        }, {
            "id": "reference__fasta__base",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['reference__fasta__base'])"
        }, {
            "id": "reference__rtg",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['reference__rtg'])"
        }, {
            "id": "config__algorithm__variantcaller",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['config__algorithm__variantcaller'])"
        }, {
            "id": "config__algorithm__coverage_interval",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['config__algorithm__coverage_interval'])"
        }, {
            "id": "metadata__batch",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['metadata__batch'])"
        }, {
            "id": "reference__genome_context",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['reference__genome_context'])"
        }, {
            "id": "config__algorithm__validate_regions",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['config__algorithm__validate_regions'])"
        }, {
            "id": "genome_build",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['genome_build'])"
        }, {
            "id": "metadata__phenotype",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['metadata__phenotype'])"
        }, {
            "id": "config__algorithm__tools_off",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['config__algorithm__tools_off'])"
        }, {
            "id": "genome_resources__variation__dbsnp",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['genome_resources__variation__dbsnp'])"
        }, {
            "id": "genome_resources__variation__cosmic",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['genome_resources__variation__cosmic'])"
        }, {
            "id": "analysis",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['analysis'])"
        }, {
            "id": "config__algorithm__tools_on",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['config__algorithm__tools_on'])"
        }, {
            "id": "config__algorithm__variant_regions",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['config__algorithm__variant_regions'])"
        }, {
            "id": "align_bam",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['align_bam'])"
        }, {
            "id": "regions__callable",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['regions__callable'])"
        }, {
            "id": "config__algorithm__callable_regions",
            "source": "batch_for_variantcall/batch_rec",
            "valueFrom": "$(self['config__algorithm__callable_regions'])"
        }],
        "out": [{"id": "vc_rec"}, {"id": "validate__tp"}, {"id": "validate__fp"}, {"id": "validate__fn"}],
        "run": {
            "class": "Workflow",
            "cwlVersion": "v1.0",
            "hints": [{
                "class": "DockerRequirement",
                "dockerImageId": "bcbio/bcbio",
                "dockerPull": "bcbio/bcbio"
            }],
            "inputs": [{
                "id": "description",
                "type": {"items": "string", "type": "array"}
            }, {
                "id": "config__algorithm__validate",
                "type": {"items": "File", "type": "array"}
            }, {
                "id": "reference__fasta__base",
                "type": {"items": "File", "type": "array"}
            }, {
                "id": "reference__rtg",
                "type": {"items": "File", "type": "array"}
            }, {
                "id": "config__algorithm__variantcaller",
                "type": {"items": "string", "type": "array"}
            }, {
                "id": "config__algorithm__coverage_interval",
                "type": {"items": "string", "type": "array"}
            }, {
                "id": "metadata__batch",
                "type": {"items": "string", "type": "array"}
            }, {
                "id": "reference__genome_context",
                "type": {"items": {"items": "File", "type": "array"}, "type": "array"}
            }, {
                "id": "config__algorithm__validate_regions",
                "type": {"items": "File", "type": "array"}
            }, {
                "id": "genome_build",
                "type": {"items": "string", "type": "array"}
            }, {
                "id": "metadata__phenotype",
                "type": {"items": "string", "type": "array"}
            }, {
                "id": "config__algorithm__tools_off",
                "type": {"items": {"items": "string", "type": "array"}, "type": "array"}
            }, {
                "id": "genome_resources__variation__dbsnp",
                "type": {"items": "File", "type": "array"}
            }, {
                "id": "genome_resources__variation__cosmic",
                "type": {"items": "File", "type": "array"}
            }, {
                "id": "analysis",
                "type": {"items": "string", "type": "array"}
            }, {
                "id": "config__algorithm__tools_on",
                "type": {"items": {"items": "null", "type": "array"}, "type": "array"}
            }, {
                "id": "config__algorithm__variant_regions",
                "type": {"items": "File", "type": "array"}
            }, {
                "id": "align_bam",
                "type": {"items": "File", "type": "array"}
            }, {
                "id": "regions__callable",
                "type": {"items": "File", "type": "array"}
            }, {
                "id": "config__algorithm__callable_regions",
                "type": {"items": "File", "type": "array"}
            }],
            "outputs": [{
                "id": "vc_rec",
                "outputSource": "vc_output_record/vc_rec",
                "type": {
                    "fields": [{
                        "name": "description",
                        "type": {"items": "string", "type": "array"}
                    }, {
                        "name": "vrn_file",
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "name": "config__algorithm__validate",
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "name": "reference__fasta__base",
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "name": "reference__rtg",
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "name": "config__algorithm__variantcaller",
                        "type": {"items": "string", "type": "array"}
                    }, {
                        "name": "config__algorithm__coverage_interval",
                        "type": {"items": "string", "type": "array"}
                    }, {
                        "name": "metadata__batch",
                        "type": {"items": "string", "type": "array"}
                    }, {
                        "name": "reference__genome_context",
                        "type": {"items": {"items": "File", "type": "array"}, "type": "array"}
                    }, {
                        "name": "config__algorithm__validate_regions",
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "name": "genome_build",
                        "type": {"items": "string", "type": "array"}
                    }, {
                        "name": "metadata__phenotype",
                        "type": {"items": "string", "type": "array"}
                    }, {
                        "name": "config__algorithm__tools_off",
                        "type": {"items": {"items": "string", "type": "array"}, "type": "array"}
                    }, {
                        "name": "genome_resources__variation__dbsnp",
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "name": "genome_resources__variation__cosmic",
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "name": "analysis",
                        "type": {"items": "string", "type": "array"}
                    }, {
                        "name": "config__algorithm__tools_on",
                        "type": {"items": {"items": "null", "type": "array"}, "type": "array"}
                    }, {
                        "name": "config__algorithm__variant_regions",
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "name": "align_bam",
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "name": "regions__callable",
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "name": "config__algorithm__callable_regions",
                        "type": {"items": "File", "type": "array"}
                    }, {
                        "name": "validate__summary",
                        "type": {"items": ["File", "null"], "type": "array"}
                    }, {
                        "name": "validate__tp",
                        "type": {"items": ["File", "null"], "type": "array"}
                    }, {
                        "name": "validate__fp",
                        "type": {"items": ["File", "null"], "type": "array"}
                    }, {
                        "name": "validate__fn",
                        "type": {"items": ["File", "null"], "type": "array"}
                    }], "name": "vc_rec", "type": "record"
                }
            }, {
                "id": "validate__tp",
                "outputSource": "compare_to_rm/validate__tp",
                "secondaryFiles": [".tbi"],
                "type": ["File", "null"]
            }, {
                "id": "validate__fp",
                "outputSource": "compare_to_rm/validate__fp",
                "secondaryFiles": [".tbi"],
                "type": ["File", "null"]
            }, {
                "id": "validate__fn",
                "outputSource": "compare_to_rm/validate__fn",
                "secondaryFiles": [".tbi"],
                "type": ["File", "null"]
            }],
            "requirements": [{
                "class": "EnvVarRequirement",
                "envDef": [{"envName": "MPLCONFIGDIR", "envValue": "."}]
            }, {"class": "ScatterFeatureRequirement"}, {"class": "StepInputExpressionRequirement"}, {"class": "SubworkflowFeatureRequirement"}, {"class": "InlineJavascriptRequirement"}],
            "steps": [{
                "id": "get_parallel_regions",
                "in": [{
                    "id": "description",
                    "source": "description"
                }, {
                    "id": "config__algorithm__validate",
                    "source": "config__algorithm__validate"
                }, {
                    "id": "reference__fasta__base",
                    "source": "reference__fasta__base"
                }, {
                    "id": "reference__rtg",
                    "source": "reference__rtg"
                }, {
                    "id": "config__algorithm__variantcaller",
                    "source": "config__algorithm__variantcaller"
                }, {
                    "id": "config__algorithm__coverage_interval",
                    "source": "config__algorithm__coverage_interval"
                }, {
                    "id": "metadata__batch",
                    "source": "metadata__batch"
                }, {
                    "id": "reference__genome_context",
                    "source": "reference__genome_context"
                }, {
                    "id": "config__algorithm__validate_regions",
                    "source": "config__algorithm__validate_regions"
                }, {"id": "genome_build", "source": "genome_build"}, {
                    "id": "metadata__phenotype",
                    "source": "metadata__phenotype"
                }, {
                    "id": "config__algorithm__tools_off",
                    "source": "config__algorithm__tools_off"
                }, {
                    "id": "genome_resources__variation__dbsnp",
                    "source": "genome_resources__variation__dbsnp"
                }, {
                    "id": "genome_resources__variation__cosmic",
                    "source": "genome_resources__variation__cosmic"
                }, {"id": "analysis", "source": "analysis"}, {
                    "id": "config__algorithm__tools_on",
                    "source": "config__algorithm__tools_on"
                }, {
                    "id": "config__algorithm__variant_regions",
                    "source": "config__algorithm__variant_regions"
                }, {"id": "align_bam", "source": "align_bam"}, {
                    "id": "regions__callable",
                    "source": "regions__callable"
                }, {
                    "id": "config__algorithm__callable_regions",
                    "source": "config__algorithm__callable_regions"
                }],
                "out": [{"id": "region"}],
                "run": {
                    "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
                    "baseCommand": ["bcbio_nextgen.py", "runfn", "get_parallel_regions", "cwl"],
                    "class": "CommandLineTool",
                    "cwlVersion": "v1.0",
                    "hints": [{"class": "ResourceRequirement", "coresMin": 4, "ramMin": 4096}],
                    "inputs": [{
                        "default": "batch-split",
                        "id": "sentinel-parallel",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 0,
                            "prefix": "sentinel-parallel=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "default": "[\"region\"]",
                        "id": "sentinel-outputs",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 1,
                            "prefix": "sentinel-outputs=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "description",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 2,
                                "prefix": "description=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__validate",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 3,
                                "prefix": "config__algorithm__validate=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "reference__fasta__base",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 4,
                                "prefix": "reference__fasta__base=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "reference__rtg",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 5,
                                "prefix": "reference__rtg=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__variantcaller",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 6,
                                "prefix": "config__algorithm__variantcaller=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__coverage_interval",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 7,
                                "prefix": "config__algorithm__coverage_interval=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "metadata__batch",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 8,
                                "prefix": "metadata__batch=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "reference__genome_context",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 9,
                                "prefix": "reference__genome_context=",
                                "separate": false
                            }, "items": {"items": "File", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__validate_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 10,
                                "prefix": "config__algorithm__validate_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "genome_build",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 11,
                                "prefix": "genome_build=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "metadata__phenotype",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 12,
                                "prefix": "metadata__phenotype=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__tools_off",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 13,
                                "prefix": "config__algorithm__tools_off=",
                                "separate": false
                            }, "items": {"items": "string", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "genome_resources__variation__dbsnp",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 14,
                                "prefix": "genome_resources__variation__dbsnp=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "genome_resources__variation__cosmic",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 15,
                                "prefix": "genome_resources__variation__cosmic=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "analysis",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 16,
                                "prefix": "analysis=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__tools_on",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 17,
                                "prefix": "config__algorithm__tools_on=",
                                "separate": false
                            }, "items": {"items": "null", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__variant_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 18,
                                "prefix": "config__algorithm__variant_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "align_bam",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 19,
                                "prefix": "align_bam=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "regions__callable",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 20,
                                "prefix": "regions__callable=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__callable_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 21,
                                "prefix": "config__algorithm__callable_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }],
                    "outputs": [{"id": "region", "type": {"items": "string", "type": "array"}}]
                },
                "sbg:rdfId": "steps/get_parallel_regions.cwl",
                "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/get_parallel_regions.cwl"
            }, {
                "id": "variantcall_batch_region",
                "in": [{
                    "id": "description",
                    "source": "description"
                }, {
                    "id": "config__algorithm__validate",
                    "source": "config__algorithm__validate"
                }, {
                    "id": "reference__fasta__base",
                    "source": "reference__fasta__base"
                }, {
                    "id": "reference__rtg",
                    "source": "reference__rtg"
                }, {
                    "id": "config__algorithm__variantcaller",
                    "source": "config__algorithm__variantcaller"
                }, {
                    "id": "config__algorithm__coverage_interval",
                    "source": "config__algorithm__coverage_interval"
                }, {
                    "id": "metadata__batch",
                    "source": "metadata__batch"
                }, {
                    "id": "reference__genome_context",
                    "source": "reference__genome_context"
                }, {
                    "id": "config__algorithm__validate_regions",
                    "source": "config__algorithm__validate_regions"
                }, {"id": "genome_build", "source": "genome_build"}, {
                    "id": "metadata__phenotype",
                    "source": "metadata__phenotype"
                }, {
                    "id": "config__algorithm__tools_off",
                    "source": "config__algorithm__tools_off"
                }, {
                    "id": "genome_resources__variation__dbsnp",
                    "source": "genome_resources__variation__dbsnp"
                }, {
                    "id": "genome_resources__variation__cosmic",
                    "source": "genome_resources__variation__cosmic"
                }, {"id": "analysis", "source": "analysis"}, {
                    "id": "config__algorithm__tools_on",
                    "source": "config__algorithm__tools_on"
                }, {
                    "id": "config__algorithm__variant_regions",
                    "source": "config__algorithm__variant_regions"
                }, {"id": "align_bam", "source": "align_bam"}, {
                    "id": "regions__callable",
                    "source": "regions__callable"
                }, {
                    "id": "config__algorithm__callable_regions",
                    "source": "config__algorithm__callable_regions"
                }, {"id": "region", "source": "get_parallel_regions/region"}],
                "out": [{"id": "vrn_file_region"}, {"id": "region"}],
                "run": {
                    "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
                    "baseCommand": ["bcbio_nextgen.py", "runfn", "variantcall_batch_region", "cwl"],
                    "class": "CommandLineTool",
                    "cwlVersion": "v1.0",
                    "hints": [{"class": "ResourceRequirement", "coresMin": 4, "ramMin": 4096}],
                    "inputs": [{
                        "default": "batch-parallel",
                        "id": "sentinel-parallel",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 0,
                            "prefix": "sentinel-parallel=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "default": "[\"vrn_file_region\",\"region\"]",
                        "id": "sentinel-outputs",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 1,
                            "prefix": "sentinel-outputs=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "description",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 2,
                                "prefix": "description=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__validate",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 3,
                                "prefix": "config__algorithm__validate=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "reference__fasta__base",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 4,
                                "prefix": "reference__fasta__base=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "reference__rtg",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 5,
                                "prefix": "reference__rtg=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__variantcaller",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 6,
                                "prefix": "config__algorithm__variantcaller=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__coverage_interval",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 7,
                                "prefix": "config__algorithm__coverage_interval=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "metadata__batch",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 8,
                                "prefix": "metadata__batch=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "reference__genome_context",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 9,
                                "prefix": "reference__genome_context=",
                                "separate": false
                            }, "items": {"items": "File", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__validate_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 10,
                                "prefix": "config__algorithm__validate_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "genome_build",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 11,
                                "prefix": "genome_build=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "metadata__phenotype",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 12,
                                "prefix": "metadata__phenotype=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__tools_off",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 13,
                                "prefix": "config__algorithm__tools_off=",
                                "separate": false
                            }, "items": {"items": "string", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "genome_resources__variation__dbsnp",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 14,
                                "prefix": "genome_resources__variation__dbsnp=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "genome_resources__variation__cosmic",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 15,
                                "prefix": "genome_resources__variation__cosmic=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "analysis",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 16,
                                "prefix": "analysis=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__tools_on",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 17,
                                "prefix": "config__algorithm__tools_on=",
                                "separate": false
                            }, "items": {"items": "null", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__variant_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 18,
                                "prefix": "config__algorithm__variant_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "align_bam",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 19,
                                "prefix": "align_bam=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "regions__callable",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 20,
                                "prefix": "regions__callable=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__callable_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 21,
                                "prefix": "config__algorithm__callable_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "region",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 22,
                            "prefix": "region=",
                            "separate": false
                        },
                        "type": "string"
                    }],
                    "outputs": [{
                        "id": "vrn_file_region",
                        "secondaryFiles": [".tbi"],
                        "type": "File"
                    }, {"id": "region", "type": "string"}]
                },
                "scatter": ["region"],
                "scatterMethod": "dotproduct",
                "sbg:rdfId": "steps/variantcall_batch_region.cwl",
                "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/variantcall_batch_region.cwl"
            }, {
                "id": "concat_batch_variantcalls",
                "in": [{
                    "id": "description",
                    "source": "description"
                }, {
                    "id": "config__algorithm__validate",
                    "source": "config__algorithm__validate"
                }, {
                    "id": "reference__fasta__base",
                    "source": "reference__fasta__base"
                }, {
                    "id": "reference__rtg",
                    "source": "reference__rtg"
                }, {
                    "id": "config__algorithm__variantcaller",
                    "source": "config__algorithm__variantcaller"
                }, {
                    "id": "config__algorithm__coverage_interval",
                    "source": "config__algorithm__coverage_interval"
                }, {
                    "id": "metadata__batch",
                    "source": "metadata__batch"
                }, {
                    "id": "reference__genome_context",
                    "source": "reference__genome_context"
                }, {
                    "id": "config__algorithm__validate_regions",
                    "source": "config__algorithm__validate_regions"
                }, {"id": "genome_build", "source": "genome_build"}, {
                    "id": "metadata__phenotype",
                    "source": "metadata__phenotype"
                }, {
                    "id": "config__algorithm__tools_off",
                    "source": "config__algorithm__tools_off"
                }, {
                    "id": "genome_resources__variation__dbsnp",
                    "source": "genome_resources__variation__dbsnp"
                }, {
                    "id": "genome_resources__variation__cosmic",
                    "source": "genome_resources__variation__cosmic"
                }, {"id": "analysis", "source": "analysis"}, {
                    "id": "config__algorithm__tools_on",
                    "source": "config__algorithm__tools_on"
                }, {
                    "id": "config__algorithm__variant_regions",
                    "source": "config__algorithm__variant_regions"
                }, {"id": "align_bam", "source": "align_bam"}, {
                    "id": "regions__callable",
                    "source": "regions__callable"
                }, {
                    "id": "config__algorithm__callable_regions",
                    "source": "config__algorithm__callable_regions"
                }, {
                    "id": "region",
                    "source": "variantcall_batch_region/region"
                }, {"id": "vrn_file_region", "source": "variantcall_batch_region/vrn_file_region"}],
                "out": [{"id": "vrn_file"}],
                "run": {
                    "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
                    "baseCommand": ["bcbio_nextgen.py", "runfn", "concat_batch_variantcalls", "cwl"],
                    "class": "CommandLineTool",
                    "cwlVersion": "v1.0",
                    "hints": [{"class": "ResourceRequirement", "coresMin": 4, "ramMin": 4096}],
                    "inputs": [{
                        "default": "batch-merge",
                        "id": "sentinel-parallel",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 0,
                            "prefix": "sentinel-parallel=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "default": "[\"vrn_file\"]",
                        "id": "sentinel-outputs",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 1,
                            "prefix": "sentinel-outputs=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "description",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 2,
                                "prefix": "description=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__validate",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 3,
                                "prefix": "config__algorithm__validate=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "reference__fasta__base",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 4,
                                "prefix": "reference__fasta__base=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "reference__rtg",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 5,
                                "prefix": "reference__rtg=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__variantcaller",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 6,
                                "prefix": "config__algorithm__variantcaller=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__coverage_interval",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 7,
                                "prefix": "config__algorithm__coverage_interval=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "metadata__batch",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 8,
                                "prefix": "metadata__batch=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "reference__genome_context",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 9,
                                "prefix": "reference__genome_context=",
                                "separate": false
                            }, "items": {"items": "File", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__validate_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 10,
                                "prefix": "config__algorithm__validate_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "genome_build",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 11,
                                "prefix": "genome_build=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "metadata__phenotype",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 12,
                                "prefix": "metadata__phenotype=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__tools_off",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 13,
                                "prefix": "config__algorithm__tools_off=",
                                "separate": false
                            }, "items": {"items": "string", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "genome_resources__variation__dbsnp",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 14,
                                "prefix": "genome_resources__variation__dbsnp=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "genome_resources__variation__cosmic",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 15,
                                "prefix": "genome_resources__variation__cosmic=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "analysis",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 16,
                                "prefix": "analysis=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__tools_on",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 17,
                                "prefix": "config__algorithm__tools_on=",
                                "separate": false
                            }, "items": {"items": "null", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__variant_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 18,
                                "prefix": "config__algorithm__variant_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "align_bam",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 19,
                                "prefix": "align_bam=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "regions__callable",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 20,
                                "prefix": "regions__callable=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__callable_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 21,
                                "prefix": "config__algorithm__callable_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "region",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 22,
                                "prefix": "region=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "vrn_file_region",
                        "secondaryFiles": [".tbi"],
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 23,
                                "prefix": "vrn_file_region=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }],
                    "outputs": [{"id": "vrn_file", "secondaryFiles": [".tbi"], "type": "File"}]
                },
                "sbg:rdfId": "steps/concat_batch_variantcalls.cwl",
                "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/concat_batch_variantcalls.cwl"
            }, {
                "id": "postprocess_variants",
                "in": [{
                    "id": "description",
                    "source": "description"
                }, {
                    "id": "config__algorithm__validate",
                    "source": "config__algorithm__validate"
                }, {
                    "id": "reference__fasta__base",
                    "source": "reference__fasta__base"
                }, {
                    "id": "reference__rtg",
                    "source": "reference__rtg"
                }, {
                    "id": "config__algorithm__variantcaller",
                    "source": "config__algorithm__variantcaller"
                }, {
                    "id": "config__algorithm__coverage_interval",
                    "source": "config__algorithm__coverage_interval"
                }, {
                    "id": "metadata__batch",
                    "source": "metadata__batch"
                }, {
                    "id": "reference__genome_context",
                    "source": "reference__genome_context"
                }, {
                    "id": "config__algorithm__validate_regions",
                    "source": "config__algorithm__validate_regions"
                }, {"id": "genome_build", "source": "genome_build"}, {
                    "id": "metadata__phenotype",
                    "source": "metadata__phenotype"
                }, {
                    "id": "config__algorithm__tools_off",
                    "source": "config__algorithm__tools_off"
                }, {
                    "id": "genome_resources__variation__dbsnp",
                    "source": "genome_resources__variation__dbsnp"
                }, {
                    "id": "genome_resources__variation__cosmic",
                    "source": "genome_resources__variation__cosmic"
                }, {"id": "analysis", "source": "analysis"}, {
                    "id": "config__algorithm__tools_on",
                    "source": "config__algorithm__tools_on"
                }, {
                    "id": "config__algorithm__variant_regions",
                    "source": "config__algorithm__variant_regions"
                }, {"id": "align_bam", "source": "align_bam"}, {
                    "id": "regions__callable",
                    "source": "regions__callable"
                }, {
                    "id": "config__algorithm__callable_regions",
                    "source": "config__algorithm__callable_regions"
                }, {"id": "vrn_file", "source": "concat_batch_variantcalls/vrn_file"}],
                "out": [{"id": "vrn_file"}],
                "run": {
                    "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
                    "baseCommand": ["bcbio_nextgen.py", "runfn", "postprocess_variants", "cwl"],
                    "class": "CommandLineTool",
                    "cwlVersion": "v1.0",
                    "hints": [{"class": "ResourceRequirement", "coresMin": 4, "ramMin": 4096}],
                    "inputs": [{
                        "default": "batch-single",
                        "id": "sentinel-parallel",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 0,
                            "prefix": "sentinel-parallel=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "default": "[\"vrn_file\"]",
                        "id": "sentinel-outputs",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 1,
                            "prefix": "sentinel-outputs=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "description",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 2,
                                "prefix": "description=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__validate",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 3,
                                "prefix": "config__algorithm__validate=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "reference__fasta__base",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 4,
                                "prefix": "reference__fasta__base=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "reference__rtg",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 5,
                                "prefix": "reference__rtg=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__variantcaller",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 6,
                                "prefix": "config__algorithm__variantcaller=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__coverage_interval",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 7,
                                "prefix": "config__algorithm__coverage_interval=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "metadata__batch",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 8,
                                "prefix": "metadata__batch=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "reference__genome_context",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 9,
                                "prefix": "reference__genome_context=",
                                "separate": false
                            }, "items": {"items": "File", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__validate_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 10,
                                "prefix": "config__algorithm__validate_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "genome_build",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 11,
                                "prefix": "genome_build=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "metadata__phenotype",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 12,
                                "prefix": "metadata__phenotype=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__tools_off",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 13,
                                "prefix": "config__algorithm__tools_off=",
                                "separate": false
                            }, "items": {"items": "string", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "genome_resources__variation__dbsnp",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 14,
                                "prefix": "genome_resources__variation__dbsnp=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "genome_resources__variation__cosmic",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 15,
                                "prefix": "genome_resources__variation__cosmic=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "analysis",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 16,
                                "prefix": "analysis=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__tools_on",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 17,
                                "prefix": "config__algorithm__tools_on=",
                                "separate": false
                            }, "items": {"items": "null", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__variant_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 18,
                                "prefix": "config__algorithm__variant_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "align_bam",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 19,
                                "prefix": "align_bam=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "regions__callable",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 20,
                                "prefix": "regions__callable=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__callable_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 21,
                                "prefix": "config__algorithm__callable_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "vrn_file",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 22,
                            "prefix": "vrn_file=",
                            "separate": false
                        },
                        "secondaryFiles": [".tbi"],
                        "type": "File"
                    }],
                    "outputs": [{"id": "vrn_file", "secondaryFiles": [".tbi"], "type": "File"}]
                },
                "sbg:rdfId": "steps/postprocess_variants.cwl",
                "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/postprocess_variants.cwl"
            }, {
                "id": "compare_to_rm",
                "in": [{
                    "id": "description",
                    "source": "description"
                }, {
                    "id": "config__algorithm__validate",
                    "source": "config__algorithm__validate"
                }, {
                    "id": "reference__fasta__base",
                    "source": "reference__fasta__base"
                }, {
                    "id": "reference__rtg",
                    "source": "reference__rtg"
                }, {
                    "id": "config__algorithm__variantcaller",
                    "source": "config__algorithm__variantcaller"
                }, {
                    "id": "config__algorithm__coverage_interval",
                    "source": "config__algorithm__coverage_interval"
                }, {
                    "id": "metadata__batch",
                    "source": "metadata__batch"
                }, {
                    "id": "reference__genome_context",
                    "source": "reference__genome_context"
                }, {
                    "id": "config__algorithm__validate_regions",
                    "source": "config__algorithm__validate_regions"
                }, {"id": "genome_build", "source": "genome_build"}, {
                    "id": "metadata__phenotype",
                    "source": "metadata__phenotype"
                }, {
                    "id": "config__algorithm__tools_off",
                    "source": "config__algorithm__tools_off"
                }, {
                    "id": "genome_resources__variation__dbsnp",
                    "source": "genome_resources__variation__dbsnp"
                }, {
                    "id": "genome_resources__variation__cosmic",
                    "source": "genome_resources__variation__cosmic"
                }, {"id": "analysis", "source": "analysis"}, {
                    "id": "config__algorithm__tools_on",
                    "source": "config__algorithm__tools_on"
                }, {
                    "id": "config__algorithm__variant_regions",
                    "source": "config__algorithm__variant_regions"
                }, {"id": "align_bam", "source": "align_bam"}, {
                    "id": "regions__callable",
                    "source": "regions__callable"
                }, {
                    "id": "config__algorithm__callable_regions",
                    "source": "config__algorithm__callable_regions"
                }, {"id": "vrn_file", "source": "postprocess_variants/vrn_file"}],
                "out": [{"id": "validate__summary"}, {"id": "validate__tp"}, {"id": "validate__fp"}, {"id": "validate__fn"}],
                "run": {
                    "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
                    "baseCommand": ["bcbio_nextgen.py", "runfn", "compare_to_rm", "cwl"],
                    "class": "CommandLineTool",
                    "cwlVersion": "v1.0",
                    "hints": [{"class": "ResourceRequirement", "coresMin": 4, "ramMin": 4096}],
                    "inputs": [{
                        "default": "batch-single",
                        "id": "sentinel-parallel",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 0,
                            "prefix": "sentinel-parallel=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "default": "[\"validate__summary\",\"validate__tp\",\"validate__fp\",\"validate__fn\"]",
                        "id": "sentinel-outputs",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 1,
                            "prefix": "sentinel-outputs=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "description",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 2,
                                "prefix": "description=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__validate",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 3,
                                "prefix": "config__algorithm__validate=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "reference__fasta__base",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 4,
                                "prefix": "reference__fasta__base=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "reference__rtg",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 5,
                                "prefix": "reference__rtg=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__variantcaller",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 6,
                                "prefix": "config__algorithm__variantcaller=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__coverage_interval",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 7,
                                "prefix": "config__algorithm__coverage_interval=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "metadata__batch",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 8,
                                "prefix": "metadata__batch=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "reference__genome_context",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 9,
                                "prefix": "reference__genome_context=",
                                "separate": false
                            }, "items": {"items": "File", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__validate_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 10,
                                "prefix": "config__algorithm__validate_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "genome_build",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 11,
                                "prefix": "genome_build=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "metadata__phenotype",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 12,
                                "prefix": "metadata__phenotype=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__tools_off",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 13,
                                "prefix": "config__algorithm__tools_off=",
                                "separate": false
                            }, "items": {"items": "string", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "genome_resources__variation__dbsnp",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 14,
                                "prefix": "genome_resources__variation__dbsnp=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "genome_resources__variation__cosmic",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 15,
                                "prefix": "genome_resources__variation__cosmic=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "analysis",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 16,
                                "prefix": "analysis=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__tools_on",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 17,
                                "prefix": "config__algorithm__tools_on=",
                                "separate": false
                            }, "items": {"items": "null", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__variant_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 18,
                                "prefix": "config__algorithm__variant_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "align_bam",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 19,
                                "prefix": "align_bam=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "regions__callable",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 20,
                                "prefix": "regions__callable=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__callable_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 21,
                                "prefix": "config__algorithm__callable_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "vrn_file",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 22,
                            "prefix": "vrn_file=",
                            "separate": false
                        },
                        "secondaryFiles": [".tbi"],
                        "type": "File"
                    }],
                    "outputs": [{
                        "id": "validate__summary",
                        "type": ["File", "null"]
                    }, {
                        "id": "validate__tp",
                        "secondaryFiles": [".tbi"],
                        "type": ["File", "null"]
                    }, {
                        "id": "validate__fp",
                        "secondaryFiles": [".tbi"],
                        "type": ["File", "null"]
                    }, {"id": "validate__fn", "secondaryFiles": [".tbi"], "type": ["File", "null"]}]
                },
                "sbg:rdfId": "steps/compare_to_rm.cwl",
                "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/compare_to_rm.cwl"
            }, {
                "id": "vc_output_record",
                "in": [{
                    "id": "description",
                    "source": "description"
                }, {
                    "id": "config__algorithm__validate",
                    "source": "config__algorithm__validate"
                }, {
                    "id": "reference__fasta__base",
                    "source": "reference__fasta__base"
                }, {
                    "id": "reference__rtg",
                    "source": "reference__rtg"
                }, {
                    "id": "config__algorithm__variantcaller",
                    "source": "config__algorithm__variantcaller"
                }, {
                    "id": "config__algorithm__coverage_interval",
                    "source": "config__algorithm__coverage_interval"
                }, {
                    "id": "metadata__batch",
                    "source": "metadata__batch"
                }, {
                    "id": "reference__genome_context",
                    "source": "reference__genome_context"
                }, {
                    "id": "config__algorithm__validate_regions",
                    "source": "config__algorithm__validate_regions"
                }, {"id": "genome_build", "source": "genome_build"}, {
                    "id": "metadata__phenotype",
                    "source": "metadata__phenotype"
                }, {
                    "id": "config__algorithm__tools_off",
                    "source": "config__algorithm__tools_off"
                }, {
                    "id": "genome_resources__variation__dbsnp",
                    "source": "genome_resources__variation__dbsnp"
                }, {
                    "id": "genome_resources__variation__cosmic",
                    "source": "genome_resources__variation__cosmic"
                }, {"id": "analysis", "source": "analysis"}, {
                    "id": "config__algorithm__tools_on",
                    "source": "config__algorithm__tools_on"
                }, {
                    "id": "config__algorithm__variant_regions",
                    "source": "config__algorithm__variant_regions"
                }, {"id": "align_bam", "source": "align_bam"}, {
                    "id": "regions__callable",
                    "source": "regions__callable"
                }, {
                    "id": "config__algorithm__callable_regions",
                    "source": "config__algorithm__callable_regions"
                }, {
                    "id": "vrn_file",
                    "source": "postprocess_variants/vrn_file"
                }, {
                    "id": "validate__summary",
                    "source": "compare_to_rm/validate__summary"
                }, {
                    "id": "validate__tp",
                    "source": "compare_to_rm/validate__tp"
                }, {
                    "id": "validate__fp",
                    "source": "compare_to_rm/validate__fp"
                }, {"id": "validate__fn", "source": "compare_to_rm/validate__fn"}],
                "out": [{"id": "vc_rec"}],
                "run": {
                    "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
                    "baseCommand": ["bcbio_nextgen.py", "runfn", "vc_output_record", "cwl"],
                    "class": "CommandLineTool",
                    "cwlVersion": "v1.0",
                    "hints": [{"class": "ResourceRequirement", "coresMin": 4, "ramMin": 4096}],
                    "inputs": [{
                        "default": "batch-single",
                        "id": "sentinel-parallel",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 0,
                            "prefix": "sentinel-parallel=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "default": "[\"vc_rec\"]",
                        "id": "sentinel-outputs",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 1,
                            "prefix": "sentinel-outputs=",
                            "separate": false
                        },
                        "type": "string"
                    }, {
                        "id": "description",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 2,
                                "prefix": "description=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__validate",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 3,
                                "prefix": "config__algorithm__validate=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "reference__fasta__base",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 4,
                                "prefix": "reference__fasta__base=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "reference__rtg",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 5,
                                "prefix": "reference__rtg=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__variantcaller",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 6,
                                "prefix": "config__algorithm__variantcaller=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__coverage_interval",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 7,
                                "prefix": "config__algorithm__coverage_interval=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "metadata__batch",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 8,
                                "prefix": "metadata__batch=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "reference__genome_context",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 9,
                                "prefix": "reference__genome_context=",
                                "separate": false
                            }, "items": {"items": "File", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__validate_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 10,
                                "prefix": "config__algorithm__validate_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "genome_build",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 11,
                                "prefix": "genome_build=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "metadata__phenotype",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 12,
                                "prefix": "metadata__phenotype=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__tools_off",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 13,
                                "prefix": "config__algorithm__tools_off=",
                                "separate": false
                            }, "items": {"items": "string", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "genome_resources__variation__dbsnp",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 14,
                                "prefix": "genome_resources__variation__dbsnp=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "genome_resources__variation__cosmic",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 15,
                                "prefix": "genome_resources__variation__cosmic=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "analysis",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 16,
                                "prefix": "analysis=",
                                "separate": false
                            }, "items": "string", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__tools_on",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 17,
                                "prefix": "config__algorithm__tools_on=",
                                "separate": false
                            }, "items": {"items": "null", "type": "array"}, "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__variant_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 18,
                                "prefix": "config__algorithm__variant_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "align_bam",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 19,
                                "prefix": "align_bam=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "regions__callable",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 20,
                                "prefix": "regions__callable=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "config__algorithm__callable_regions",
                        "type": {
                            "inputBinding": {
                                "itemSeparator": ";;",
                                "position": 21,
                                "prefix": "config__algorithm__callable_regions=",
                                "separate": false
                            }, "items": "File", "type": "array"
                        }
                    }, {
                        "id": "vrn_file",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 22,
                            "prefix": "vrn_file=",
                            "separate": false
                        },
                        "secondaryFiles": [".tbi"],
                        "type": "File"
                    }, {
                        "id": "validate__summary",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 23,
                            "prefix": "validate__summary=",
                            "separate": false
                        },
                        "type": ["File", "null"]
                    }, {
                        "id": "validate__tp",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 24,
                            "prefix": "validate__tp=",
                            "separate": false
                        },
                        "secondaryFiles": [".tbi"],
                        "type": ["File", "null"]
                    }, {
                        "id": "validate__fp",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 25,
                            "prefix": "validate__fp=",
                            "separate": false
                        },
                        "secondaryFiles": [".tbi"],
                        "type": ["File", "null"]
                    }, {
                        "id": "validate__fn",
                        "inputBinding": {
                            "itemSeparator": ";;",
                            "position": 26,
                            "prefix": "validate__fn=",
                            "separate": false
                        },
                        "secondaryFiles": [".tbi"],
                        "type": ["File", "null"]
                    }],
                    "outputs": [{
                        "id": "vc_rec",
                        "type": {
                            "fields": [{
                                "name": "description",
                                "type": {"items": "string", "type": "array"}
                            }, {
                                "name": "vrn_file",
                                "type": {"items": "File", "type": "array"}
                            }, {
                                "name": "config__algorithm__validate",
                                "type": {"items": "File", "type": "array"}
                            }, {
                                "name": "reference__fasta__base",
                                "type": {"items": "File", "type": "array"}
                            }, {
                                "name": "reference__rtg",
                                "type": {"items": "File", "type": "array"}
                            }, {
                                "name": "config__algorithm__variantcaller",
                                "type": {"items": "string", "type": "array"}
                            }, {
                                "name": "config__algorithm__coverage_interval",
                                "type": {"items": "string", "type": "array"}
                            }, {
                                "name": "metadata__batch",
                                "type": {"items": "string", "type": "array"}
                            }, {
                                "name": "reference__genome_context",
                                "type": {
                                    "items": {"items": "File", "type": "array"},
                                    "type": "array"
                                }
                            }, {
                                "name": "config__algorithm__validate_regions",
                                "type": {"items": "File", "type": "array"}
                            }, {
                                "name": "genome_build",
                                "type": {"items": "string", "type": "array"}
                            }, {
                                "name": "metadata__phenotype",
                                "type": {"items": "string", "type": "array"}
                            }, {
                                "name": "config__algorithm__tools_off",
                                "type": {
                                    "items": {"items": "string", "type": "array"},
                                    "type": "array"
                                }
                            }, {
                                "name": "genome_resources__variation__dbsnp",
                                "type": {"items": "File", "type": "array"}
                            }, {
                                "name": "genome_resources__variation__cosmic",
                                "type": {"items": "File", "type": "array"}
                            }, {
                                "name": "analysis",
                                "type": {"items": "string", "type": "array"}
                            }, {
                                "name": "config__algorithm__tools_on",
                                "type": {
                                    "items": {"items": "null", "type": "array"},
                                    "type": "array"
                                }
                            }, {
                                "name": "config__algorithm__variant_regions",
                                "type": {"items": "File", "type": "array"}
                            }, {
                                "name": "align_bam",
                                "type": {"items": "File", "type": "array"}
                            }, {
                                "name": "regions__callable",
                                "type": {"items": "File", "type": "array"}
                            }, {
                                "name": "config__algorithm__callable_regions",
                                "type": {"items": "File", "type": "array"}
                            }, {
                                "name": "validate__summary",
                                "type": {"items": ["File", "null"], "type": "array"}
                            }, {
                                "name": "validate__tp",
                                "type": {"items": ["File", "null"], "type": "array"}
                            }, {
                                "name": "validate__fp",
                                "type": {"items": ["File", "null"], "type": "array"}
                            }, {
                                "name": "validate__fn",
                                "type": {"items": ["File", "null"], "type": "array"}
                            }], "name": "vc_rec", "type": "record"
                        }
                    }]
                },
                "sbg:rdfId": "steps/vc_output_record.cwl",
                "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/vc_output_record.cwl"
            }]
        },
        "scatter": ["description", "config__algorithm__validate", "reference__fasta__base", "reference__rtg", "config__algorithm__variantcaller", "config__algorithm__coverage_interval", "metadata__batch", "reference__genome_context", "config__algorithm__validate_regions", "genome_build", "metadata__phenotype", "config__algorithm__tools_off", "genome_resources__variation__dbsnp", "genome_resources__variation__cosmic", "analysis", "config__algorithm__tools_on", "config__algorithm__variant_regions", "align_bam", "regions__callable", "config__algorithm__callable_regions"],
        "scatterMethod": "dotproduct",
        "sbg:rdfId": "wf-variantcall.cwl",
        "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/wf-variantcall.cwl"
    }, {
        "id": "summarize_grading_vc",
        "in": [{
            "id": "description",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['description']; }))"
        }, {
            "id": "vrn_file",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['vrn_file']; }))"
        }, {
            "id": "config__algorithm__validate",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['config__algorithm__validate']; }))"
        }, {
            "id": "reference__fasta__base",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['reference__fasta__base']; }))"
        }, {
            "id": "reference__rtg",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['reference__rtg']; }))"
        }, {
            "id": "config__algorithm__variantcaller",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['config__algorithm__variantcaller']; }))"
        }, {
            "id": "config__algorithm__coverage_interval",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['config__algorithm__coverage_interval']; }))"
        }, {
            "id": "metadata__batch",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['metadata__batch']; }))"
        }, {
            "id": "reference__genome_context",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['reference__genome_context']; }))"
        }, {
            "id": "config__algorithm__validate_regions",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['config__algorithm__validate_regions']; }))"
        }, {
            "id": "genome_build",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['genome_build']; }))"
        }, {
            "id": "metadata__phenotype",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['metadata__phenotype']; }))"
        }, {
            "id": "config__algorithm__tools_off",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['config__algorithm__tools_off']; }))"
        }, {
            "id": "genome_resources__variation__dbsnp",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['genome_resources__variation__dbsnp']; }))"
        }, {
            "id": "genome_resources__variation__cosmic",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['genome_resources__variation__cosmic']; }))"
        }, {
            "id": "analysis",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['analysis']; }))"
        }, {
            "id": "config__algorithm__tools_on",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['config__algorithm__tools_on']; }))"
        }, {
            "id": "config__algorithm__variant_regions",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['config__algorithm__variant_regions']; }))"
        }, {
            "id": "align_bam",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['align_bam']; }))"
        }, {
            "id": "regions__callable",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['regions__callable']; }))"
        }, {
            "id": "config__algorithm__callable_regions",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['config__algorithm__callable_regions']; }))"
        }, {
            "id": "validate__summary",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['validate__summary']; }))"
        }, {
            "id": "validate__tp",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['validate__tp']; }))"
        }, {
            "id": "validate__fp",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['validate__fp']; }))"
        }, {
            "id": "validate__fn",
            "source": "variantcall/vc_rec",
            "valueFrom": "$(self.map(function(x) { return x['validate__fn']; }))"
        }],
        "out": [{"id": "validate__grading_summary"}, {"id": "validate__grading_plots"}],
        "run": {
            "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
            "baseCommand": ["bcbio_nextgen.py", "runfn", "summarize_grading_vc", "cwl"],
            "class": "CommandLineTool",
            "cwlVersion": "v1.0",
            "hints": [{"class": "ResourceRequirement", "coresMin": 4, "ramMin": 4096}],
            "inputs": [{
                "default": "multi-combined",
                "id": "sentinel-parallel",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 0,
                    "prefix": "sentinel-parallel=",
                    "separate": false
                },
                "type": "string"
            }, {
                "default": "[\"validate__grading_summary\",\"validate__grading_plots\"]",
                "id": "sentinel-outputs",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 1,
                    "prefix": "sentinel-outputs=",
                    "separate": false
                },
                "type": "string"
            }, {
                "id": "description",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 2,
                        "prefix": "description=",
                        "separate": false
                    }, "items": {"items": "string", "type": "array"}, "type": "array"
                }
            }, {
                "id": "vrn_file",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 3,
                        "prefix": "vrn_file=",
                        "separate": false
                    }, "items": {"items": "File", "type": "array"}, "type": "array"
                }
            }, {
                "id": "config__algorithm__validate",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 4,
                        "prefix": "config__algorithm__validate=",
                        "separate": false
                    }, "items": {"items": "File", "type": "array"}, "type": "array"
                }
            }, {
                "id": "reference__fasta__base",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 5,
                        "prefix": "reference__fasta__base=",
                        "separate": false
                    }, "items": {"items": "File", "type": "array"}, "type": "array"
                }
            }, {
                "id": "reference__rtg",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 6,
                        "prefix": "reference__rtg=",
                        "separate": false
                    }, "items": {"items": "File", "type": "array"}, "type": "array"
                }
            }, {
                "id": "config__algorithm__variantcaller",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 7,
                        "prefix": "config__algorithm__variantcaller=",
                        "separate": false
                    }, "items": {"items": "string", "type": "array"}, "type": "array"
                }
            }, {
                "id": "config__algorithm__coverage_interval",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 8,
                        "prefix": "config__algorithm__coverage_interval=",
                        "separate": false
                    }, "items": {"items": "string", "type": "array"}, "type": "array"
                }
            }, {
                "id": "metadata__batch",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 9,
                        "prefix": "metadata__batch=",
                        "separate": false
                    }, "items": {"items": "string", "type": "array"}, "type": "array"
                }
            }, {
                "id": "reference__genome_context",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 10,
                        "prefix": "reference__genome_context=",
                        "separate": false
                    },
                    "items": {"items": {"items": "File", "type": "array"}, "type": "array"},
                    "type": "array"
                }
            }, {
                "id": "config__algorithm__validate_regions",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 11,
                        "prefix": "config__algorithm__validate_regions=",
                        "separate": false
                    }, "items": {"items": "File", "type": "array"}, "type": "array"
                }
            }, {
                "id": "genome_build",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 12,
                        "prefix": "genome_build=",
                        "separate": false
                    }, "items": {"items": "string", "type": "array"}, "type": "array"
                }
            }, {
                "id": "metadata__phenotype",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 13,
                        "prefix": "metadata__phenotype=",
                        "separate": false
                    }, "items": {"items": "string", "type": "array"}, "type": "array"
                }
            }, {
                "id": "config__algorithm__tools_off",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 14,
                        "prefix": "config__algorithm__tools_off=",
                        "separate": false
                    },
                    "items": {"items": {"items": "string", "type": "array"}, "type": "array"},
                    "type": "array"
                }
            }, {
                "id": "genome_resources__variation__dbsnp",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 15,
                        "prefix": "genome_resources__variation__dbsnp=",
                        "separate": false
                    }, "items": {"items": "File", "type": "array"}, "type": "array"
                }
            }, {
                "id": "genome_resources__variation__cosmic",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 16,
                        "prefix": "genome_resources__variation__cosmic=",
                        "separate": false
                    }, "items": {"items": "File", "type": "array"}, "type": "array"
                }
            }, {
                "id": "analysis",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 17,
                        "prefix": "analysis=",
                        "separate": false
                    }, "items": {"items": "string", "type": "array"}, "type": "array"
                }
            }, {
                "id": "config__algorithm__tools_on",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 18,
                        "prefix": "config__algorithm__tools_on=",
                        "separate": false
                    },
                    "items": {"items": {"items": "null", "type": "array"}, "type": "array"},
                    "type": "array"
                }
            }, {
                "id": "config__algorithm__variant_regions",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 19,
                        "prefix": "config__algorithm__variant_regions=",
                        "separate": false
                    }, "items": {"items": "File", "type": "array"}, "type": "array"
                }
            }, {
                "id": "align_bam",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 20,
                        "prefix": "align_bam=",
                        "separate": false
                    }, "items": {"items": "File", "type": "array"}, "type": "array"
                }
            }, {
                "id": "regions__callable",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 21,
                        "prefix": "regions__callable=",
                        "separate": false
                    }, "items": {"items": "File", "type": "array"}, "type": "array"
                }
            }, {
                "id": "config__algorithm__callable_regions",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 22,
                        "prefix": "config__algorithm__callable_regions=",
                        "separate": false
                    }, "items": {"items": "File", "type": "array"}, "type": "array"
                }
            }, {
                "id": "validate__summary",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 23,
                        "prefix": "validate__summary=",
                        "separate": false
                    }, "items": {"items": ["File", "null"], "type": "array"}, "type": "array"
                }
            }, {
                "id": "validate__tp",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 24,
                        "prefix": "validate__tp=",
                        "separate": false
                    }, "items": {"items": ["File", "null"], "type": "array"}, "type": "array"
                }
            }, {
                "id": "validate__fp",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 25,
                        "prefix": "validate__fp=",
                        "separate": false
                    }, "items": {"items": ["File", "null"], "type": "array"}, "type": "array"
                }
            }, {
                "id": "validate__fn",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 26,
                        "prefix": "validate__fn=",
                        "separate": false
                    }, "items": {"items": ["File", "null"], "type": "array"}, "type": "array"
                }
            }],
            "outputs": [{
                "id": "validate__grading_summary",
                "type": {"items": ["File", "null"], "type": "array"}
            }, {
                "id": "validate__grading_plots",
                "type": {"items": {"items": ["File", "null"], "type": "array"}, "type": "array"}
            }]
        },
        "sbg:rdfId": "steps/summarize_grading_vc.cwl",
        "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/summarize_grading_vc.cwl"
    }, {
        "id": "pipeline_summary",
        "in": [{"id": "align_bam", "source": "alignment/align_bam"}, {
            "id": "analysis",
            "source": "analysis"
        }, {
            "id": "reference__fasta__base",
            "source": "reference__fasta__base"
        }, {
            "id": "config__algorithm__qc",
            "source": "config__algorithm__qc"
        }, {
            "id": "config__algorithm__variant_regions",
            "source": "postprocess_alignment/config__algorithm__variant_regions"
        }, {"id": "description", "source": "description"}],
        "out": [{"id": "summary__qc__samtools"}, {"id": "summary__qc__fastqc"}, {"id": "coverage__all"}, {"id": "coverage__problems"}],
        "run": {
            "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
            "baseCommand": ["bcbio_nextgen.py", "runfn", "pipeline_summary", "cwl"],
            "class": "CommandLineTool",
            "cwlVersion": "v1.0",
            "hints": [{"class": "ResourceRequirement", "coresMin": 4, "ramMin": 4096}],
            "inputs": [{
                "default": "multi-parallel",
                "id": "sentinel-parallel",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 0,
                    "prefix": "sentinel-parallel=",
                    "separate": false
                },
                "type": "string"
            }, {
                "default": "[\"summary__qc__samtools\",\"summary__qc__fastqc\",\"coverage__all\",\"coverage__problems\"]",
                "id": "sentinel-outputs",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 1,
                    "prefix": "sentinel-outputs=",
                    "separate": false
                },
                "type": "string"
            }, {
                "id": "align_bam",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 2,
                    "prefix": "align_bam=",
                    "separate": false
                },
                "secondaryFiles": [".bai"],
                "type": "File"
            }, {
                "id": "analysis",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 3,
                    "prefix": "analysis=",
                    "separate": false
                },
                "type": "string"
            }, {
                "id": "reference__fasta__base",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 4,
                    "prefix": "reference__fasta__base=",
                    "separate": false
                },
                "type": "File"
            }, {
                "id": "config__algorithm__qc",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 5,
                    "prefix": "config__algorithm__qc=",
                    "separate": false
                },
                "type": {"items": "string", "type": "array"}
            }, {
                "id": "config__algorithm__variant_regions",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 6,
                    "prefix": "config__algorithm__variant_regions=",
                    "separate": false
                },
                "type": "File"
            }, {
                "id": "description",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 7,
                    "prefix": "description=",
                    "separate": false
                },
                "type": "string"
            }],
            "outputs": [{
                "id": "summary__qc__samtools",
                "type": "File"
            }, {"id": "summary__qc__fastqc", "type": "File"}, {
                "id": "coverage__all",
                "type": ["File", "null"]
            }, {"id": "coverage__problems", "type": ["File", "null"]}]
        },
        "scatter": ["align_bam", "analysis", "reference__fasta__base", "config__algorithm__qc", "config__algorithm__variant_regions", "description"],
        "scatterMethod": "dotproduct",
        "sbg:rdfId": "steps/pipeline_summary.cwl",
        "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/pipeline_summary.cwl"
    }, {
        "id": "multiqc_summary",
        "in": [{"id": "genome_build", "source": "genome_build"}, {
            "id": "summary__qc__samtools",
            "source": "pipeline_summary/summary__qc__samtools"
        }, {
            "id": "summary__qc__fastqc",
            "source": "pipeline_summary/summary__qc__fastqc"
        }, {
            "id": "reference__fasta__base",
            "source": "reference__fasta__base"
        }, {
            "id": "config__algorithm__coverage_interval",
            "source": "postprocess_alignment/config__algorithm__coverage_interval"
        }, {"id": "description", "source": "description"}],
        "out": [{"id": "summary__multiqc"}],
        "run": {
            "arguments": [{"position": 0, "valueFrom": "sentinel-runtime=$(runtime)"}],
            "baseCommand": ["bcbio_nextgen.py", "runfn", "multiqc_summary", "cwl"],
            "class": "CommandLineTool",
            "cwlVersion": "v1.0",
            "hints": [{"class": "ResourceRequirement", "coresMin": 4, "ramMin": 4096}],
            "inputs": [{
                "default": "multi-combined",
                "id": "sentinel-parallel",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 0,
                    "prefix": "sentinel-parallel=",
                    "separate": false
                },
                "type": "string"
            }, {
                "default": "[\"summary__multiqc\"]",
                "id": "sentinel-outputs",
                "inputBinding": {
                    "itemSeparator": ";;",
                    "position": 1,
                    "prefix": "sentinel-outputs=",
                    "separate": false
                },
                "type": "string"
            }, {
                "id": "genome_build",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 2,
                        "prefix": "genome_build=",
                        "separate": false
                    }, "items": "string", "type": "array"
                }
            }, {
                "id": "summary__qc__samtools",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 3,
                        "prefix": "summary__qc__samtools=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "summary__qc__fastqc",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 4,
                        "prefix": "summary__qc__fastqc=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "reference__fasta__base",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 5,
                        "prefix": "reference__fasta__base=",
                        "separate": false
                    }, "items": "File", "type": "array"
                }
            }, {
                "id": "config__algorithm__coverage_interval",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 6,
                        "prefix": "config__algorithm__coverage_interval=",
                        "separate": false
                    }, "items": "string", "type": "array"
                }
            }, {
                "id": "description",
                "type": {
                    "inputBinding": {
                        "itemSeparator": ";;",
                        "position": 7,
                        "prefix": "description=",
                        "separate": false
                    }, "items": "string", "type": "array"
                }
            }],
            "outputs": [{
                "id": "summary__multiqc",
                "type": {"items": ["File", "null"], "type": "array"}
            }]
        },
        "sbg:rdfId": "steps/multiqc_summary.cwl",
        "sbg:rdfSource": "https://raw.githubusercontent.com/bcbio/test_bcbio_cwl/master/run_info-cwl-workflow/steps/multiqc_summary.cwl"
    }]
};

const basicWF = {
    "class": "Workflow",
    "cwlVersion": "v1.0",
    "inputs": [
        {
            "id": "inp",
            "type": "File"
        },
        {
            "id": "ex",
            "type": "string"
        }
    ],
    "outputs": [
        {
            "id": "classout",
            "type": "File",
            "outputSource": "compile/classfile"
        }
    ],
    "steps": [
        {
            "run": {
                "cwlVersion": "v1.0",
                "class": "CommandLineTool",
                "baseCommand": [
                    "tar",
                    "xf"
                ],
                "inputs": [
                    {
                        "id": "tarfile",
                        "type": "File",
                        "inputBinding": {
                            "position": 1
                        }
                    },
                    {
                        "id": "extractfile",
                        "type": "string",
                        "inputBinding": {
                            "position": 2
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "example_out",
                        "type": "File",
                        "outputBinding": {
                            "glob": "$(inputs.extractfile)"
                        }
                    }
                ]
            },
            "id": "untar",
            "in": [
                {
                    "id": "tarfile",
                    "source": "inp"
                },
                {
                    "id": "extractfile",
                    "source": "ex"
                }
            ],
            "out": [
                {
                    "id": "example_out"
                }
            ]
        },
        {
            "run": {
                "cwlVersion": "v1.0",
                "class": "CommandLineTool",
                "label": "Example trivial wrapper for Java 7 compiler",
                "hints": [
                    {
                        "id": "DockerRequirement",
                        "dockerPull": "java:7-jdk"
                    }
                ],
                "baseCommand": "javac",
                "arguments": [
                    "-d",
                    "$(runtime.outdir)"
                ],
                "inputs": [
                    {
                        "id": "src",
                        "type": "File",
                        "inputBinding": {
                            "position": 1
                        }
                    },
                    {
                        "id": "record",
                        "type": {
                            "type": "record",
                            "fields": [
                                {
                                    "name": "field",
                                    "type": "string"
                                }
                            ]
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "classfile",
                        "type": "File",
                        "outputBinding": {
                            "glob": "*.class"
                        }
                    }
                ]
            },
            "id": "compile",
            "in": [
                {
                    "id": "src",
                    "source": "untar/example_out"
                }
            ],
            "out": [
                {
                    "id": "classfile"
                },
                {
                    "id": "some_file"
                }
            ]
        }
    ]
};

const gatk = {
    "class": "Workflow",
    "steps": [
        {
            "id": "#GATK_CombineVariants",
            "run": {
                "arguments": [
                    {
                        "prefix": "--out",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  var input_file = [].concat($job.inputs.variants)[0]\n  var meta = input_file.metadata\n  if(meta){\n  \tvar sample = meta.sample_id ? meta.sample_id : 'Unknown'\n  \tvar library = meta.library_id ? meta.library_id  : 'Unknown'\n  \tvar platform_unit = meta.platform_unit_id  ? meta.platform_unit_id : 'Unknown'\n    if(sample !== 'Unknown' || library !== 'Unknown' || platform_unit !== 'Unknown'){\n    \treturn ['Sample_' + sample, 'Library_' + library, 'Platform_Unit_' + platform_unit, 'combined', 'vcf'].join('.')\n  \t}\n  }\n  var variant_name = input_file.path.replace(/^.*[\\\\\\/]/, '').split('.')\n  var variant_namebase = variant_name.slice(0, -1).join('.')\n  return variant_namebase + '.combined.vcf'\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    }
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Broad Institute",
                "y": 435.23531175594775,
                "inputs": [
                    {
                        "sbg:category": "Input Files",
                        "description": "Input VCF file.",
                        "sbg:fileTypes": "VCF",
                        "required": true,
                        "label": "Variants",
                        "inputBinding": {
                            "prefix": "--variant",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#variants",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-V"
                    },
                    {
                        "sbg:toolDefaultValue": "SILENT",
                        "description": "How strict should we be with validation.",
                        "sbg:category": "GATK General",
                        "label": "Validation Strictness",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "name": "validation_strictness",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-S"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:category": "GATK General",
                        "label": "Use Original Qualities",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-OQ"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:category": "GATK General",
                        "label": "Use Legacy Downsampler",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-use_legacy_downsampler"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:category": "GATK General",
                        "label": "Unsafe",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "name": "unsafe",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-U"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:category": "GATK General",
                        "label": "Tag",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-tag"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, do not output the header containing the command line used.",
                        "sbg:category": "Combine Variants",
                        "label": "Suppress Command Line Header",
                        "inputBinding": {
                            "prefix": "--suppressCommandLineHeader",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#suppress_command_line_header",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-suppressCommandLineHeader"
                    },
                    {
                        "sbg:toolDefaultValue": "set",
                        "description": "Key used in the INFO key=value tag emitted describing which set the combined VCF record came from.",
                        "sbg:category": "Combine Variants",
                        "label": "Set Key",
                        "inputBinding": {
                            "prefix": "--setKey",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#set_key",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-setKey"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Remove Program Records",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-rpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Reference Genome in FASTA format.",
                        "sbg:fileTypes": "FASTA, FA",
                        "required": true,
                        "label": "Reference Genome",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-R"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:category": "GATK General",
                        "label": "Read Group Black List",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rgbl"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:category": "GATK General",
                        "label": "Read Filter",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "name": "read_filter",
                                    "type": "enum"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rf"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Print out interesting sites requiring complex compatibility merging.",
                        "sbg:category": "Combine Variants",
                        "label": "Print Complex Merges",
                        "inputBinding": {
                            "prefix": "--printComplexMerges",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#print_complex_merges",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-printComplexMerges"
                    },
                    {
                        "sbg:toolDefaultValue": "6",
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Preserve Qscores Less Than",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-preserveQ"
                    },
                    {
                        "sbg:toolDefaultValue": "STANDARD",
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:category": "GATK General",
                        "label": "Phone Home",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "name": "phone_home",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-et"
                    },
                    {
                        "sbg:toolDefaultValue": "STRICT",
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree Validation Type",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "name": "pedigree_validation_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-pedValidationType"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Pedigree string for samples.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree String",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-pedString"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:category": "GATK General",
                        "label": "Non Deterministic Random Seed",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-ndrs"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "description": "Combine variants and output site only if the variant is present in at least N input files.",
                        "sbg:category": "Combine Variants",
                        "label": "Minimum N",
                        "inputBinding": {
                            "prefix": "--minimumN",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#minimum_n",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-minN"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, then the output VCF will contain no INFO or genotype FORMAT fields.",
                        "sbg:category": "Combine Variants",
                        "label": "Minimal Vcf",
                        "inputBinding": {
                            "prefix": "--minimalVCF",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#minimal_vcf",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-minimalVCF"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, when VCF records overlap the info field is taken from the one with the max AC instead of only taking the fields which are identical across the overlapping records.",
                        "sbg:category": "Combine Variants",
                        "label": "Merge Info With Max Ac",
                        "inputBinding": {
                            "prefix": "--mergeInfoWithMaxAC",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#merge_info_with_max_ac",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-mergeInfoWithMaxAC"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "description": "Amount of RAM memory to be used per job.",
                        "sbg:category": "Execution",
                        "label": "Memory per job",
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "sbg:category": "Execution",
                        "label": "Memory overhead per job",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "MINUTES",
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime Units",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "name": "max_runtime_units",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-maxRuntimeUnits"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxRuntime"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Keep Program Records",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-kpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:fileTypes": "VCF, BED, TXT",
                        "required": false,
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-L"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:category": "GATK General",
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "--intervals"
                    },
                    {
                        "sbg:toolDefaultValue": "UNION",
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:category": "GATK General",
                        "label": "Interval Set Rule",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-isr"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:category": "GATK General",
                        "label": "Interval Padding",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-ip"
                    },
                    {
                        "sbg:toolDefaultValue": "ALL",
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:category": "GATK General",
                        "label": "Interval Merging",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-im"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Determines how we should merge genotype records for samples shared across the ROD files.",
                        "sbg:category": "Combine Variants",
                        "label": "Genotypemergeoption",
                        "inputBinding": {
                            "prefix": "--genotypemergeoption",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#genotypemergeoption",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNIQUIFY",
                                    "UNSORTED",
                                    "REQUIRE_UNIQUE"
                                ],
                                "name": "genotypemergeoption",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-genotypeMergeOptions"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "required": false,
                        "label": "Gatk key",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-K"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Fix Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-fixMisencodedQuals"
                    },
                    {
                        "sbg:toolDefaultValue": "KEEP_IF_ANY_UNFILTERED",
                        "description": "Determines how we should handle records seen at the same site in the VCF, but with different FILTER fields.",
                        "sbg:category": "Combine Variants",
                        "label": "Filteredrecordsmergetype",
                        "inputBinding": {
                            "prefix": "--filteredrecordsmergetype",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#filteredrecordsmergetype",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "KEEP_IF_ANY_UNFILTERED",
                                    "KEEP_IF_ALL_UNFILTERED",
                                    "KEEP_UNCONDITIONAL"
                                ],
                                "name": "filteredrecordsmergetype",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-filteredRecordsMergeType"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, then filtered VCFs are treated as uncalled, so that filtered set annotations don't appear in the combined VCF.",
                        "sbg:category": "Combine Variants",
                        "label": "Filtered Are Uncalled",
                        "inputBinding": {
                            "prefix": "--filteredAreUncalled",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#filtered_are_uncalled",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-filteredAreUncalled"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "required": false,
                        "label": "Exclude Intervals",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-XL"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Emit Original Quals",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-EOQ"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:category": "GATK General",
                        "label": "Downsampling Type",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "name": "downsampling_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-dt"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Fraction",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-dfrac"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Coverage",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-dcov"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:category": "GATK General",
                        "label": "Disable Randomization",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:category": "GATK General",
                        "label": "Disable Indel Quals",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-DIQ"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Default Base Qualities",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-DBQ"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "description": "Number of CPUs per job.",
                        "sbg:category": "Execution",
                        "label": "CPU per job",
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "40.0",
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Gap Open Penalty",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-baqGOP"
                    },
                    {
                        "sbg:toolDefaultValue": "OFF",
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Calculation Type",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "name": "baq",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-baq"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, assume input VCFs have identical sample sets and disjoint calls.",
                        "sbg:category": "Combine Variants",
                        "label": "Assume Identical Samples",
                        "inputBinding": {
                            "prefix": "--assumeIdenticalSamples",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#assume_identical_samples",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-assumeIdenticalSamples"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:category": "GATK General",
                        "label": "Allow Potentially Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores"
                    }
                ],
                "label": "GATK CombineVariants",
                "sbg:createdOn": 1450911447,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911447,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911448,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911449,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911450,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911451,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911452,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911453,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911455,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911456,
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1458841427,
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "bix-demo"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type CombineVariants --variant variant.vcf --out Sample_XY.Library_Unknown.Platform_Unit_Unknown.combined.vcf",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "47510cb2da55",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}",
                            "engine": "#cwl-js-engine"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "description": "File to which variants should be written.",
                        "sbg:fileTypes": "VCF",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "secondaryFiles": [
                                ".idx"
                            ],
                            "sbg:metadata": {},
                            "glob": "*.vcf"
                        },
                        "label": "Output Combined VCF",
                        "id": "#combined_vcf",
                        "type": [
                            "File"
                        ]
                    }
                ],
                "sbg:license": "MIT License",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-combinevariants/13",
                "temporaryFailCodes": [],
                "description": "Overview\n\nCombineVariants reads in variants records from separate ROD (Reference-Ordered Data) sources and combines them into a single VCF. Any (unique) name can be used to bind your ROD and any number of sources can be input. This tool aims to fulfill two main possible use cases, reflected by the two combination options (MERGE and UNION), for merging records at the variant level (the first 8 fields of the VCF) or at the genotype level (the rest).\n\nMERGE: combines multiple variant records present at the same site in the different input sources into a single variant record in the output. If sample names overlap, then they are \"uniquified\" by default, which means a suffix is appended to make them unique. Note that in version 3.3, the automatic uniquifying was disabled (unintentionally), and required setting `-genotypeMergeOptions UNIQUIFY` manually.\nUNION: assumes that each ROD source represents the same set of samples (although this is not enforced). It uses the priority list (if provided) to emit a single record instance at every position represented in the input RODs.\nCombineVariants will emit a record for every site that was present in any of your input VCF files, and will annotate (in the set attribute in the INFO field) whether the record had a PASS or FILTER status in each input ROD . In effect, CombineVariants always produces a union of the input VCFs. However, any part of the Venn of the merged VCFs can be extracted using JEXL expressions on the set attribute using SelectVariants. If you want to extract just the records in common between two VCFs, you would first run CombineVariants on the two files to generate a single VCF and then run SelectVariants to extract the common records with `-select 'set == \"Intersection\"'`, as worked out in the detailed example in the documentation guide.\n\nInput\nTwo or more variant sets to combine.\n\nOutput\nA combined VCF.\n\nUsage examples\n\nMerge two separate callsets\n java -jar GenomeAnalysisTK.jar \\\n   -T CombineVariants \\\n   -R reference.fasta \\\n   --variant input1.vcf \\\n   --variant input2.vcf \\\n   -o output.vcf \\\n   -genotypeMergeOptions UNIQUIFY\n \nGet the union of calls made on the same samples\n java -jar GenomeAnalysisTK.jar \\\n   -T CombineVariants \\\n   -R reference.fasta \\\n   --variant:foo input1.vcf \\\n   --variant:bar input2.vcf \\\n   -o output.vcf \\\n   -genotypeMergeOptions PRIORITIZE \\\n   -priority foo,bar\n \nCaveats\n\nThis tool is not intended to manipulate GVCFS! To combine GVCF files output by HaplotypeCaller, use CombineGVCFs.\nTo join intermediate VCFs produced by running jobs in parallel by interval (e.g. by chromosome), use CatVariants.\n\nAdditional notes\n\nUsing this tool's multi-threaded parallelism capability is particularly useful when converting from VCF to BCF2, which can be time-consuming. In this case each thread spends CPU time doing the conversion, and the GATK engine is smart enough to merge the partial BCF2 blocks together efficiently. However, since this merge runs in only one thread, you can quickly reach diminishing returns with the number of parallel threads. In our hands, `-nt 4` works well but `-nt 8` tends to be be too much.\nSince GATK 2.1, when merging multiple VCF records at a site, the combined VCF record has the QUAL of the first VCF record with a non-MISSING QUAL value. The previous behavior was to take the max QUAL, which could result in strange downstream confusion.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:modifiedOn": 1458841427,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "bix-demo",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantutils_CombineVariants.php"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/gatk-2-3-9-lite-combinevariants/13",
                "baseCommand": [
                    "java",
                    {
                        "class": "Expression",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "CombineVariants"
                ],
                "sbg:toolkit": "GATK",
                "stdin": "",
                "sbg:latestRevision": 9,
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:revision": 9,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "memory_overhead_per_job": 0,
                        "variants": [
                            {
                                "path": "variant.vcf",
                                "secondaryFiles": [],
                                "metadata": {
                                    "sample_id": "XY"
                                }
                            }
                        ]
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 2048
                    }
                },
                "x": 2171.078624463554,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "bix-demo"
                ]
            },
            "inputs": [
                {
                    "id": "#GATK_CombineVariants.variants",
                    "source": [
                        "#GATK_UnifiedGenotyper.raw_vcf"
                    ]
                },
                {
                    "id": "#GATK_CombineVariants.validation_strictness"
                },
                {
                    "id": "#GATK_CombineVariants.use_original_qualities"
                },
                {
                    "id": "#GATK_CombineVariants.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_CombineVariants.unsafe"
                },
                {
                    "id": "#GATK_CombineVariants.tag"
                },
                {
                    "id": "#GATK_CombineVariants.suppress_command_line_header"
                },
                {
                    "id": "#GATK_CombineVariants.set_key"
                },
                {
                    "id": "#GATK_CombineVariants.remove_program_records"
                },
                {
                    "id": "#GATK_CombineVariants.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_CombineVariants.read_group_black_list"
                },
                {
                    "id": "#GATK_CombineVariants.read_filter"
                },
                {
                    "id": "#GATK_CombineVariants.print_complex_merges"
                },
                {
                    "id": "#GATK_CombineVariants.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_CombineVariants.phone_home"
                },
                {
                    "id": "#GATK_CombineVariants.pedigree_validation_type"
                },
                {
                    "id": "#GATK_CombineVariants.pedigree_string"
                },
                {
                    "id": "#GATK_CombineVariants.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_CombineVariants.minimum_n"
                },
                {
                    "id": "#GATK_CombineVariants.minimal_vcf"
                },
                {
                    "id": "#GATK_CombineVariants.merge_info_with_max_ac"
                },
                {
                    "id": "#GATK_CombineVariants.memory_per_job"
                },
                {
                    "id": "#GATK_CombineVariants.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_CombineVariants.max_runtime_units"
                },
                {
                    "id": "#GATK_CombineVariants.max_runtime"
                },
                {
                    "id": "#GATK_CombineVariants.keep_program_records"
                },
                {
                    "id": "#GATK_CombineVariants.intervals_file"
                },
                {
                    "id": "#GATK_CombineVariants.intervals"
                },
                {
                    "id": "#GATK_CombineVariants.interval_set_rule"
                },
                {
                    "id": "#GATK_CombineVariants.interval_padding"
                },
                {
                    "id": "#GATK_CombineVariants.interval_merging"
                },
                {
                    "id": "#GATK_CombineVariants.genotypemergeoption"
                },
                {
                    "id": "#GATK_CombineVariants.gatk_key"
                },
                {
                    "id": "#GATK_CombineVariants.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_CombineVariants.filteredrecordsmergetype"
                },
                {
                    "id": "#GATK_CombineVariants.filtered_are_uncalled"
                },
                {
                    "id": "#GATK_CombineVariants.exclude_intervals"
                },
                {
                    "id": "#GATK_CombineVariants.emit_original_quals"
                },
                {
                    "id": "#GATK_CombineVariants.downsampling_type"
                },
                {
                    "id": "#GATK_CombineVariants.downsample_to_fraction"
                },
                {
                    "id": "#GATK_CombineVariants.downsample_to_coverage"
                },
                {
                    "id": "#GATK_CombineVariants.disable_radnomization"
                },
                {
                    "id": "#GATK_CombineVariants.disable_indel_quals"
                },
                {
                    "id": "#GATK_CombineVariants.default_base_qualities"
                },
                {
                    "id": "#GATK_CombineVariants.cpu_per_job"
                },
                {
                    "id": "#GATK_CombineVariants.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_CombineVariants.baq"
                },
                {
                    "id": "#GATK_CombineVariants.assume_identical_samples"
                },
                {
                    "id": "#GATK_CombineVariants.allow_potentailly_misencoded_quals"
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_CombineVariants.combined_vcf"
                }
            ],
            "sbg:x": 2171.078624463554,
            "sbg:y": 435.23531175594775
        },
        {
            "id": "#GATK_VariantRecalibrator",
            "run": {
                "arguments": [
                    {
                        "prefix": "--recal_file",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.recal')\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    },
                    {
                        "prefix": "--rscript_file",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.recal.R')\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    },
                    {
                        "prefix": "--tranches_file",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.tranches')\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    },
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  res = []\n  for(i=0; i<$job.inputs.resources_files.length; i++){\n   \tres.push($job.inputs.resources_files[i].metadata.resources, $job.inputs.resources_files[i].path);\n  }\n  return res.join(' ');\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true,
                        "position": 1
                    }
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Bread Institute",
                "y": -117.15687204030633,
                "inputs": [
                    {
                        "sbg:category": "Input Files",
                        "description": "The raw input variants to be recalibrated.",
                        "sbg:fileTypes": "VCF",
                        "required": true,
                        "label": "Variants",
                        "inputBinding": {
                            "prefix": "--input",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#variants",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-input"
                    },
                    {
                        "sbg:toolDefaultValue": "SILENT",
                        "description": "How strict should we be with validation.",
                        "sbg:category": "GATK General",
                        "label": "Validation Strictness",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "name": "validation_strictness",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-S"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:category": "GATK General",
                        "label": "Use Original Qualities",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-OQ"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:category": "GATK General",
                        "label": "Use Legacy Downsampler",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-use_legacy_downsampler"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "The names of the annotations which should used for calculations (from input VCF INFO fields).",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Use Annotation",
                        "inputBinding": {
                            "prefix": "--use_annotation",
                            "itemSeparator": null,
                            "separate": true,
                            "valueFrom": {
                                "class": "Expression",
                                "script": "{\n  if ($job.inputs.use_annotation.length == 0){\n  \treturn ['QD', 'MQRankSum', 'FS', 'DP', 'ReadPosRankSum', 'HaplotypeScore']\n  }\n  else\n    return $job.inputs.use_annotation\n\n\n}",
                                "engine": "#cwl-js-engine"
                            },
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_annotation",
                        "type": [
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-an"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:category": "GATK General",
                        "label": "Unsafe",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "name": "unsafe",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-U"
                    },
                    {
                        "sbg:toolDefaultValue": "99.0",
                        "description": "The truth sensitivity level at which to start filtering, used here to indicate filtered variants in the model reporting plots.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Ts Filter Level",
                        "inputBinding": {
                            "prefix": "--ts_filter_level",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#ts_filter_level",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-ts_filter_level"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Trust that all the input training sets' unfiltered records contain only polymorphic sites to drastically speed up the computation.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Trust All Polymorphic",
                        "inputBinding": {
                            "prefix": "--trustAllPolymorphic",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#trust_all_polymorphic",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-allPoly"
                    },
                    {
                        "sbg:toolDefaultValue": "8",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:category": "Execution",
                        "label": "Threads per job",
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "2.15",
                        "description": "The expected novel Ti/Tv ratio to use when calculating FDR tranches and for display on the optimization curve output figures. (approx 2.15 for whole genome experiments). ONLY USED FOR PLOTTING PURPOSES!.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Target Titv",
                        "inputBinding": {
                            "prefix": "--target_titv",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#target_titv",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-titv"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:category": "GATK General",
                        "label": "Tag",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-tag"
                    },
                    {
                        "sbg:toolDefaultValue": "[100.0, 99.9, 99.0, 90.0]",
                        "description": "The levels of novel false discovery rate (FDR, implied by ti/tv) at which to slice the data. (in percent, that is 1.0 for 1 percent).",
                        "sbg:category": "Variant Recalibrator",
                        "label": "T Stranche",
                        "inputBinding": {
                            "prefix": "--TStranche",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#t_stranche",
                        "type": [
                            "null",
                            {
                                "items": "float",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-tranche"
                    },
                    {
                        "sbg:toolDefaultValue": "14.0",
                        "description": "If a variant has annotations more than -std standard deviations away from mean then don't use it for building the Gaussian mixture model.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Std Threshold",
                        "inputBinding": {
                            "prefix": "--stdThreshold",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#std_threshold",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-std"
                    },
                    {
                        "sbg:toolDefaultValue": "1.0",
                        "description": "The shrinkage parameter in the variational Bayes algorithm.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Shrinkage",
                        "inputBinding": {
                            "prefix": "--shrinkage",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#shrinkage",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-shrinkage"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Resources.",
                        "sbg:fileTypes": "VCF",
                        "required": true,
                        "label": "Resources",
                        "id": "#resources_files",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Remove Program Records",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-rpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Reference Genome in FASTA format.",
                        "sbg:fileTypes": "FASTA, FA",
                        "required": true,
                        "label": "Reference Genome",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-R"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:category": "GATK General",
                        "label": "Read Group Black List",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rgbl"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:category": "GATK General",
                        "label": "Read Filter",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "name": "read_filter",
                                    "type": "enum"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rf"
                    },
                    {
                        "sbg:toolDefaultValue": "80.0",
                        "description": "If a known variant has raw QUAL value less than -qual then don't use it for building the Gaussian mixture model.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Qual Threshold",
                        "inputBinding": {
                            "prefix": "--qualThreshold",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#qual_threshold",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-qual"
                    },
                    {
                        "sbg:toolDefaultValue": "20.0",
                        "description": "The number of prior counts to use in the variational Bayes algorithm.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Prior Counts",
                        "inputBinding": {
                            "prefix": "--priorCounts",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#prior_counts",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-priorCounts"
                    },
                    {
                        "sbg:toolDefaultValue": "6",
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Preserve Qscores Less Than",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-preserveQ"
                    },
                    {
                        "sbg:toolDefaultValue": "STANDARD",
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:category": "GATK General",
                        "label": "Phone Home",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "name": "phone_home",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-et"
                    },
                    {
                        "sbg:toolDefaultValue": "0.03",
                        "description": "What percentage of the worst scoring variants to use when building the Gaussian mixture model of bad variants. 0.07 means bottom 7 percent.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Percent Bad Variants",
                        "inputBinding": {
                            "prefix": "--percentBadVariants",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#percent_bad_variants",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-percentBad"
                    },
                    {
                        "sbg:toolDefaultValue": "STRICT",
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree Validation Type",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "name": "pedigree_validation_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-pedValidationType"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Pedigree string for samples.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree String",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-pedString"
                    },
                    {
                        "sbg:toolDefaultValue": "30",
                        "description": "The number of k-means iterations to perform in order to initialize the means of the Gaussians in the Gaussian mixture model.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Num K Means",
                        "inputBinding": {
                            "prefix": "--numKMeans",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#num_k_means",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-nKM"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:category": "GATK General",
                        "label": "Non Deterministic Random Seed",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-ndrs"
                    },
                    {
                        "sbg:toolDefaultValue": "SNP",
                        "description": "Recalibration mode to employ: 1.) SNP for recalibrating only snps (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both snps and indels simultaneously.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Mode",
                        "inputBinding": {
                            "prefix": "--mode",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#mode",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "BOTH"
                                ],
                                "name": "mode",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-mode"
                    },
                    {
                        "sbg:toolDefaultValue": "2500",
                        "description": "The minimum amount of worst scoring variants to use when building the Gaussian mixture model of bad variants. Will override -percentBad argument if necessary.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Min Num Bad Variants",
                        "inputBinding": {
                            "prefix": "--minNumBadVariants",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#min_num_bad_variants",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-minNumBad"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "description": "Amount of RAM memory to be used per job.",
                        "sbg:category": "Execution",
                        "label": "Memory per job",
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "sbg:category": "Execution",
                        "label": "Memory overhead per job",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "MINUTES",
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime Units",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "name": "max_runtime_units",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-maxRuntimeUnits"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxRuntime"
                    },
                    {
                        "sbg:toolDefaultValue": "100",
                        "description": "The maximum number of VBEM iterations to be performed in variational Bayes algorithm. Procedure will normally end when convergence is detected.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Max Iterations",
                        "inputBinding": {
                            "prefix": "--maxIterations",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_iterations",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-mI"
                    },
                    {
                        "sbg:toolDefaultValue": "10",
                        "description": "The maximum number of Gaussians to try during variational Bayes algorithm.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Max Gaussians",
                        "inputBinding": {
                            "prefix": "--maxGaussians",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_gaussians",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-mG"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Keep Program Records",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-kpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-L"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:category": "GATK General",
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "--intervals"
                    },
                    {
                        "sbg:toolDefaultValue": "UNION",
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:category": "GATK General",
                        "label": "Interval Set Rule",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-isr"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:category": "GATK General",
                        "label": "Interval Padding",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-ip"
                    },
                    {
                        "sbg:toolDefaultValue": "ALL",
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:category": "GATK General",
                        "label": "Interval Merging",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-im"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "If specified the variant recalibrator will use variants even if the specified filter name is marked in the input VCF file.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Ignore Filter",
                        "inputBinding": {
                            "prefix": "--ignore_filter",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#ignore_filter",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-ignoreFilter"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "required": false,
                        "label": "Gatk key",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-K"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Fix Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-fixMisencodedQuals"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Exclude Intervals",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-XL"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Emit Original Quals",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-EOQ"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:category": "GATK General",
                        "label": "Downsampling Type",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "name": "downsampling_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-dt"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Fraction",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-dfrac"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Coverage",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-dcov"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:category": "GATK General",
                        "label": "Disable Randomization",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:category": "GATK General",
                        "label": "Disable Indel Quals",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-DIQ"
                    },
                    {
                        "sbg:toolDefaultValue": "0.001",
                        "description": "The dirichlet parameter in the variational Bayes algorithm.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Dirichlet",
                        "inputBinding": {
                            "prefix": "--dirichlet",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#dirichlet",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-dirichlet"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Default Base Qualities",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-DBQ"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "description": "Number of CPUs per job.",
                        "sbg:category": "Execution",
                        "label": "CPU per job",
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "40.0",
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Gap Open Penalty",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-baqGOP"
                    },
                    {
                        "sbg:toolDefaultValue": "OFF",
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Calculation Type",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "name": "baq",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-baq"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:category": "GATK General",
                        "label": "Allow Potentially Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores"
                    }
                ],
                "label": "SNP GATK VariantRecalibrator",
                "sbg:createdOn": 1450911440,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911440,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911441,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911442,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911443,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911444,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911446,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bix-demo"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type VariantRecalibrator -nt 8 --reference_sequence /folder/reference.fasta --input /f/some.vcf --input /f/some_other.vcf --use_annotation QD,MQRankSum,FS,DP,ReadPosRankSum,HaplotypeScore --recal_file some.recal --rscript_file some.recal.R --tranches_file some.tranches  -resource:dbsnp,known=false,training=true,truth=false,prior=10.2 /dbsnp.vcf -resource:omni,known=false,training=true,truth=false,prior=10.2 /known.vcf",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "47510cb2da55",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job;\n  }\n  else{\n  \treturn 1;\n  }\n}",
                            "engine": "#cwl-js-engine"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "description": "PDF file containing tranches plot generated by VariantRecalibrator.",
                        "sbg:fileTypes": "PDF",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "sbg:metadata": {},
                            "glob": "*.tranches.pdf"
                        },
                        "label": "Tranches Plot",
                        "id": "#tranches_plot",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "description": "The output tranches file used by ApplyRecalibration.",
                        "sbg:fileTypes": "TRANCHES",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "sbg:metadata": {},
                            "glob": "*.tranches"
                        },
                        "label": "Tranches File",
                        "id": "#tranches_file",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "description": "The output rscript file generated by the VQSR to aid in visualization of the input data and learned model.",
                        "sbg:fileTypes": "R",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "sbg:metadata": {},
                            "glob": "*.recal.R"
                        },
                        "label": "Rscript File",
                        "id": "#rscript_file",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "description": "The output recal file used by ApplyRecalibration.",
                        "sbg:fileTypes": "RECAL",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "secondaryFiles": [
                                ""
                            ],
                            "sbg:metadata": {},
                            "glob": "*.recal"
                        },
                        "label": "Recal File",
                        "id": "#recal_file",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "description": "PDF file containing plots generated by VariantRecalibrator.",
                        "sbg:fileTypes": "PDF",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "sbg:metadata": {},
                            "glob": "*.recal.R.pdf"
                        },
                        "label": "R Plots",
                        "id": "#R_plots",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "MIT License",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-variantrecalibrator/6",
                "temporaryFailCodes": [],
                "description": "Overview\n\nThis tool performs the first pass in a two-stage process called VQSR; the second pass is performed by the ApplyRecalibration tool. In brief, the first pass consists of creating a Gaussian mixture model by looking at the distribution of annotation values over a high quality subset of the input call set, and then scoring all input variants according to the model. The second pass consists of filtering variants based on score cutoffs identified in the first pass.\n\nThe purpose of the variant recalibrator is to assign a well-calibrated probability to each variant call in a call set. You can then create highly accurate call sets by filtering based on this single estimate for the accuracy of each call. The approach taken by variant quality score recalibration is to develop a continuous, covarying estimate of the relationship between SNP call annotations (such as QD, MQ, and ReadPosRankSum, for example) and the probability that a SNP is a true genetic variant versus a sequencing or data processing artifact. This model is determined adaptively based on \"true sites\" provided as input, typically HapMap 3 sites and those sites found to be polymorphic on the Omni 2.5M SNP chip array (in humans). This adaptive error model can then be applied to both known and novel variation discovered in the call set of interest to evaluate the probability that each call is real. The score that gets added to the INFO field of each variant is called the VQSLOD. It is the log odds of being a true variant versus being false under the trained Gaussian mixture model.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools and how to use them for best results on your own data.\n\nInputs\nThe input raw variants to be recalibrated.\nKnown, truth, and training sets to be used by the algorithm. See the method documentation for more details.\n\nOutputs\nA recalibration table file that will be used by the ApplyRecalibration tool.\nA tranches file which shows various metrics of the recalibration callset for slices of the data.\n\nUsage example\n\nRecalibrating SNPs in exome data\n java -Xmx4g -jar GenomeAnalysisTK.jar \\\n   -T VariantRecalibrator \\\n   -R reference.fasta \\\n   -input raw_variants.vcf \\\n   -resource:hapmap,known=false,training=true,truth=true,prior=15.0 hapmap_3.3.b37.sites.vcf \\\n   -resource:omni,known=false,training=true,truth=false,prior=12.0 1000G_omni2.5.b37.sites.vcf \\\n   -resource:1000G,known=false,training=true,truth=false,prior=10.0 1000G_phase1.snps.high_confidence.vcf\n   -resource:dbsnp,known=true,training=false,truth=false,prior=6.0 dbsnp_135.b37.vcf \\\n   -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an InbreedingCoeff \\\n   -mode SNP \\\n   -recalFile output.recal \\\n   -tranchesFile output.tranches \\\n   -rscriptFile output.plots.R\n \nCaveats\n\nThe values used in the example above are only meant to show how the command lines are composed. They are not meant to be taken as specific recommendations of values to use in your own work, and they may be different from the values cited elsewhere in our documentation. For the latest and greatest recommendations on how to set parameter values for you own analyses, please read the Best Practices section of the documentation, especially the FAQ document on VQSR parameters.\nWhole genomes and exomes take slightly different parameters, so make sure you adapt your commands accordingly! See the documents linked above for details.\nIf you work with small datasets (e.g. targeted capture experiments or small number of exomes), you will run into problems. Read the docs linked above for advice on how to deal with those issues.\nIn order to create the model reporting plots Rscript needs to be in your environment PATH (this is the scripting version of R, not the interactive version). See http://www.r-project.org for more info on how to download and install R.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:modifiedOn": 1450911446,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "bix-demo",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantrecalibration_VariantRecalibrator.php"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/gatk-2-3-9-lite-variantrecalibrator/6",
                "baseCommand": [
                    "java",
                    {
                        "class": "Expression",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M');\n  }\n  else{\n  \treturn '-Xmx2048M';\n  }\n}",
                        "engine": "#cwl-js-engine"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "VariantRecalibrator",
                    {
                        "class": "Expression",
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(8)\n  }\n}",
                        "engine": "#cwl-js-engine"
                    }
                ],
                "sbg:toolkit": "GATK",
                "stdin": "",
                "sbg:latestRevision": 5,
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:revision": 5,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "resources_files": [
                            {
                                "path": "/dbsnp.vcf",
                                "secondaryFiles": [],
                                "metadata": {
                                    "some": "value",
                                    "resources": "-resource:dbsnp,known=false,training=true,truth=false,prior=10.2"
                                }
                            },
                            {
                                "path": "/known.vcf",
                                "secondaryFiles": [],
                                "metadata": {
                                    "resources": "-resource:omni,known=false,training=true,truth=false,prior=10.2"
                                }
                            }
                        ],
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "memory_overhead_per_job": 0,
                        "use_annotation": [],
                        "variants": [
                            {
                                "path": "/f/some.vcf"
                            },
                            {
                                "path": "/f/some_other.vcf"
                            }
                        ]
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 2048
                    }
                },
                "x": 2796.76532909997,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "bix-demo"
                ]
            },
            "inputs": [
                {
                    "id": "#GATK_VariantRecalibrator.variants",
                    "source": [
                        "#GATK_CombineVariants.combined_vcf"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator.validation_strictness"
                },
                {
                    "id": "#GATK_VariantRecalibrator.use_original_qualities"
                },
                {
                    "id": "#GATK_VariantRecalibrator.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_VariantRecalibrator.use_annotation",
                    "default": [
                        "QD",
                        "MQRankSum",
                        "FS",
                        "DP",
                        "ReadPosRankSum",
                        "HaplotypeScore"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator.unsafe"
                },
                {
                    "id": "#GATK_VariantRecalibrator.ts_filter_level"
                },
                {
                    "id": "#GATK_VariantRecalibrator.trust_all_polymorphic"
                },
                {
                    "id": "#GATK_VariantRecalibrator.threads_per_job",
                    "default": 16
                },
                {
                    "id": "#GATK_VariantRecalibrator.target_titv"
                },
                {
                    "id": "#GATK_VariantRecalibrator.tag"
                },
                {
                    "id": "#GATK_VariantRecalibrator.t_stranche"
                },
                {
                    "id": "#GATK_VariantRecalibrator.std_threshold"
                },
                {
                    "id": "#GATK_VariantRecalibrator.shrinkage"
                },
                {
                    "id": "#GATK_VariantRecalibrator.resources_files",
                    "source": [
                        "#SBG_Prepare_VQSR_1000G.output_vcf",
                        "#SBG_Prepare_VQSR_dbSNP.output_vcf",
                        "#SBG_Prepare_VQSR_HapMap.output_vcf",
                        "#SBG_Prepare_VQSR_Omni.output_vcf"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator.remove_program_records"
                },
                {
                    "id": "#GATK_VariantRecalibrator.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator.read_group_black_list"
                },
                {
                    "id": "#GATK_VariantRecalibrator.read_filter"
                },
                {
                    "id": "#GATK_VariantRecalibrator.qual_threshold"
                },
                {
                    "id": "#GATK_VariantRecalibrator.prior_counts"
                },
                {
                    "id": "#GATK_VariantRecalibrator.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_VariantRecalibrator.phone_home"
                },
                {
                    "id": "#GATK_VariantRecalibrator.percent_bad_variants"
                },
                {
                    "id": "#GATK_VariantRecalibrator.pedigree_validation_type"
                },
                {
                    "id": "#GATK_VariantRecalibrator.pedigree_string"
                },
                {
                    "id": "#GATK_VariantRecalibrator.num_k_means"
                },
                {
                    "id": "#GATK_VariantRecalibrator.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_VariantRecalibrator.mode",
                    "default": "SNP"
                },
                {
                    "id": "#GATK_VariantRecalibrator.min_num_bad_variants"
                },
                {
                    "id": "#GATK_VariantRecalibrator.memory_per_job",
                    "default": 20000
                },
                {
                    "id": "#GATK_VariantRecalibrator.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_VariantRecalibrator.max_runtime_units"
                },
                {
                    "id": "#GATK_VariantRecalibrator.max_runtime"
                },
                {
                    "id": "#GATK_VariantRecalibrator.max_iterations"
                },
                {
                    "id": "#GATK_VariantRecalibrator.max_gaussians"
                },
                {
                    "id": "#GATK_VariantRecalibrator.keep_program_records"
                },
                {
                    "id": "#GATK_VariantRecalibrator.intervals_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator.intervals"
                },
                {
                    "id": "#GATK_VariantRecalibrator.interval_set_rule"
                },
                {
                    "id": "#GATK_VariantRecalibrator.interval_padding"
                },
                {
                    "id": "#GATK_VariantRecalibrator.interval_merging"
                },
                {
                    "id": "#GATK_VariantRecalibrator.ignore_filter"
                },
                {
                    "id": "#GATK_VariantRecalibrator.gatk_key"
                },
                {
                    "id": "#GATK_VariantRecalibrator.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_VariantRecalibrator.exclude_intervals"
                },
                {
                    "id": "#GATK_VariantRecalibrator.emit_original_quals"
                },
                {
                    "id": "#GATK_VariantRecalibrator.downsampling_type"
                },
                {
                    "id": "#GATK_VariantRecalibrator.downsample_to_fraction"
                },
                {
                    "id": "#GATK_VariantRecalibrator.downsample_to_coverage"
                },
                {
                    "id": "#GATK_VariantRecalibrator.disable_radnomization"
                },
                {
                    "id": "#GATK_VariantRecalibrator.disable_indel_quals"
                },
                {
                    "id": "#GATK_VariantRecalibrator.dirichlet"
                },
                {
                    "id": "#GATK_VariantRecalibrator.default_base_qualities"
                },
                {
                    "id": "#GATK_VariantRecalibrator.cpu_per_job",
                    "default": 16
                },
                {
                    "id": "#GATK_VariantRecalibrator.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_VariantRecalibrator.baq"
                },
                {
                    "id": "#GATK_VariantRecalibrator.allow_potentailly_misencoded_quals"
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_VariantRecalibrator.tranches_plot"
                },
                {
                    "id": "#GATK_VariantRecalibrator.tranches_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator.rscript_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator.recal_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator.R_plots"
                }
            ],
            "sbg:x": 2796.76532909997,
            "sbg:y": -117.15687204030633
        },
        {
            "id": "#GATK_VariantRecalibrator_1",
            "run": {
                "arguments": [
                    {
                        "prefix": "--recal_file",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.recal')\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    },
                    {
                        "prefix": "--rscript_file",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.recal.R')\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    },
                    {
                        "prefix": "--tranches_file",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.tranches')\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    },
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  res = []\n  for(i=0; i<$job.inputs.resources_files.length; i++){\n   \tres.push($job.inputs.resources_files[i].metadata.resources, $job.inputs.resources_files[i].path);\n  }\n  return res.join(' ');\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true,
                        "position": 1
                    }
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Bread Institute",
                "y": 135.19613669433062,
                "inputs": [
                    {
                        "sbg:category": "Input Files",
                        "description": "The raw input variants to be recalibrated.",
                        "sbg:fileTypes": "VCF",
                        "required": true,
                        "label": "Variants",
                        "inputBinding": {
                            "prefix": "--input",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#variants",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-input"
                    },
                    {
                        "sbg:toolDefaultValue": "SILENT",
                        "description": "How strict should we be with validation.",
                        "sbg:category": "GATK General",
                        "label": "Validation Strictness",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "name": "validation_strictness",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-S"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:category": "GATK General",
                        "label": "Use Original Qualities",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-OQ"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:category": "GATK General",
                        "label": "Use Legacy Downsampler",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-use_legacy_downsampler"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "The names of the annotations which should used for calculations (from input VCF INFO fields).",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Use Annotation",
                        "inputBinding": {
                            "prefix": "--use_annotation",
                            "itemSeparator": null,
                            "separate": true,
                            "valueFrom": {
                                "class": "Expression",
                                "script": "{\n  if ($job.inputs.use_annotation.length == 0){\n  \treturn ['QD', 'MQRankSum', 'FS', 'DP', 'ReadPosRankSum', 'HaplotypeScore']\n  }\n  else\n    return $job.inputs.use_annotation\n\n\n}",
                                "engine": "#cwl-js-engine"
                            },
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_annotation",
                        "type": [
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-an"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:category": "GATK General",
                        "label": "Unsafe",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "name": "unsafe",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-U"
                    },
                    {
                        "sbg:toolDefaultValue": "99.0",
                        "description": "The truth sensitivity level at which to start filtering, used here to indicate filtered variants in the model reporting plots.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Ts Filter Level",
                        "inputBinding": {
                            "prefix": "--ts_filter_level",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#ts_filter_level",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-ts_filter_level"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Trust that all the input training sets' unfiltered records contain only polymorphic sites to drastically speed up the computation.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Trust All Polymorphic",
                        "inputBinding": {
                            "prefix": "--trustAllPolymorphic",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#trust_all_polymorphic",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-allPoly"
                    },
                    {
                        "sbg:toolDefaultValue": "8",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:category": "Execution",
                        "label": "Threads per job",
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "2.15",
                        "description": "The expected novel Ti/Tv ratio to use when calculating FDR tranches and for display on the optimization curve output figures. (approx 2.15 for whole genome experiments). ONLY USED FOR PLOTTING PURPOSES!.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Target Titv",
                        "inputBinding": {
                            "prefix": "--target_titv",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#target_titv",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-titv"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:category": "GATK General",
                        "label": "Tag",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-tag"
                    },
                    {
                        "sbg:toolDefaultValue": "[100.0, 99.9, 99.0, 90.0]",
                        "description": "The levels of novel false discovery rate (FDR, implied by ti/tv) at which to slice the data. (in percent, that is 1.0 for 1 percent).",
                        "sbg:category": "Variant Recalibrator",
                        "label": "T Stranche",
                        "inputBinding": {
                            "prefix": "--TStranche",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#t_stranche",
                        "type": [
                            "null",
                            {
                                "items": "float",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-tranche"
                    },
                    {
                        "sbg:toolDefaultValue": "14.0",
                        "description": "If a variant has annotations more than -std standard deviations away from mean then don't use it for building the Gaussian mixture model.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Std Threshold",
                        "inputBinding": {
                            "prefix": "--stdThreshold",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#std_threshold",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-std"
                    },
                    {
                        "sbg:toolDefaultValue": "1.0",
                        "description": "The shrinkage parameter in the variational Bayes algorithm.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Shrinkage",
                        "inputBinding": {
                            "prefix": "--shrinkage",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#shrinkage",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-shrinkage"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Resources.",
                        "sbg:fileTypes": "VCF",
                        "required": true,
                        "label": "Resources",
                        "id": "#resources_files",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Remove Program Records",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-rpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Reference Genome in FASTA format.",
                        "sbg:fileTypes": "FASTA, FA",
                        "required": true,
                        "label": "Reference Genome",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-R"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:category": "GATK General",
                        "label": "Read Group Black List",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rgbl"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:category": "GATK General",
                        "label": "Read Filter",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "name": "read_filter",
                                    "type": "enum"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rf"
                    },
                    {
                        "sbg:toolDefaultValue": "80.0",
                        "description": "If a known variant has raw QUAL value less than -qual then don't use it for building the Gaussian mixture model.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Qual Threshold",
                        "inputBinding": {
                            "prefix": "--qualThreshold",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#qual_threshold",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-qual"
                    },
                    {
                        "sbg:toolDefaultValue": "20.0",
                        "description": "The number of prior counts to use in the variational Bayes algorithm.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Prior Counts",
                        "inputBinding": {
                            "prefix": "--priorCounts",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#prior_counts",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-priorCounts"
                    },
                    {
                        "sbg:toolDefaultValue": "6",
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Preserve Qscores Less Than",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-preserveQ"
                    },
                    {
                        "sbg:toolDefaultValue": "STANDARD",
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:category": "GATK General",
                        "label": "Phone Home",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "name": "phone_home",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-et"
                    },
                    {
                        "sbg:toolDefaultValue": "0.03",
                        "description": "What percentage of the worst scoring variants to use when building the Gaussian mixture model of bad variants. 0.07 means bottom 7 percent.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Percent Bad Variants",
                        "inputBinding": {
                            "prefix": "--percentBadVariants",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#percent_bad_variants",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-percentBad"
                    },
                    {
                        "sbg:toolDefaultValue": "STRICT",
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree Validation Type",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "name": "pedigree_validation_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-pedValidationType"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Pedigree string for samples.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree String",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-pedString"
                    },
                    {
                        "sbg:toolDefaultValue": "30",
                        "description": "The number of k-means iterations to perform in order to initialize the means of the Gaussians in the Gaussian mixture model.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Num K Means",
                        "inputBinding": {
                            "prefix": "--numKMeans",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#num_k_means",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-nKM"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:category": "GATK General",
                        "label": "Non Deterministic Random Seed",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-ndrs"
                    },
                    {
                        "sbg:toolDefaultValue": "SNP",
                        "description": "Recalibration mode to employ: 1.) SNP for recalibrating only snps (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both snps and indels simultaneously.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Mode",
                        "inputBinding": {
                            "prefix": "--mode",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#mode",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "BOTH"
                                ],
                                "name": "mode",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-mode"
                    },
                    {
                        "sbg:toolDefaultValue": "2500",
                        "description": "The minimum amount of worst scoring variants to use when building the Gaussian mixture model of bad variants. Will override -percentBad argument if necessary.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Min Num Bad Variants",
                        "inputBinding": {
                            "prefix": "--minNumBadVariants",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#min_num_bad_variants",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-minNumBad"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "description": "Amount of RAM memory to be used per job.",
                        "sbg:category": "Execution",
                        "label": "Memory per job",
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "sbg:category": "Execution",
                        "label": "Memory overhead per job",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "MINUTES",
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime Units",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "name": "max_runtime_units",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-maxRuntimeUnits"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxRuntime"
                    },
                    {
                        "sbg:toolDefaultValue": "100",
                        "description": "The maximum number of VBEM iterations to be performed in variational Bayes algorithm. Procedure will normally end when convergence is detected.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Max Iterations",
                        "inputBinding": {
                            "prefix": "--maxIterations",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_iterations",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-mI"
                    },
                    {
                        "sbg:toolDefaultValue": "10",
                        "description": "The maximum number of Gaussians to try during variational Bayes algorithm.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Max Gaussians",
                        "inputBinding": {
                            "prefix": "--maxGaussians",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_gaussians",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-mG"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Keep Program Records",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-kpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-L"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:category": "GATK General",
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "--intervals"
                    },
                    {
                        "sbg:toolDefaultValue": "UNION",
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:category": "GATK General",
                        "label": "Interval Set Rule",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-isr"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:category": "GATK General",
                        "label": "Interval Padding",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-ip"
                    },
                    {
                        "sbg:toolDefaultValue": "ALL",
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:category": "GATK General",
                        "label": "Interval Merging",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-im"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "If specified the variant recalibrator will use variants even if the specified filter name is marked in the input VCF file.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Ignore Filter",
                        "inputBinding": {
                            "prefix": "--ignore_filter",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#ignore_filter",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-ignoreFilter"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "required": false,
                        "label": "Gatk key",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-K"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Fix Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-fixMisencodedQuals"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Exclude Intervals",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-XL"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Emit Original Quals",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-EOQ"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:category": "GATK General",
                        "label": "Downsampling Type",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "name": "downsampling_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-dt"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Fraction",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-dfrac"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Coverage",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-dcov"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:category": "GATK General",
                        "label": "Disable Randomization",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:category": "GATK General",
                        "label": "Disable Indel Quals",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-DIQ"
                    },
                    {
                        "sbg:toolDefaultValue": "0.001",
                        "description": "The dirichlet parameter in the variational Bayes algorithm.",
                        "sbg:category": "Variant Recalibrator",
                        "label": "Dirichlet",
                        "inputBinding": {
                            "prefix": "--dirichlet",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#dirichlet",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-dirichlet"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Default Base Qualities",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-DBQ"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "description": "Number of CPUs per job.",
                        "sbg:category": "Execution",
                        "label": "CPU per job",
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "40.0",
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Gap Open Penalty",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-baqGOP"
                    },
                    {
                        "sbg:toolDefaultValue": "OFF",
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Calculation Type",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "name": "baq",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-baq"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:category": "GATK General",
                        "label": "Allow Potentially Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores"
                    }
                ],
                "label": "INDEL GATK VariantRecalibrator",
                "sbg:createdOn": 1450911440,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911440,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911441,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911442,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911443,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911444,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911446,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bix-demo"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type VariantRecalibrator -nt 8 --reference_sequence /folder/reference.fasta --input /f/some.vcf --input /f/some_other.vcf --use_annotation QD,MQRankSum,FS,DP,ReadPosRankSum,HaplotypeScore --recal_file some.recal --rscript_file some.recal.R --tranches_file some.tranches  -resource:dbsnp,known=false,training=true,truth=false,prior=10.2 /dbsnp.vcf -resource:omni,known=false,training=true,truth=false,prior=10.2 /known.vcf",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "47510cb2da55",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job;\n  }\n  else{\n  \treturn 1;\n  }\n}",
                            "engine": "#cwl-js-engine"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "description": "PDF file containing tranches plot generated by VariantRecalibrator.",
                        "sbg:fileTypes": "PDF",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "sbg:metadata": {},
                            "glob": "*.tranches.pdf"
                        },
                        "label": "Tranches Plot",
                        "id": "#tranches_plot",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "description": "The output tranches file used by ApplyRecalibration.",
                        "sbg:fileTypes": "TRANCHES",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "sbg:metadata": {},
                            "glob": "*.tranches"
                        },
                        "label": "Tranches File",
                        "id": "#tranches_file",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "description": "The output rscript file generated by the VQSR to aid in visualization of the input data and learned model.",
                        "sbg:fileTypes": "R",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "sbg:metadata": {},
                            "glob": "*.recal.R"
                        },
                        "label": "Rscript File",
                        "id": "#rscript_file",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "description": "The output recal file used by ApplyRecalibration.",
                        "sbg:fileTypes": "RECAL",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "secondaryFiles": [
                                ""
                            ],
                            "sbg:metadata": {},
                            "glob": "*.recal"
                        },
                        "label": "Recal File",
                        "id": "#recal_file",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "description": "PDF file containing plots generated by VariantRecalibrator.",
                        "sbg:fileTypes": "PDF",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "sbg:metadata": {},
                            "glob": "*.recal.R.pdf"
                        },
                        "label": "R Plots",
                        "id": "#R_plots",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "MIT License",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-variantrecalibrator/6",
                "temporaryFailCodes": [],
                "description": "Overview\n\nThis tool performs the first pass in a two-stage process called VQSR; the second pass is performed by the ApplyRecalibration tool. In brief, the first pass consists of creating a Gaussian mixture model by looking at the distribution of annotation values over a high quality subset of the input call set, and then scoring all input variants according to the model. The second pass consists of filtering variants based on score cutoffs identified in the first pass.\n\nThe purpose of the variant recalibrator is to assign a well-calibrated probability to each variant call in a call set. You can then create highly accurate call sets by filtering based on this single estimate for the accuracy of each call. The approach taken by variant quality score recalibration is to develop a continuous, covarying estimate of the relationship between SNP call annotations (such as QD, MQ, and ReadPosRankSum, for example) and the probability that a SNP is a true genetic variant versus a sequencing or data processing artifact. This model is determined adaptively based on \"true sites\" provided as input, typically HapMap 3 sites and those sites found to be polymorphic on the Omni 2.5M SNP chip array (in humans). This adaptive error model can then be applied to both known and novel variation discovered in the call set of interest to evaluate the probability that each call is real. The score that gets added to the INFO field of each variant is called the VQSLOD. It is the log odds of being a true variant versus being false under the trained Gaussian mixture model.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools and how to use them for best results on your own data.\n\nInputs\nThe input raw variants to be recalibrated.\nKnown, truth, and training sets to be used by the algorithm. See the method documentation for more details.\n\nOutputs\nA recalibration table file that will be used by the ApplyRecalibration tool.\nA tranches file which shows various metrics of the recalibration callset for slices of the data.\n\nUsage example\n\nRecalibrating SNPs in exome data\n java -Xmx4g -jar GenomeAnalysisTK.jar \\\n   -T VariantRecalibrator \\\n   -R reference.fasta \\\n   -input raw_variants.vcf \\\n   -resource:hapmap,known=false,training=true,truth=true,prior=15.0 hapmap_3.3.b37.sites.vcf \\\n   -resource:omni,known=false,training=true,truth=false,prior=12.0 1000G_omni2.5.b37.sites.vcf \\\n   -resource:1000G,known=false,training=true,truth=false,prior=10.0 1000G_phase1.snps.high_confidence.vcf\n   -resource:dbsnp,known=true,training=false,truth=false,prior=6.0 dbsnp_135.b37.vcf \\\n   -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an InbreedingCoeff \\\n   -mode SNP \\\n   -recalFile output.recal \\\n   -tranchesFile output.tranches \\\n   -rscriptFile output.plots.R\n \nCaveats\n\nThe values used in the example above are only meant to show how the command lines are composed. They are not meant to be taken as specific recommendations of values to use in your own work, and they may be different from the values cited elsewhere in our documentation. For the latest and greatest recommendations on how to set parameter values for you own analyses, please read the Best Practices section of the documentation, especially the FAQ document on VQSR parameters.\nWhole genomes and exomes take slightly different parameters, so make sure you adapt your commands accordingly! See the documents linked above for details.\nIf you work with small datasets (e.g. targeted capture experiments or small number of exomes), you will run into problems. Read the docs linked above for advice on how to deal with those issues.\nIn order to create the model reporting plots Rscript needs to be in your environment PATH (this is the scripting version of R, not the interactive version). See http://www.r-project.org for more info on how to download and install R.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:modifiedOn": 1450911446,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "bix-demo",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantrecalibration_VariantRecalibrator.php"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/gatk-2-3-9-lite-variantrecalibrator/6",
                "baseCommand": [
                    "java",
                    {
                        "class": "Expression",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M');\n  }\n  else{\n  \treturn '-Xmx2048M';\n  }\n}",
                        "engine": "#cwl-js-engine"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "VariantRecalibrator",
                    {
                        "class": "Expression",
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(8)\n  }\n}",
                        "engine": "#cwl-js-engine"
                    }
                ],
                "sbg:toolkit": "GATK",
                "stdin": "",
                "sbg:latestRevision": 5,
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:revision": 5,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "resources_files": [
                            {
                                "path": "/dbsnp.vcf",
                                "secondaryFiles": [],
                                "metadata": {
                                    "some": "value",
                                    "resources": "-resource:dbsnp,known=false,training=true,truth=false,prior=10.2"
                                }
                            },
                            {
                                "path": "/known.vcf",
                                "secondaryFiles": [],
                                "metadata": {
                                    "resources": "-resource:omni,known=false,training=true,truth=false,prior=10.2"
                                }
                            }
                        ],
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "memory_overhead_per_job": 0,
                        "use_annotation": [],
                        "variants": [
                            {
                                "path": "/f/some.vcf"
                            },
                            {
                                "path": "/f/some_other.vcf"
                            }
                        ]
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 2048
                    }
                },
                "x": 2816.3733208857607,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "bix-demo"
                ]
            },
            "inputs": [
                {
                    "id": "#GATK_VariantRecalibrator_1.variants",
                    "source": [
                        "#GATK_CombineVariants.combined_vcf"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.validation_strictness"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.use_original_qualities"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.use_annotation",
                    "default": [
                        "QD",
                        "DP",
                        "FS",
                        "ReadPosRankSum",
                        "MQRankSum"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.unsafe"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.ts_filter_level"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.trust_all_polymorphic"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.threads_per_job",
                    "default": 16
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.target_titv"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.tag"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.t_stranche"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.std_threshold"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.shrinkage"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.resources_files",
                    "source": [
                        "#SBG_Prepare_VQSR_Mills.output_vcf",
                        "#SBG_Prepare_VQSR_1000G.output_vcf"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.remove_program_records"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.read_group_black_list"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.read_filter"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.qual_threshold"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.prior_counts"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.phone_home"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.percent_bad_variants"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.pedigree_validation_type"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.pedigree_string"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.num_k_means"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.mode",
                    "default": "INDEL"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.min_num_bad_variants",
                    "default": 1000
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.memory_per_job",
                    "default": 20000
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.max_runtime_units"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.max_runtime"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.max_iterations"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.max_gaussians",
                    "default": 4
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.keep_program_records"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.intervals_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.intervals"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.interval_set_rule"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.interval_padding"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.interval_merging"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.ignore_filter"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.gatk_key"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.exclude_intervals"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.emit_original_quals"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.downsampling_type"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.downsample_to_fraction"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.downsample_to_coverage"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.disable_radnomization"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.disable_indel_quals"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.dirichlet"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.default_base_qualities"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.cpu_per_job",
                    "default": 16
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.baq"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.allow_potentailly_misencoded_quals"
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_VariantRecalibrator_1.tranches_plot"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.tranches_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.rscript_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.recal_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.R_plots"
                }
            ],
            "sbg:x": 2816.3733208857607,
            "sbg:y": 135.19613669433062
        },
        {
            "id": "#GATK_ApplyRecalibration",
            "run": {
                "arguments": [
                    {
                        "prefix": "--out",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase + '.recalibrated.vcf'\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    }
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Broad Institute",
                "y": -5.784310809147737,
                "inputs": [
                    {
                        "sbg:category": "Input Files",
                        "description": "The raw input variants to be recalibrated.",
                        "sbg:fileTypes": "VCF",
                        "required": true,
                        "label": "Input",
                        "inputBinding": {
                            "prefix": "--input",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#variants",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-input"
                    },
                    {
                        "sbg:toolDefaultValue": "SILENT",
                        "description": "How strict should we be with validation.",
                        "sbg:category": "GATK General",
                        "label": "Validation Strictness",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "name": "validation_strictness",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-S"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:category": "GATK General",
                        "label": "Use Original Qualities",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-OQ"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:category": "GATK General",
                        "label": "Use Legacy Downsampler",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-use_legacy_downsampler"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:category": "GATK General",
                        "label": "Unsafe",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "name": "unsafe",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-U"
                    },
                    {
                        "sbg:toolDefaultValue": "99.0",
                        "description": "The truth sensitivity level at which to start filtering.",
                        "sbg:category": "Apply Recalibration",
                        "label": "Ts Filter Level",
                        "inputBinding": {
                            "prefix": "--ts_filter_level",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#ts_filter_level",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-ts_filter_level"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "The input tranches file describing where to cut the data.",
                        "sbg:fileTypes": "TRANCHES",
                        "required": true,
                        "label": "Tranches File",
                        "inputBinding": {
                            "prefix": "--tranches_file",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#tranches_file",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-tranchesFile"
                    },
                    {
                        "sbg:toolDefaultValue": "8",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:category": "Execution",
                        "label": "Threads per job",
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:category": "GATK General",
                        "label": "Tag",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-tag"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Remove Program Records",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-rpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Reference Genome in FASTA format.",
                        "sbg:fileTypes": "FASTA, FA",
                        "required": true,
                        "label": "Reference Genome",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-R"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "The input recal file used by ApplyRecalibration.",
                        "sbg:fileTypes": "RECAL",
                        "required": true,
                        "label": "Recal File",
                        "inputBinding": {
                            "prefix": "--recal_file",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#recal_file",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-recalFile"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:category": "GATK General",
                        "label": "Read Group Black List",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rgbl"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:category": "GATK General",
                        "label": "Read Filter",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "name": "read_filter",
                                    "type": "enum"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rf"
                    },
                    {
                        "sbg:toolDefaultValue": "6",
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Preserve Qscores Less Than",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-preserveQ"
                    },
                    {
                        "sbg:toolDefaultValue": "STANDARD",
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:category": "GATK General",
                        "label": "Phone Home",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "name": "phone_home",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-et"
                    },
                    {
                        "sbg:toolDefaultValue": "STRICT",
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree Validation Type",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "name": "pedigree_validation_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-pedValidationType"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Pedigree string for samples.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree String",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-pedString"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:category": "GATK General",
                        "label": "Non Deterministic Random Seed",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-ndrs"
                    },
                    {
                        "sbg:toolDefaultValue": "SNP",
                        "description": "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously.",
                        "sbg:category": "Apply Recalibration",
                        "label": "Mode",
                        "inputBinding": {
                            "prefix": "--mode",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#mode",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "BOTH"
                                ],
                                "name": "mode",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-mode"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "description": "Amount of RAM memory to be used per job.",
                        "sbg:category": "Execution",
                        "label": "Memory per job",
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "sbg:category": "Execution",
                        "label": "Memory overhead per job",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "MINUTES",
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime Units",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "name": "max_runtime_units",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-maxRuntimeUnits"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxRuntime"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Keep Program Records",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-kpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-L"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:category": "GATK General",
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "--intervals"
                    },
                    {
                        "sbg:toolDefaultValue": "UNION",
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:category": "GATK General",
                        "label": "Interval Set Rule",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-isr"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:category": "GATK General",
                        "label": "Interval Padding",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-ip"
                    },
                    {
                        "sbg:toolDefaultValue": "ALL",
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:category": "GATK General",
                        "label": "Interval Merging",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-im"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "If specified the variant recalibrator will use variants even if the specified filter name is marked in the input VCF file.",
                        "sbg:category": "Apply Recalibration",
                        "label": "Ignore Filter",
                        "inputBinding": {
                            "prefix": "--ignore_filter",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#ignore_filter",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-ignoreFilter"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "required": false,
                        "label": "Gatk key",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-K"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Fix Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-fixMisencodedQuals"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Exclude Intervals",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-XL"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Emit Original Quals",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-EOQ"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:category": "GATK General",
                        "label": "Downsampling Type",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "name": "downsampling_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-dt"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Fraction",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-dfrac"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Coverage",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-dcov"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:category": "GATK General",
                        "label": "Disable Randomization",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:category": "GATK General",
                        "label": "Disable Indel Quals",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-DIQ"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Default Base Qualities",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-DBQ"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "description": "Number of CPUs per job.",
                        "sbg:category": "Execution",
                        "label": "CPU per job",
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "40.0",
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Gap Open Penalty",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-baqGOP"
                    },
                    {
                        "sbg:toolDefaultValue": "OFF",
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Calculation Type",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "name": "baq",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-baq"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:category": "GATK General",
                        "label": "Allow Potentially Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores"
                    }
                ],
                "label": "SNP GATK ApplyRecalibration",
                "sbg:createdOn": 1450911340,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911340,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911341,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911342,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911342,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911344,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911344,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911345,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "bix-demo"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type ApplyRecalibration -nt 8 --reference_sequence . --input variants.ext --recal_file recal_file.ext --tranches_file tranches_file.ext --out variants.recalibrated.vcf",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "47510cb2da55",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}",
                            "engine": "#cwl-js-engine"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "label": "VCF",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "sbg:metadata": {},
                            "glob": "*.vcf"
                        },
                        "description": "File to which variants should be written.",
                        "id": "#vcf",
                        "type": [
                            "File"
                        ]
                    }
                ],
                "sbg:license": "MIT License",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-applyrecalibration/6",
                "temporaryFailCodes": [],
                "description": "Overview\n\nThis tool performs the second pass in a two-stage process called VQSR; the first pass is performed by the VariantRecalibrator tool. In brief, the first pass consists of creating a Gaussian mixture model by looking at the distribution of annotation values over a high quality subset of the input call set, and then scoring all input variants according to the model. The second pass consists of filtering variants based on score cutoffs identified in the first pass.\n\nUsing the tranche file and recalibration table generated by the previous step, the ApplyRecalibration tool looks at each variant's VQSLOD value and decides which tranche it falls in. Variants in tranches that fall below the specified truth sensitivity filter level have their FILTER field annotated with the corresponding tranche level. This will result in a call set that is filtered to the desired level but retains the information necessary to increase sensitivity if needed.\n\nTo be clear, please note that by \"filtered\", we mean that variants failing the requested tranche cutoff are marked as filtered in the output VCF; they are not discarded.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools and how to use them for best results on your own data.\n\nInput\nThe raw input variants to be filtered.\nThe recalibration table file that was generated by the VariantRecalibrator tool.\nThe tranches file that was generated by the VariantRecalibrator tool.\n\nOutput\nA recalibrated VCF file in which each variant of the requested type is annotated with its VQSLOD and marked as filtered if the score is below the desired quality level.\n\nUsage example for filtering SNPs\n\n java -Xmx3g -jar GenomeAnalysisTK.jar \\\n   -T ApplyRecalibration \\\n   -R reference.fasta \\\n   -input NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.b37.vcf \\\n   --ts_filter_level 99.0 \\\n   -tranchesFile path/to/output.tranches \\\n   -recalFile path/to/output.recal \\\n   -mode SNP \\\n   -o path/to/output.recalibrated.filtered.vcf\n \nCaveats\n\nThe tranche values used in the example above is only a general example. You should determine the level of sensitivity that is appropriate for your specific project. Remember that higher sensitivity (more power to detect variants, yay!) comes at the cost of specificity (more false negatives, boo!). You have to choose at what point you want to set the tradeoff.\nIn order to create the tranche reporting plots (which are only generated for SNPs, not indels!) Rscript needs to be in your environment PATH (this is the scripting version of R, not the interactive version). See http://www.r-project.org for more info on how to download and install R.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:modifiedOn": 1450911345,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "bix-demo",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantrecalibration_ApplyRecalibration.php"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/gatk-2-3-9-lite-applyrecalibration/6",
                "baseCommand": [
                    "java",
                    {
                        "class": "Expression",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "ApplyRecalibration",
                    {
                        "class": "Expression",
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(8)\n  }\n}",
                        "engine": "#cwl-js-engine"
                    }
                ],
                "sbg:toolkit": "GATK",
                "stdin": "",
                "sbg:latestRevision": 6,
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:revision": 6,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "recal_file": {
                            "size": 0,
                            "path": "recal_file.ext",
                            "secondaryFiles": [],
                            "class": "File"
                        },
                        "tranches_file": {
                            "size": 0,
                            "path": "tranches_file.ext",
                            "secondaryFiles": [],
                            "class": "File"
                        },
                        "reference": {
                            "path": "."
                        },
                        "memory_overhead_per_job": 0,
                        "variants": {
                            "size": 0,
                            "path": "variants.ext",
                            "secondaryFiles": [],
                            "class": "File"
                        }
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 2048
                    }
                },
                "x": 3041.569298872784,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "bix-demo"
                ]
            },
            "inputs": [
                {
                    "id": "#GATK_ApplyRecalibration.variants",
                    "source": [
                        "#GATK_CombineVariants.combined_vcf"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration.validation_strictness"
                },
                {
                    "id": "#GATK_ApplyRecalibration.use_original_qualities"
                },
                {
                    "id": "#GATK_ApplyRecalibration.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_ApplyRecalibration.unsafe"
                },
                {
                    "id": "#GATK_ApplyRecalibration.ts_filter_level",
                    "default": 99
                },
                {
                    "id": "#GATK_ApplyRecalibration.tranches_file",
                    "source": [
                        "#GATK_VariantRecalibrator.tranches_file"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration.threads_per_job",
                    "default": 32
                },
                {
                    "id": "#GATK_ApplyRecalibration.tag"
                },
                {
                    "id": "#GATK_ApplyRecalibration.remove_program_records"
                },
                {
                    "id": "#GATK_ApplyRecalibration.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration.recal_file",
                    "source": [
                        "#GATK_VariantRecalibrator.recal_file"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration.read_group_black_list"
                },
                {
                    "id": "#GATK_ApplyRecalibration.read_filter"
                },
                {
                    "id": "#GATK_ApplyRecalibration.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_ApplyRecalibration.phone_home"
                },
                {
                    "id": "#GATK_ApplyRecalibration.pedigree_validation_type"
                },
                {
                    "id": "#GATK_ApplyRecalibration.pedigree_string"
                },
                {
                    "id": "#GATK_ApplyRecalibration.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_ApplyRecalibration.mode",
                    "default": "SNP"
                },
                {
                    "id": "#GATK_ApplyRecalibration.memory_per_job",
                    "default": 30000
                },
                {
                    "id": "#GATK_ApplyRecalibration.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_ApplyRecalibration.max_runtime_units"
                },
                {
                    "id": "#GATK_ApplyRecalibration.max_runtime"
                },
                {
                    "id": "#GATK_ApplyRecalibration.keep_program_records"
                },
                {
                    "id": "#GATK_ApplyRecalibration.intervals_file"
                },
                {
                    "id": "#GATK_ApplyRecalibration.intervals"
                },
                {
                    "id": "#GATK_ApplyRecalibration.interval_set_rule"
                },
                {
                    "id": "#GATK_ApplyRecalibration.interval_padding"
                },
                {
                    "id": "#GATK_ApplyRecalibration.interval_merging"
                },
                {
                    "id": "#GATK_ApplyRecalibration.ignore_filter"
                },
                {
                    "id": "#GATK_ApplyRecalibration.gatk_key"
                },
                {
                    "id": "#GATK_ApplyRecalibration.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_ApplyRecalibration.exclude_intervals"
                },
                {
                    "id": "#GATK_ApplyRecalibration.emit_original_quals"
                },
                {
                    "id": "#GATK_ApplyRecalibration.downsampling_type"
                },
                {
                    "id": "#GATK_ApplyRecalibration.downsample_to_fraction"
                },
                {
                    "id": "#GATK_ApplyRecalibration.downsample_to_coverage"
                },
                {
                    "id": "#GATK_ApplyRecalibration.disable_radnomization"
                },
                {
                    "id": "#GATK_ApplyRecalibration.disable_indel_quals"
                },
                {
                    "id": "#GATK_ApplyRecalibration.default_base_qualities"
                },
                {
                    "id": "#GATK_ApplyRecalibration.cpu_per_job",
                    "default": 32
                },
                {
                    "id": "#GATK_ApplyRecalibration.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_ApplyRecalibration.baq"
                },
                {
                    "id": "#GATK_ApplyRecalibration.allow_potentailly_misencoded_quals"
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_ApplyRecalibration.vcf"
                }
            ],
            "sbg:x": 3041.569298872784,
            "sbg:y": -5.784310809147737
        },
        {
            "id": "#GATK_ApplyRecalibration_1",
            "run": {
                "arguments": [
                    {
                        "prefix": "--out",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase + '.recalibrated.vcf'\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    }
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Broad Institute",
                "y": 163.23535943966522,
                "inputs": [
                    {
                        "sbg:category": "Input Files",
                        "description": "The raw input variants to be recalibrated.",
                        "sbg:fileTypes": "VCF",
                        "required": true,
                        "label": "Input",
                        "inputBinding": {
                            "prefix": "--input",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#variants",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-input"
                    },
                    {
                        "sbg:toolDefaultValue": "SILENT",
                        "description": "How strict should we be with validation.",
                        "sbg:category": "GATK General",
                        "label": "Validation Strictness",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "name": "validation_strictness",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-S"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:category": "GATK General",
                        "label": "Use Original Qualities",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-OQ"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:category": "GATK General",
                        "label": "Use Legacy Downsampler",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-use_legacy_downsampler"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:category": "GATK General",
                        "label": "Unsafe",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "name": "unsafe",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-U"
                    },
                    {
                        "sbg:toolDefaultValue": "99.0",
                        "description": "The truth sensitivity level at which to start filtering.",
                        "sbg:category": "Apply Recalibration",
                        "label": "Ts Filter Level",
                        "inputBinding": {
                            "prefix": "--ts_filter_level",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#ts_filter_level",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-ts_filter_level"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "The input tranches file describing where to cut the data.",
                        "sbg:fileTypes": "TRANCHES",
                        "required": true,
                        "label": "Tranches File",
                        "inputBinding": {
                            "prefix": "--tranches_file",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#tranches_file",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-tranchesFile"
                    },
                    {
                        "sbg:toolDefaultValue": "8",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:category": "Execution",
                        "label": "Threads per job",
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:category": "GATK General",
                        "label": "Tag",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-tag"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Remove Program Records",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-rpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Reference Genome in FASTA format.",
                        "sbg:fileTypes": "FASTA, FA",
                        "required": true,
                        "label": "Reference Genome",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-R"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "The input recal file used by ApplyRecalibration.",
                        "sbg:fileTypes": "RECAL",
                        "required": true,
                        "label": "Recal File",
                        "inputBinding": {
                            "prefix": "--recal_file",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#recal_file",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-recalFile"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:category": "GATK General",
                        "label": "Read Group Black List",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rgbl"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:category": "GATK General",
                        "label": "Read Filter",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "name": "read_filter",
                                    "type": "enum"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rf"
                    },
                    {
                        "sbg:toolDefaultValue": "6",
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Preserve Qscores Less Than",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-preserveQ"
                    },
                    {
                        "sbg:toolDefaultValue": "STANDARD",
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:category": "GATK General",
                        "label": "Phone Home",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "name": "phone_home",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-et"
                    },
                    {
                        "sbg:toolDefaultValue": "STRICT",
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree Validation Type",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "name": "pedigree_validation_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-pedValidationType"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Pedigree string for samples.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree String",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-pedString"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:category": "GATK General",
                        "label": "Non Deterministic Random Seed",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-ndrs"
                    },
                    {
                        "sbg:toolDefaultValue": "SNP",
                        "description": "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously.",
                        "sbg:category": "Apply Recalibration",
                        "label": "Mode",
                        "inputBinding": {
                            "prefix": "--mode",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#mode",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "BOTH"
                                ],
                                "name": "mode",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-mode"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "description": "Amount of RAM memory to be used per job.",
                        "sbg:category": "Execution",
                        "label": "Memory per job",
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "sbg:category": "Execution",
                        "label": "Memory overhead per job",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "MINUTES",
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime Units",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "name": "max_runtime_units",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-maxRuntimeUnits"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxRuntime"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Keep Program Records",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-kpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-L"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:category": "GATK General",
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "--intervals"
                    },
                    {
                        "sbg:toolDefaultValue": "UNION",
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:category": "GATK General",
                        "label": "Interval Set Rule",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-isr"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:category": "GATK General",
                        "label": "Interval Padding",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-ip"
                    },
                    {
                        "sbg:toolDefaultValue": "ALL",
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:category": "GATK General",
                        "label": "Interval Merging",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-im"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "If specified the variant recalibrator will use variants even if the specified filter name is marked in the input VCF file.",
                        "sbg:category": "Apply Recalibration",
                        "label": "Ignore Filter",
                        "inputBinding": {
                            "prefix": "--ignore_filter",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#ignore_filter",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-ignoreFilter"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "required": false,
                        "label": "Gatk key",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-K"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Fix Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-fixMisencodedQuals"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Exclude Intervals",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-XL"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Emit Original Quals",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-EOQ"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:category": "GATK General",
                        "label": "Downsampling Type",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "name": "downsampling_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-dt"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Fraction",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-dfrac"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Coverage",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-dcov"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:category": "GATK General",
                        "label": "Disable Randomization",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:category": "GATK General",
                        "label": "Disable Indel Quals",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-DIQ"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Default Base Qualities",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-DBQ"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "description": "Number of CPUs per job.",
                        "sbg:category": "Execution",
                        "label": "CPU per job",
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "40.0",
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Gap Open Penalty",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-baqGOP"
                    },
                    {
                        "sbg:toolDefaultValue": "OFF",
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Calculation Type",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "name": "baq",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-baq"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:category": "GATK General",
                        "label": "Allow Potentially Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores"
                    }
                ],
                "label": "INDEL GATK ApplyRecalibration",
                "sbg:createdOn": 1450911340,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911340,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911341,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911342,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911342,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911344,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911344,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911345,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "bix-demo"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type ApplyRecalibration -nt 8 --reference_sequence . --input variants.ext --recal_file recal_file.ext --tranches_file tranches_file.ext --out variants.recalibrated.vcf",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "47510cb2da55",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}",
                            "engine": "#cwl-js-engine"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "label": "VCF",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants",
                            "sbg:metadata": {},
                            "glob": "*.vcf"
                        },
                        "description": "File to which variants should be written.",
                        "id": "#vcf",
                        "type": [
                            "File"
                        ]
                    }
                ],
                "sbg:license": "MIT License",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-applyrecalibration/6",
                "temporaryFailCodes": [],
                "description": "Overview\n\nThis tool performs the second pass in a two-stage process called VQSR; the first pass is performed by the VariantRecalibrator tool. In brief, the first pass consists of creating a Gaussian mixture model by looking at the distribution of annotation values over a high quality subset of the input call set, and then scoring all input variants according to the model. The second pass consists of filtering variants based on score cutoffs identified in the first pass.\n\nUsing the tranche file and recalibration table generated by the previous step, the ApplyRecalibration tool looks at each variant's VQSLOD value and decides which tranche it falls in. Variants in tranches that fall below the specified truth sensitivity filter level have their FILTER field annotated with the corresponding tranche level. This will result in a call set that is filtered to the desired level but retains the information necessary to increase sensitivity if needed.\n\nTo be clear, please note that by \"filtered\", we mean that variants failing the requested tranche cutoff are marked as filtered in the output VCF; they are not discarded.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools and how to use them for best results on your own data.\n\nInput\nThe raw input variants to be filtered.\nThe recalibration table file that was generated by the VariantRecalibrator tool.\nThe tranches file that was generated by the VariantRecalibrator tool.\n\nOutput\nA recalibrated VCF file in which each variant of the requested type is annotated with its VQSLOD and marked as filtered if the score is below the desired quality level.\n\nUsage example for filtering SNPs\n\n java -Xmx3g -jar GenomeAnalysisTK.jar \\\n   -T ApplyRecalibration \\\n   -R reference.fasta \\\n   -input NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.b37.vcf \\\n   --ts_filter_level 99.0 \\\n   -tranchesFile path/to/output.tranches \\\n   -recalFile path/to/output.recal \\\n   -mode SNP \\\n   -o path/to/output.recalibrated.filtered.vcf\n \nCaveats\n\nThe tranche values used in the example above is only a general example. You should determine the level of sensitivity that is appropriate for your specific project. Remember that higher sensitivity (more power to detect variants, yay!) comes at the cost of specificity (more false negatives, boo!). You have to choose at what point you want to set the tradeoff.\nIn order to create the tranche reporting plots (which are only generated for SNPs, not indels!) Rscript needs to be in your environment PATH (this is the scripting version of R, not the interactive version). See http://www.r-project.org for more info on how to download and install R.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:modifiedOn": 1450911345,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "bix-demo",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantrecalibration_ApplyRecalibration.php"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/gatk-2-3-9-lite-applyrecalibration/6",
                "baseCommand": [
                    "java",
                    {
                        "class": "Expression",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "ApplyRecalibration",
                    {
                        "class": "Expression",
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(8)\n  }\n}",
                        "engine": "#cwl-js-engine"
                    }
                ],
                "sbg:toolkit": "GATK",
                "stdin": "",
                "sbg:latestRevision": 6,
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:revision": 6,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "recal_file": {
                            "size": 0,
                            "path": "recal_file.ext",
                            "secondaryFiles": [],
                            "class": "File"
                        },
                        "tranches_file": {
                            "size": 0,
                            "path": "tranches_file.ext",
                            "secondaryFiles": [],
                            "class": "File"
                        },
                        "reference": {
                            "path": "."
                        },
                        "memory_overhead_per_job": 0,
                        "variants": {
                            "size": 0,
                            "path": "variants.ext",
                            "secondaryFiles": [],
                            "class": "File"
                        }
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 2048
                    }
                },
                "x": 3227.9416940321503,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "bix-demo"
                ]
            },
            "inputs": [
                {
                    "id": "#GATK_ApplyRecalibration_1.variants",
                    "source": [
                        "#GATK_ApplyRecalibration.vcf"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.validation_strictness"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.use_original_qualities"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.unsafe"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.ts_filter_level",
                    "default": 99
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.tranches_file",
                    "source": [
                        "#GATK_VariantRecalibrator_1.tranches_file"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.threads_per_job",
                    "default": 32
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.tag"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.remove_program_records"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.recal_file",
                    "source": [
                        "#GATK_VariantRecalibrator_1.recal_file"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.read_group_black_list"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.read_filter"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.phone_home"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.pedigree_validation_type"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.pedigree_string"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.mode",
                    "default": "INDEL"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.memory_per_job",
                    "default": 30000
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.max_runtime_units"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.max_runtime"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.keep_program_records"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.intervals_file"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.intervals"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.interval_set_rule"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.interval_padding"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.interval_merging"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.ignore_filter"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.gatk_key"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.exclude_intervals"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.emit_original_quals"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.downsampling_type"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.downsample_to_fraction"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.downsample_to_coverage"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.disable_radnomization"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.disable_indel_quals"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.default_base_qualities"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.cpu_per_job",
                    "default": 32
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.baq"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.allow_potentailly_misencoded_quals"
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_ApplyRecalibration_1.vcf"
                }
            ],
            "sbg:x": 3227.9416940321503,
            "sbg:y": 163.23535943966522
        },
        {
            "id": "#SBG_FASTA_Indices",
            "run": {
                "arguments": [
                    {
                        "valueFrom": "--dict",
                        "separate": true
                    },
                    {
                        "valueFrom": "--fai",
                        "separate": true
                    }
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Sanja Mijalkovic, Seven Bridges Genomics, <sanja.mijalkovic@sbgenomics.com>",
                "sbg:categories": [
                    "Indexing"
                ],
                "inputs": [
                    {
                        "sbg:stageInput": "link",
                        "description": "FASTA file to be indexed",
                        "required": true,
                        "label": "FASTA file",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "--REFERENCE"
                        },
                        "id": "#reference",
                        "type": [
                            "File"
                        ]
                    }
                ],
                "y": 368.3333593606951,
                "label": "SBG FASTA Indices",
                "sbg:createdOn": 1450911283,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911283,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911283,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1458655509,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1458655251,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1458658019,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "markop"
                    },
                    {
                        "sbg:modifiedOn": 1458669249,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "markop"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "python /opt/sbg-fasta-indices.py --REFERENCE /path/to/reference.ext  --dict  --fai",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "b177f5bd06db",
                        "dockerPull": "images.sbgenomics.com/djordje_klisic/sbg-fasta-indices:1.0"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 2500
                    }
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "FASTA",
                        "fileTypes": "FASTA, FA",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#reference",
                            "secondaryFiles": [
                                ".fai",
                                "^.dict"
                            ],
                            "glob": {
                                "class": "Expression",
                                "script": "{\n  return $job.inputs.reference.path.split(\"/\").pop()\n}",
                                "engine": "#cwl-js-engine"
                            }
                        },
                        "label": "Reference",
                        "id": "#fasta_reference",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "label": "FASTA Index",
                        "outputBinding": {
                            "sbg:metadata": {},
                            "glob": "*.fai"
                        },
                        "sbg:fileTypes": "FAI",
                        "id": "#fasta_index",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "label": "FASTA Dictionary",
                        "outputBinding": {
                            "sbg:metadata": {},
                            "glob": "*.dict"
                        },
                        "sbg:fileTypes": "DICT",
                        "id": "#fasta_dict",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "Apache License 2.0",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/sbg-fasta-indices/9",
                "temporaryFailCodes": [],
                "x": 733.3336788416034,
                "sbg:contributors": [
                    "markop",
                    "bix-demo"
                ],
                "sbg:modifiedOn": 1458669249,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "markop",
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/sbg-fasta-indices/9",
                "baseCommand": [
                    "python",
                    "/opt/sbg-fasta-indices.py"
                ],
                "sbg:toolkit": "SBGTools",
                "sbg:latestRevision": 5,
                "description": "Tool allows creating FASTA dictionary and index simultaneously which is necessary for running GATK tools. This version of tool for indexing uses SAMtools faidx command (toolkit version0.1.19), while for the FASTA dictionary is used Picard CreateFastaDictionary (toolkit version 1.140)",
                "sbg:revision": 5,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "reference": {
                            "size": 0,
                            "path": "/path/to/reference.ext",
                            "secondaryFiles": [],
                            "class": "File"
                        }
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 2500
                    }
                },
                "class": "CommandLineTool",
                "stdin": ""
            },
            "inputs": [
                {
                    "id": "#SBG_FASTA_Indices.reference",
                    "source": [
                        "#SBG_Untar_fasta.output_fasta"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_FASTA_Indices.fasta_reference"
                },
                {
                    "id": "#SBG_FASTA_Indices.fasta_index"
                },
                {
                    "id": "#SBG_FASTA_Indices.fasta_dict"
                }
            ],
            "sbg:x": 733.3336788416034,
            "sbg:y": 368.3333593606951
        },
        {
            "id": "#SBG_Html2b64",
            "run": {
                "arguments": [],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Seven Bridges",
                "y": 442.3333612812897,
                "inputs": [
                    {
                        "sbg:category": "File input.",
                        "description": "Compressed archive.",
                        "sbg:fileTypes": "ZIP",
                        "required": false,
                        "label": "Input file",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "--input"
                        },
                        "id": "#input_file",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "label": "SBG Html2b64",
                "sbg:createdOn": 1450911294,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911294,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911294,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1459963571,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "python /opt/sbg_html_to_b64.py",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "8c35d2a2d8d1",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/sbg-html-to-b64:1.0.1"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    }
                ],
                "outputs": [
                    {
                        "description": "Output file, b64html.",
                        "sbg:fileTypes": "HTML, B64HTML",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_file",
                            "sbg:metadata": {},
                            "glob": "*b64html"
                        },
                        "label": "B64html",
                        "id": "#b64html",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "Apache License 2.0",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/sbg-html2b64/5",
                "temporaryFailCodes": [],
                "description": "Tool for converting archived html output of FastQC and similar tools to b64html so it can easily be displayed in web browsers or on SBG platform.",
                "sbg:categories": [
                    "Converters",
                    "Plotting-and-Rendering"
                ],
                "sbg:modifiedOn": 1459963571,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "bix-demo",
                "requirements": [],
                "stdout": "",
                "id": "admin/sbg-public-data/sbg-html2b64/5",
                "baseCommand": [
                    "python",
                    "/opt/sbg_html_to_b64.py"
                ],
                "sbg:toolkit": "SBGTools",
                "stdin": "",
                "sbg:latestRevision": 2,
                "sbg:toolkitVersion": "1.0",
                "sbg:revision": 2,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "input_file": {
                            "size": 0,
                            "path": "input_file.ext",
                            "secondaryFiles": [],
                            "class": "File"
                        }
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 1000
                    }
                },
                "x": 349.33335738711946,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "bix-demo"
                ]
            },
            "inputs": [
                {
                    "id": "#SBG_Html2b64.input_file",
                    "source": [
                        "#FastQC.report_zip"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_Html2b64.b64html"
                }
            ],
            "sbg:x": 349.33335738711946,
            "sbg:y": 442.3333612812897,
            "scatter": "#SBG_Html2b64.input_file"
        },
        {
            "id": "#FastQC",
            "run": {
                "arguments": [
                    {
                        "prefix": "",
                        "valueFrom": "--noextract",
                        "separate": true
                    },
                    {
                        "prefix": "--outdir",
                        "valueFrom": ".",
                        "separate": true
                    }
                ],
                "sbg:project": "bix-demo/fastqc-0-11-4-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Babraham Institute",
                "y": 467.00002925925855,
                "inputs": [
                    {
                        "description": "Specifies the number of files which can be processed simultaneously.  Each thread will be allocated 250MB of memory so you shouldn't run more threads than your available memory will cope with, and not more than 6 threads on a 32 bit machine.",
                        "label": "Threads",
                        "inputBinding": {
                            "prefix": "--threads",
                            "valueFrom": {
                                "class": "Expression",
                                "script": "{\tif ($job.inputs.threads)\n\t\t{\n  \t\t\treturn $job.inputs.threads\n\t\t}\n\telse\n \t\t{\n   \t\t\treturn 1\n \t\t}\n}",
                                "engine": "#cwl-js-engine"
                            },
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#threads",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-t"
                    },
                    {
                        "description": "Supress all progress messages on stdout and only report errors.",
                        "label": "Quiet",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "--quiet"
                        },
                        "id": "#quiet",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-q"
                    },
                    {
                        "description": "Disable grouping of bases for reads >50bp. All reports will show data for every base in the read.  WARNING: Using this option will cause fastqc to crash and burn if you use it on really long reads, and your plots may end up a ridiculous size. You have been warned!",
                        "sbg:category": "",
                        "label": "Nogroup",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": false,
                            "prefix": "--nogroup"
                        },
                        "id": "#nogroup",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Files come from naopore sequences and are in fast5 format. In this mode you can pass in directories to process and the program will take in all fast5 files within those directories and produce a single output file from the sequences found in all files.",
                        "sbg:category": "",
                        "label": "Nano",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": false,
                            "prefix": "--nano"
                        },
                        "id": "#nano",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "description": "Specifies a non-default file which contains a set of criteria which will be used to determine the warn/error limits for the various modules.  This file can also be used to selectively remove some modules from the output all together.  The format needs to mirror the default limits.txt file found in the Configuration folder.",
                        "required": false,
                        "label": "Limits",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "--limits"
                        },
                        "id": "#limits_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-l"
                    },
                    {
                        "sbg:toolDefaultValue": "7",
                        "description": "Specifies the length of Kmer to look for in the Kmer content module. Specified Kmer length must be between 2 and 10. Default length is 7 if not specified.",
                        "sbg:category": "",
                        "label": "Kmers",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "--kmers"
                        },
                        "id": "#kmers",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-f"
                    },
                    {
                        "sbg:category": "",
                        "description": "Input file.",
                        "required": true,
                        "label": "Input file",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "position": 100
                        },
                        "id": "#input_fastq",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "description": "Bypasses the normal sequence file format detection and forces the program to use the specified format.  Valid formats are BAM, SAM, BAM_mapped, SAM_mapped and FASTQ.",
                        "sbg:category": "",
                        "label": "Format",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "--format"
                        },
                        "id": "#format",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "bam",
                                    "sam",
                                    "bam_mapped",
                                    "sam_mapped",
                                    "fastq"
                                ],
                                "name": "format",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-f"
                    },
                    {
                        "sbg:category": "",
                        "description": "Specifies a non-default file which contains the list of contaminants to screen overrepresented sequences against. The file must contain sets of named contaminants in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
                        "required": false,
                        "label": "Contaminants",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "--contaminants"
                        },
                        "id": "#contaminants_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-c"
                    },
                    {
                        "description": "Files come from raw casava output. Files in the same sample group (differing only by the group number) will be analysed as a set rather than individually. Sequences with the filter flag set in the header will be excluded from the analysis. Files must have the same names given to them by casava (including being gzipped and ending with .gz) otherwise they won't be grouped together correctly.",
                        "sbg:category": "",
                        "label": "Casava",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": false,
                            "prefix": "--casava"
                        },
                        "id": "#casava",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "description": "Specifies a non-default file which contains the list of adapter sequences which will be explicity searched against the library. The file must contain sets of named adapters in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
                        "required": false,
                        "label": "Adapters",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "--adapters"
                        },
                        "id": "#adapters_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-a"
                    }
                ],
                "label": "FastQC",
                "sbg:createdOn": 1450911593,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911593,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911593,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911594,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1459870965,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "mladenlSBG"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "fastqc  --noextract --outdir .  /root/dir/example.fastq",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "759c4c8fbafd",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/fastqc:0.11.4"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\tif ($job.inputs.threads)\n{\n  return $job.inputs.threads\n}\n else\n {\n   return 1\n }\n}",
                            "engine": "#cwl-js-engine"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 2048
                    }
                ],
                "outputs": [
                    {
                        "description": "Zip archive of the report",
                        "sbg:fileTypes": "ZIP",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_fastq",
                            "sbg:metadata": {
                                "__inherit__": "input_fastq"
                            },
                            "glob": "*_fastqc.zip"
                        },
                        "label": "Report zip",
                        "id": "#report_zip",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "GNU General Public License v3.0 only",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/fastqc-0-11-4/11",
                "temporaryFailCodes": [],
                "description": "FastQC reads a set of sequence files and produces a quality control (QC) report from each one. These reports consist of a number of different modules, each of which will help identify a different type of potential problem in your data.\n\nFastQC is a tool which takes a FastQ file and runs a series of tests on it to generate a comprehensive QC report.  This report will tell you if there is anything unusual about your sequence.  Each test is flagged as a pass, warning, or fail depending on how far it departs from what you would expect from a normal large dataset with no significant biases.  It is important to stress that warnings or even failures do not necessarily mean that there is a problem with your data, only that it is unusual.  It is possible that the biological nature of your sample means that you would expect this particular bias in your results.",
                "sbg:categories": [
                    "FASTQ-Processing",
                    "Quality-Control",
                    "Quantification"
                ],
                "sbg:modifiedOn": 1459870965,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "mladenlSBG",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
                    },
                    {
                        "label": "Source Code",
                        "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4_source.zip"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://wiki.hpcc.msu.edu/display/Bioinfo/FastQC+Tutorial"
                    },
                    {
                        "label": "Download",
                        "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4.zip"
                    },
                    {
                        "label": "Publication",
                        "id": ""
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/fastqc-0-11-4/11",
                "baseCommand": [
                    "fastqc"
                ],
                "sbg:toolkit": "FastQC",
                "stdin": "",
                "sbg:latestRevision": 3,
                "sbg:toolkitVersion": "0.11.4",
                "sbg:revision": 3,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "threads": 0,
                        "quiet": true,
                        "input_fastq": {
                            "path": "/root/dir/example.fastq"
                        }
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 2048
                    }
                },
                "x": 121.00001570913574,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "mladenlSBG",
                    "bix-demo"
                ]
            },
            "inputs": [
                {
                    "id": "#FastQC.threads"
                },
                {
                    "id": "#FastQC.quiet"
                },
                {
                    "id": "#FastQC.nogroup"
                },
                {
                    "id": "#FastQC.nano"
                },
                {
                    "id": "#FastQC.limits_file"
                },
                {
                    "id": "#FastQC.kmers"
                },
                {
                    "id": "#FastQC.input_fastq",
                    "source": [
                        "#fastq"
                    ]
                },
                {
                    "id": "#FastQC.format"
                },
                {
                    "id": "#FastQC.contaminants_file"
                },
                {
                    "id": "#FastQC.casava"
                },
                {
                    "id": "#FastQC.adapters_file"
                }
            ],
            "outputs": [
                {
                    "id": "#FastQC.report_zip"
                }
            ],
            "sbg:x": 121.00001570913574,
            "sbg:y": 467.00002925925855,
            "scatter": "#FastQC.input_fastq"
        },
        {
            "id": "#SBG_Untar_fasta",
            "run": {
                "arguments": [],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Vladimir Kovacevic, Seven Bridges Genomics",
                "y": -95.57292397444452,
                "inputs": [
                    {
                        "sbg:stageInput": "link",
                        "description": "The input archive file to be unpacked.",
                        "sbg:fileTypes": "TAR,FA,FASTA,FA.GZ,FASTA.GZ",
                        "required": true,
                        "label": "Input archive file with fasta",
                        "id": "#input_tar_with_reference",
                        "type": [
                            "File"
                        ]
                    }
                ],
                "label": "SBG Untar fasta",
                "sbg:createdOn": 1466002722,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1466002722,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1466003214,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1466004710,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466004986,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466005081,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466005599,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466007588,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466077480,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "echo Passing input file",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "58b79c627f95",
                        "dockerPull": "images.sbgenomics.com/markop/sbg-decompressor:1.0"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    }
                ],
                "outputs": [
                    {
                        "label": "Unpacked fasta file",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_tar_with_reference",
                            "glob": "{*.fasta,*.fa,*.fa.gz,*.fasta.gz}"
                        },
                        "description": "Unpacked fasta file from the input archive.",
                        "id": "#output_fasta",
                        "type": [
                            "File"
                        ]
                    }
                ],
                "sbg:license": "Apache License 2.0",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/sbg-untar-fasta/8",
                "temporaryFailCodes": [],
                "description": "SBG Untar fasta outputs FA/FASTA/FA.GZ/FASTA.GZ from TAR.",
                "sbg:categories": [
                    "Other"
                ],
                "sbg:modifiedOn": 1466077480,
                "sbg:homepage": "https://igor.sbgenomics.com/",
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/sbg-untar-fasta/8",
                "baseCommand": [
                    {
                        "class": "Expression",
                        "script": "{\n  reference_file = $job.inputs.input_tar_with_reference.path.split('/')[$job.inputs.input_tar_with_reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return 'tar -xf ' + reference_file    \n  }\n  else{\n    return 'echo Passing input file '\n  }\n}",
                        "engine": "#cwl-js-engine"
                    }
                ],
                "sbg:toolkit": "SBGTools",
                "stdin": "",
                "sbg:latestRevision": 7,
                "sbg:toolkitVersion": "v1.0",
                "sbg:revision": 7,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "input_tar_with_reference": {
                            "size": 0,
                            "path": "input_file.fasta",
                            "secondaryFiles": [],
                            "class": "File"
                        }
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 1000
                    }
                },
                "x": 293.3333436648053,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "vladimirk",
                    "bix-demo"
                ]
            },
            "inputs": [
                {
                    "id": "#SBG_Untar_fasta.input_tar_with_reference",
                    "source": [
                        "#reference"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_Untar_fasta.output_fasta"
                }
            ],
            "sbg:x": 293.3333436648053,
            "sbg:y": -95.57292397444452
        },
        {
            "id": "#BWA_INDEX",
            "run": {
                "arguments": [
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.bwt_construction){\n    return ''\n  } else {\n    return '-a ' + $job.inputs.bwt_construction\n  }\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    },
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.prefix){\n    return ''\n  } else {\n    return '-p ' + $job.inputs.prefix\n  }\n}\n",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    },
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.block_size){\n    return ''\n  } else {\n    return '-b ' + $job.inputs.block_size\n  }\n}\n\n",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    },
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.add_64_to_fasta_name){\n    return ''\n  } else {\n    return '-6 '\n  }\n}\n",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    },
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return ''\n  }\n  else{\n    tar_cmd = 'tar -cf ' + reference_file + '.tar ' + reference_file + ' *.amb' + ' *.ann' + ' *.bwt' + ' *.pac' + ' *.sa' \n    return ' ; ' + tar_cmd\n  }\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    }
                ],
                "sbg:project": "vladimirk/bwa-mem-bundle-0-7-13-demo",
                "sbg:createdBy": "vladimirk",
                "sbg:toolAuthor": "Heng Li",
                "y": 28.333334326744097,
                "inputs": [
                    {
                        "sbg:category": "Configuration",
                        "label": "Total memory [Gb]",
                        "description": "Total memory [GB] to be reserved for the tool (Default value is 1.5 x size_of_the_reference).",
                        "id": "#total_memory",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "File input",
                        "description": "Input reference fasta of TAR file with reference and indices.",
                        "sbg:fileTypes": "FASTA,FA,FA.GZ,FASTA.GZ,TAR",
                        "required": true,
                        "label": "Reference",
                        "id": "#reference",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Configuration",
                        "label": "Prefix of the index to be output",
                        "description": "Prefix of the index [same as fasta name].",
                        "id": "#prefix_of_the_index_to_be_output",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "auto",
                        "description": "Algorithm for constructing BWT index. Available options are:s\tIS linear-time algorithm for constructing suffix array. It requires 5.37N memory where N is the size of the database. IS is moderately fast, but does not work with database larger than 2GB. IS is the default algorithm due to its simplicity. The current codes for IS algorithm are reimplemented by Yuta Mori. bwtsw\tAlgorithm implemented in BWT-SW. This method works with the whole human genome. Warning: `-a bwtsw' does not work for short genomes, while `-a is' and `-a div' do not work not for long genomes.",
                        "sbg:category": "Configuration",
                        "label": "Bwt construction",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-a"
                        },
                        "id": "#bwt_construction",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "bwtsw",
                                    "is",
                                    "div"
                                ],
                                "name": "bwt_construction",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "10000000",
                        "description": "Block size for the bwtsw algorithm (effective with -a bwtsw).",
                        "sbg:category": "Configuration",
                        "label": "Block size",
                        "id": "#block_size",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Configuration",
                        "label": "Output index files renamed by adding 64",
                        "description": "Index files named as <in.fasta>64 instead of <in.fasta>.*.",
                        "id": "#add_64_to_fasta_name",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    }
                ],
                "label": "BWA INDEX",
                "sbg:createdOn": 1458658817,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1458658817,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1458658836,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1458745340,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1460643813,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1462801955,
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1465227109,
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1465231882,
                        "sbg:revision": 6,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1465990497,
                        "sbg:revision": 7,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1465992672,
                        "sbg:revision": 8,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1465993183,
                        "sbg:revision": 9,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1465994793,
                        "sbg:revision": 10,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466070064,
                        "sbg:revision": 11,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466071727,
                        "sbg:revision": 12,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466072504,
                        "sbg:revision": 13,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466077580,
                        "sbg:revision": 14,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1469449858,
                        "sbg:revision": 15,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "/opt/bwa-0.7.13/bwa index reference.fasta   -a bwtsw      -6    ; tar -cf reference.fasta.tar reference.fasta *.amb *.ann *.bwt *.pac *.sa",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "2f813371e803",
                        "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.13"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  GB_1 = 1024*1024*1024\n  reads_size = $job.inputs.reference.size\n\n  if(!reads_size) { reads_size = GB_1 }\n  \n  if($job.inputs.total_memory){\n    return $job.inputs.total_memory * 1024\n  } else {\n    return (parseInt(1.5 * reads_size / (1024*1024)))\n  }\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "description": "TARed fasta with its BWA indices.",
                        "sbg:fileTypes": "TAR",
                        "fileTypes": "TAR",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#reference",
                            "glob": {
                                "class": "Expression",
                                "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return reference_file\n  }\n  else{\n    return reference_file + '.tar'\n  }\n}\n",
                                "engine": "#cwl-js-engine"
                            }
                        },
                        "label": "TARed fasta with its BWA indices",
                        "id": "#indexed_reference",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "GNU Affero General Public License v3.0, MIT License",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/bwa-index/32",
                "temporaryFailCodes": [],
                "description": "BWA INDEX constructs the FM-index (Full-text index in Minute space) for the reference genome.\nGenerated index files will be used with BWA MEM, BWA ALN, BWA SAMPE and BWA SAMSE tools.\n\nIf input reference file has TAR extension it is assumed that BWA indices came together with it. BWA INDEX will only pass that TAR to the output. If input is not TAR, the creation of BWA indices and its packing in TAR file (together with the reference) will be performed.",
                "sbg:categories": [
                    "Indexing",
                    "FASTA-Processing"
                ],
                "sbg:modifiedOn": 1469449858,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://bio-bwa.sourceforge.net/"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/lh3/bwa"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://bio-bwa.sourceforge.net/bwa.shtml"
                    },
                    {
                        "label": "Download",
                        "id": "http://sourceforge.net/projects/bio-bwa/"
                    },
                    {
                        "label": "Publication",
                        "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/bwa-index/32",
                "baseCommand": [
                    {
                        "class": "Expression",
                        "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return 'echo Index files passed without any processing!'\n  }\n  else{\n    index_cmd = '/opt/bwa-0.7.13/bwa index '+ reference_file + ' '\n    return index_cmd\n  }\n}",
                        "engine": "#cwl-js-engine"
                    }
                ],
                "sbg:toolkit": "BWA",
                "stdin": "",
                "sbg:latestRevision": 15,
                "sbg:toolkitVersion": "0.7.13",
                "sbg:revision": 15,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "prefix_of_the_index_to_be_output": "prefix",
                        "total_memory": null,
                        "bwt_construction": "bwtsw",
                        "block_size": 0,
                        "reference": {
                            "size": 0,
                            "path": "/path/to/the/reference.fasta",
                            "secondaryFiles": [
                                {
                                    "path": ".amb"
                                },
                                {
                                    "path": ".ann"
                                },
                                {
                                    "path": ".bwt"
                                },
                                {
                                    "path": ".pac"
                                },
                                {
                                    "path": ".sa"
                                }
                            ],
                            "class": "File"
                        },
                        "add_64_to_fasta_name": true
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 1536
                    }
                },
                "x": 580.3333612283075,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "vladimirk"
                ]
            },
            "inputs": [
                {
                    "id": "#BWA_INDEX.total_memory"
                },
                {
                    "id": "#BWA_INDEX.reference",
                    "source": [
                        "#reference"
                    ]
                },
                {
                    "id": "#BWA_INDEX.prefix_of_the_index_to_be_output"
                },
                {
                    "id": "#BWA_INDEX.bwt_construction"
                },
                {
                    "id": "#BWA_INDEX.block_size"
                },
                {
                    "id": "#BWA_INDEX.add_64_to_fasta_name"
                }
            ],
            "outputs": [
                {
                    "id": "#BWA_INDEX.indexed_reference"
                }
            ],
            "sbg:x": 580.3333612283075,
            "sbg:y": 28.333334326744097
        },
        {
            "id": "#SBG_Pair_FASTQs_by_Metadata",
            "run": {
                "arguments": [
                    {
                        "prefix": "--in_metafile",
                        "valueFrom": "job.json",
                        "separate": true,
                        "position": 1
                    },
                    {
                        "prefix": "--out_metafile",
                        "valueFrom": "cwl.output.json",
                        "separate": true,
                        "position": 2
                    }
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Djordje Klisic, Seven Bridges Genomics, <djordje.klisic@sbgenomics.com>",
                "sbg:categories": [
                    "Converters",
                    "Other"
                ],
                "inputs": [
                    {
                        "sbg:stageInput": "link",
                        "description": "List of the FASTQ files with properly set metadata fileds.",
                        "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ",
                        "required": true,
                        "label": "List of FASTQ files",
                        "inputBinding": {
                            "prefix": "--fastq_list",
                            "itemSeparator": ",",
                            "separate": true,
                            "position": 0,
                            "sbg:cmdInclude": true
                        },
                        "id": "#fastq_list",
                        "type": [
                            {
                                "name": "fastq_list",
                                "items": "File",
                                "type": "array"
                            }
                        ]
                    }
                ],
                "y": 256.33335844675776,
                "label": "SBG Pair FASTQs by Metadata",
                "sbg:createdOn": 1450911289,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911289,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911290,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911290,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1463403276,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1469015151,
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "Link fastq_list",
                        "sbg:modifiedBy": "markop"
                    },
                    {
                        "sbg:modifiedOn": 1472059795,
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Added support for single file.",
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "python pair_fastqs_by_metadata.py --fastq_list /asda/dsa/sda/sda/fasta1.fastq,/asda/dsa/sda/sda/fasta2.fastq,/asda/dsa/sda/sda/fasta3.fastq,/asda/dsa/sda/sda/fasta4.fastq --in_metafile job.json --out_metafile cwl.output.json",
                "sbg:revisionNotes": "Added support for single file.",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "d41a0837ab81",
                        "dockerPull": "images.sbgenomics.com/djordje_klisic/sbg-pair-fastqs-by-metadata:1.0"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1024
                    }
                ],
                "outputs": [
                    {
                        "id": "#tuple_list",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ]
                    }
                ],
                "sbg:license": "Apache License 2.0",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/sbg-pair-fastqs-by-metadata/7",
                "temporaryFailCodes": [],
                "x": 752.3333843019286,
                "sbg:contributors": [
                    "vladimirk",
                    "bix-demo",
                    "markop"
                ],
                "sbg:modifiedOn": 1472059795,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "requirements": [
                    {
                        "class": "CreateFileRequirement",
                        "fileDef": [
                            {
                                "fileContent": "import functools\nimport json\nimport itertools\nimport docopt\nimport types\nUSAGE = \"\"\"\n    Usage:\n    \tsbg_pair_fastqs_by_metadata.py --fastq_list FILE... --in_metafile FILE --out_metafile FILE [options]\n\n    Description:\n        Tool accepts list of FATSQ files for one sample as the input and groups them into pairs\n        (two files for each paired end). This grouping is done using metadata values that are creating\n        unique combination for each pair or of FASTQ files. Metadata that fields that are uniquely defining\n        one FASTQ pair are Sample ID, Library ID, Platform Unit ID and File Segment Number. Listed order of metadata fields is also\n        representing their hierarchy in the metadata structure. Not all of these four metadata fields are required,\n        but the present set has to be sufficient to create unique combinations for each pair of FASTQ files.\n\n    Options:\n\n        --help                                Show help dialog.\n\n        --version                             Tool version.\n\n        --fatsq_list FILE...                  List of the FASTQ files with properly set metadata fileds.\n\n        --in_metafile FILE                    File from which necessary metadata information will be extracted.\n                                              Expected value for the SBG platfrom is job.json. [Default: job.json]\n\n        --out_metafile FILE                   File into which necessary file structure is going to be written.\n                                              Expected value for the SBG platform is cwl.output.json.\n                                              [Default: cwl.output.json]\n\n\n\"\"\"\n\ndef make_rg_id(metadata_key, input1):\n\n    input_meta = input1.values()[0]\n\n    S = '__!__'\n    rg = list()\n    for key in ['sample_group', 'sample_id', 'library_id', 'platform_unit_id']:\n        if key in input_meta:\n            rg.append(input_meta[key])\n        else:\n            rg.append('')\n    if 'file_segment_number' in input_meta and input_meta['file_segment_number'] is not None:\n        rg.append(str(input_meta['file_segment_number']))\n    else:\n        rg.append('')\n\n    rg_map = {\n        'sample_id': rg[:2],\n        'library_id': rg[:3],\n        'platform_unit_id': rg[:4],\n        'file_segment_number': rg[:5],\n    }\n\n    return S.join(rg_map[metadata_key]) if metadata_key in rg_map else getattr(input_meta, metadata_key)\n\n\ndef group_inputs(inp):\n\n    metadata_key = 'file_segment_number'\n    if str(metadata_key) == 'None':\n        return {'': [f for f in inp]}\n    if metadata_key == 'file':\n        return {f: [f] for f in inp}\n    key_getter = functools.partial(make_rg_id, metadata_key)\n    print inp\n    files = sorted([x for x in inp], key=key_getter)\n    tuple_list_temp = [[f for f in val] for key, val in itertools.groupby(files, key_getter)]\n    tuple_list=list()\n    for elem in tuple_list_temp:\n        for key in elem[0].keys():\n            if len(files) != 1:\n                if elem[0][key]['paired_end'] == \"2\":\n                    tuple_list.append([str(elem[1].keys()[0]), str(elem[0].keys()[0])])\n                else:\n                    tuple_list.append([str(elem[0].keys()[0]), str(elem[1].keys()[0])])\n            else:\n                    tuple_list.append([str(elem[0].keys()[0])])\n\n    print tuple_list\n    return tuple_list\n\ndef main():\n\n    args = docopt.docopt(USAGE, version = 1.0)\n\n    job_json = args[\"--in_metafile\"]\n    job_json_file = open(job_json)\n    job_json_str = job_json_file.read()\n    job_json_dict = json.loads(job_json_str)\n    fastq_list = job_json_dict['inputs'][\"fastq_list\"]\n    if isinstance(fastq_list, list):\n        fastq_list = job_json_dict['inputs'][\"fastq_list\"]\n    else:\n        fastq_list = list()\n        fastq_list.append(job_json_dict['inputs'][\"fastq_list\"])\n    file_list = [{elem['path'] : elem['metadata']} for elem in fastq_list]\n    tuple_list = group_inputs(file_list)\n\n    for elem in tuple_list:\n        for i in range(0,len(elem)):\n            elem[i] = {\"class\": \"File\", \"path\": elem[i]}\n\n\n    tuple_list_dict = {\"tuple_list\": tuple_list}\n    with open(args[\"--out_metafile\"], 'w') as p:\n        json.dump(tuple_list_dict, p)\n\nif __name__ == '__main__':\n    main()",
                                "filename": "pair_fastqs_by_metadata.py"
                            }
                        ]
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/sbg-pair-fastqs-by-metadata/7",
                "baseCommand": [
                    "python",
                    "pair_fastqs_by_metadata.py"
                ],
                "sbg:toolkit": "SBGTools",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://cgc.sbgenomics.com/u/stefanristeski/group-fastqs/apps/#sbg-pair-fastqs-by-metadata/9"
                    }
                ],
                "sbg:latestRevision": 5,
                "description": "Tool accepts list of FASTQ files for one sample as the input and groups them into pairs  (two files for each paired end). This grouping is done using metadata values that are creating unique combination for each pair or of FASTQ files. Metadata that fields that are uniquely defining one FASTQ pair are Sample ID, Library ID, Platform unit ID and File segment number. Listed order of metadata fields is also representing their hierarchy in the metadata structure. Not all of these four metadata fields are required, but the present set has to be sufficient to create unique combinations for each pair of FASTQ files.",
                "sbg:revision": 5,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "fastq_list": [
                            {
                                "size": 0,
                                "path": "/asda/dsa/sda/sda/fasta1.fastq",
                                "secondaryFiles": [],
                                "class": "File"
                            },
                            {
                                "path": "/asda/dsa/sda/sda/fasta2.fastq"
                            },
                            {
                                "path": "/asda/dsa/sda/sda/fasta3.fastq"
                            },
                            {
                                "path": "/asda/dsa/sda/sda/fasta4.fastq"
                            }
                        ]
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 1024
                    }
                },
                "class": "CommandLineTool",
                "stdin": ""
            },
            "inputs": [
                {
                    "id": "#SBG_Pair_FASTQs_by_Metadata.fastq_list",
                    "source": [
                        "#SBG_FASTQ_Quality_Adjuster.result"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_Pair_FASTQs_by_Metadata.tuple_list"
                }
            ],
            "sbg:x": 752.3333843019286,
            "sbg:y": 256.33335844675776
        },
        {
            "id": "#GATK_BaseRecalibrator",
            "run": {
                "arguments": [
                    {
                        "prefix": "--out",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.recal_data.grp'\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    },
                    {
                        "valueFrom": "--disable_indel_quals",
                        "separate": true
                    },
                    {
                        "prefix": "--plot_pdf_file",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n    read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n    read_namebase = read_name.slice(0, read_name.length-1).join('.')\n    return read_namebase + '.pdf'\n\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    }
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Broad Institute",
                "y": 408.9413004295544,
                "inputs": [
                    {
                        "sbg:toolDefaultValue": "SILENT",
                        "description": "How strict should we be with validation.",
                        "sbg:category": "GATK General",
                        "label": "Validation Strictness",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "name": "validation_strictness",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-S"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:category": "GATK General",
                        "label": "Use Original Qualities",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-OQ"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:category": "GATK General",
                        "label": "Use Legacy Downsampler",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-use_legacy_downsampler"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:category": "GATK General",
                        "label": "Unsafe",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "name": "unsafe",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-U"
                    },
                    {
                        "sbg:toolDefaultValue": "3",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:category": "Execution",
                        "label": "Threads per job",
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:category": "GATK General",
                        "label": "Tag",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-tag"
                    },
                    {
                        "sbg:toolDefaultValue": "SET_Q_ZERO",
                        "description": "How should we recalibrate solid bases in which the reference was inserted? Options = DO_NOTHING, SET_Q_ZERO, SET_Q_ZERO_BASE_N, or REMOVE_REF_BIAS.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Solid Recal Mode",
                        "inputBinding": {
                            "prefix": "--solid_recal_mode",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#solid_recal_mode",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "DO_NOTHING",
                                    "SET_Q_ZERO",
                                    "SET_Q_ZERO_BASE_N",
                                    "REMOVE_REF_BIAS"
                                ],
                                "name": "solid_recal_mode",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-sMode"
                    },
                    {
                        "sbg:toolDefaultValue": "THROW_EXCEPTION",
                        "description": "Defines the behavior of the recalibrator when it encounters no calls in the color space. Options = THROW_EXCEPTION, LEAVE_READ_UNRECALIBRATED, or PURGE_READ.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Solid Nocall Strategy",
                        "inputBinding": {
                            "prefix": "--solid_nocall_strategy",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#solid_nocall_strategy",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "THROW_EXCEPTION",
                                    "LEAVE_READ_UNRECALIBRATED",
                                    "PURGE_READ"
                                ],
                                "name": "solid_nocall_strategy",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If specified, allows the recalibrator to be used without a dbsnp rod. Very unsafe and for expert users only.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Run Without Dbsnp Potentially Ruining Quality",
                        "inputBinding": {
                            "prefix": "-run_without_dbsnp_potentially_ruining_quality",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#run_without_dbsnp_potentially_ruining_quality",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Remove Program Records",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-rpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Reference Genome in FASTA format.",
                        "sbg:fileTypes": "FASTA, FA",
                        "required": true,
                        "label": "Reference Genome",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-R"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Read sequences in BAM format.",
                        "sbg:fileTypes": "SAM, BAM",
                        "required": true,
                        "label": "Read sequences",
                        "inputBinding": {
                            "prefix": "--input_file",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reads",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-I"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:category": "GATK General",
                        "label": "Read Group Black List",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rgbl"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:category": "GATK General",
                        "label": "Read Filter",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "name": "read_filter",
                                    "type": "enum"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rf"
                    },
                    {
                        "sbg:toolDefaultValue": "16",
                        "description": "Number of distinct quality scores in the quantized output.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Quantizing Levels",
                        "inputBinding": {
                            "prefix": "--quantizing_levels",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#quantizing_levels",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-ql"
                    },
                    {
                        "sbg:toolDefaultValue": "6",
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Preserve Qscores Less Than",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-preserveQ"
                    },
                    {
                        "sbg:toolDefaultValue": "STANDARD",
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:category": "GATK General",
                        "label": "Phone Home",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "name": "phone_home",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-et"
                    },
                    {
                        "sbg:toolDefaultValue": "STRICT",
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree Validation Type",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "name": "pedigree_validation_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-pedValidationType"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Pedigree string for samples.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree String",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-pedString"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:category": "GATK General",
                        "label": "Non Deterministic Random Seed",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-ndrs"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Do not use the standard set of covariates, but rather just the ones listed using the -cov argument. Cannot be used if grouped by interval.",
                        "sbg:category": "Base Recalibrator",
                        "label": "No Standard Covs",
                        "inputBinding": {
                            "prefix": "--no_standard_covs",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#no_standard_covs",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-noStandard"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "Default quality for the base mismatches covariate.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Mismatches Default Quality",
                        "inputBinding": {
                            "prefix": "--mismatches_default_quality",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#mismatches_default_quality",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-msdq"
                    },
                    {
                        "sbg:toolDefaultValue": "2",
                        "description": "Size of the k-mer context to be used for base mismatches.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Mismatches Context Size",
                        "inputBinding": {
                            "prefix": "--mismatches_context_size",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#mismatches_context_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-mcs"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "sbg:category": "Execution",
                        "label": "Memory per job",
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "sbg:category": "Execution",
                        "label": "Memory overhead per job",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "500",
                        "description": "The maximum cycle value permitted for the Cycle covariate.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Maximum Cycle Value",
                        "inputBinding": {
                            "prefix": "--maximum_cycle_value",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#maximum_cycle_value",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxCycle"
                    },
                    {
                        "sbg:toolDefaultValue": "MINUTES",
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime Units",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "name": "max_runtime_units",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-maxRuntimeUnits"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxRuntime"
                    },
                    {
                        "sbg:toolDefaultValue": "2",
                        "description": "Minimum quality for the bases in the tail of the reads to be considered.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Low Quality Tail",
                        "inputBinding": {
                            "prefix": "--low_quality_tail",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#low_quality_tail",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-lqt"
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "Input Files",
                        "description": "A database of known polymorphic sites to skip over in the recalibration algorithm.",
                        "sbg:fileTypes": "VCF, BED, TXT",
                        "required": false,
                        "label": "Known Sites",
                        "inputBinding": {
                            "prefix": "--knownSites",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#known_sites",
                        "type": [
                            "null",
                            {
                                "name": "known_sites",
                                "items": "File",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Keep Program Records",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-kpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file. Cannot be used if grouped by interval. .",
                        "sbg:fileTypes": "TXT,BED,VCF,INTERVALS",
                        "required": false,
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:toolDefaultValue": "sample",
                        "required": true,
                        "label": "Intervals",
                        "sbg:includeInPorts": true,
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals",
                        "type": [
                            "string"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "UNION",
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:category": "GATK General",
                        "label": "Interval Set Rule",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-isr"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:category": "GATK General",
                        "label": "Interval Padding",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-ip"
                    },
                    {
                        "sbg:toolDefaultValue": "ALL",
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:category": "GATK General",
                        "label": "Interval Merging",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-im"
                    },
                    {
                        "sbg:toolDefaultValue": "45",
                        "description": "Default quality for the base insertions covariate.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Insertions Default Quality",
                        "inputBinding": {
                            "prefix": "--insertions_default_quality",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#insertions_default_quality",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-idq"
                    },
                    {
                        "sbg:toolDefaultValue": "3",
                        "description": "Size of the k-mer context to be used for base insertions and deletions.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Indels Context Size",
                        "inputBinding": {
                            "prefix": "--indels_context_size",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#indels_context_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-ics"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "required": false,
                        "label": "Gatk key",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-K"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Fix Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-fixMisencodedQuals"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Exclude Intervals",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-XL"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Emit Original Quals",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-EOQ"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:category": "GATK General",
                        "label": "Downsampling Type",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "name": "downsampling_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-dt"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Fraction",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-dfrac"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Coverage",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-dcov"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:category": "GATK General",
                        "label": "Disable Randomization",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "True",
                        "description": "Disable indel quality recalibration. Must be set to true in GATK Lite.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Disable indel quals",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "45",
                        "description": "Default quality for the base deletions covariate.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Deletions Default Quality",
                        "inputBinding": {
                            "prefix": "--deletions_default_quality",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#deletions_default_quality",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-ddq"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Default Base Qualities",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-DBQ"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "description": "Number of CPU per job.",
                        "sbg:category": "Execution",
                        "label": "CPU per job",
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "One or more covariates to be used in the recalibration. Can be specified multiple times.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Covariate",
                        "inputBinding": {
                            "prefix": "--covariate",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#covariate",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "CycleCovariate",
                                        "ReadGroupCovariate",
                                        "ContextCovariate",
                                        "RepeatLengthCovariate",
                                        "QualityScoreCovariate"
                                    ],
                                    "name": "covariate",
                                    "type": "enum"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-cov"
                    },
                    {
                        "sbg:toolDefaultValue": "40.0",
                        "description": "BQSR BAQ gap open penalty (Phred Scaled).  Default value is 40.  30 is perhaps better for whole genome call sets.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Bqsr Baq Gap Open Penalty",
                        "inputBinding": {
                            "prefix": "--bqsrBAQGapOpenPenalty",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#bqsr_baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-bqsrBAQGOP"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "The binary tag covariate name if using it.",
                        "sbg:category": "Base Recalibrator",
                        "label": "Binary Tag Name",
                        "inputBinding": {
                            "prefix": "--binary_tag_name",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#binary_tag_name",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-bintag"
                    },
                    {
                        "sbg:toolDefaultValue": "40.0",
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Gap Open Penalty",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-baqGOP"
                    },
                    {
                        "sbg:toolDefaultValue": "OFF",
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Calculation Type",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "name": "baq",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-baq"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:category": "GATK General",
                        "label": "Allow Potentially Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores"
                    }
                ],
                "label": "GATK BaseRecalibrator",
                "sbg:createdOn": 1450911406,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911406,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911409,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911410,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911411,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911412,
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911413,
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1469450580,
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "File extensions for intervals_file corrected.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1471364360,
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "known sites link.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472226104,
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "-L intervals string",
                        "sbg:modifiedBy": "bogdang"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type BaseRecalibrator -nct 3 --reference_sequence /folder/reference.fasta --input_file /folder/my_reads.bam --out my_reads.recal_data.grp  --disable_indel_quals --plot_pdf_file my_reads.pdf",
                "sbg:revisionNotes": "-L intervals string",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "47510cb2da55",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
                            "engine": "#cwl-js-engine"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "label": "Plot",
                        "outputBinding": {
                            "sbg:metadata": {},
                            "glob": "*.pdf"
                        },
                        "sbg:fileTypes": "PDF",
                        "id": "#plot_pdf",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "description": "The output recalibration table file to create.",
                        "sbg:fileTypes": "GRP",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#reads",
                            "sbg:metadata": {},
                            "glob": "*.recal_data.grp"
                        },
                        "label": "BQSR Table",
                        "id": "#bqsr",
                        "type": [
                            "File"
                        ]
                    }
                ],
                "sbg:license": "MIT License",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-base-recalibrator/12",
                "temporaryFailCodes": [],
                "description": "Overview\n\nThis tool is designed to work as the first pass in a two-pass processing step. It does a by-locus traversal operating only at sites that are not in dbSNP. We assume that all reference mismatches we see are therefore errors and indicative of poor base quality. This tool generates tables based on various user-specified covariates (such as read group, reported quality score, cycle, and context). Since there is a large amount of data, one can then calculate an empirical probability of error given the particular covariates seen at this site, where p(error) = num mismatches / num observations. The output file is a table (of the several covariate values, num observations, num mismatches, empirical quality score).\n\nNote: ReadGroupCovariate and QualityScoreCovariate are required covariates and will be added regardless of whether or not they were specified.\n\nInput\nA BAM file containing data that needs to be recalibrated.\nA database of known polymorphic sites to mask out.\n\nOutput\nA GATKReport file with many tables:\nThe list of arguments\nThe quantized qualities table\nThe recalibration table by read group\nThe recalibration table by quality score\nThe recalibration table for all the optional covariates\nThe GATKReport table format is intended to be easy to read by both humans and computer languages (especially R). Check out the documentation of the GATKReport (in the FAQs) to learn how to manipulate this table.\n\nUsage example\n java -jar GenomeAnalysisTK.jar \\\n   -T BaseRecalibrator \\\n   -R reference.fasta \\\n   -I my_reads.bam \\\n   -knownSites latest_dbsnp.vcf \\\n   -o recal_data.table\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:categories": [
                    "Plotting-and-Rendering",
                    "SAM/BAM-Processing"
                ],
                "sbg:modifiedOn": 1472226104,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "bogdang",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_bqsr_BaseRecalibrator.php"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/gatk-2-3-9-lite-base-recalibrator/12",
                "baseCommand": [
                    "java",
                    {
                        "class": "Expression",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "BaseRecalibrator",
                    {
                        "class": "Expression",
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nct '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nct '.concat(3)\n  }\n}",
                        "engine": "#cwl-js-engine"
                    }
                ],
                "sbg:toolkit": "GATK",
                "stdin": "",
                "sbg:latestRevision": 8,
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:revision": 8,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "cpu_per_job": null,
                        "intervals": "20",
                        "known_sites": [
                            {
                                "path": "/folder/latest_dbsnp.vcf"
                            }
                        ],
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "reads": [
                            {
                                "size": 0,
                                "path": "/folder/my_reads.bam",
                                "secondaryFiles": [],
                                "class": "File"
                            }
                        ],
                        "memory_overhead_per_job": 0
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 2048
                    }
                },
                "x": 1571.1768614653809,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "vladimirk",
                    "bix-demo",
                    "bogdang"
                ]
            },
            "inputs": [
                {
                    "id": "#GATK_BaseRecalibrator.validation_strictness"
                },
                {
                    "id": "#GATK_BaseRecalibrator.use_original_qualities"
                },
                {
                    "id": "#GATK_BaseRecalibrator.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_BaseRecalibrator.unsafe"
                },
                {
                    "id": "#GATK_BaseRecalibrator.threads_per_job",
                    "default": 30
                },
                {
                    "id": "#GATK_BaseRecalibrator.tag"
                },
                {
                    "id": "#GATK_BaseRecalibrator.solid_recal_mode"
                },
                {
                    "id": "#GATK_BaseRecalibrator.solid_nocall_strategy"
                },
                {
                    "id": "#GATK_BaseRecalibrator.run_without_dbsnp_potentially_ruining_quality"
                },
                {
                    "id": "#GATK_BaseRecalibrator.remove_program_records"
                },
                {
                    "id": "#GATK_BaseRecalibrator.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.reads",
                    "source": [
                        "#GATK_IndelRealigner.realigned_bam_file"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.read_group_black_list"
                },
                {
                    "id": "#GATK_BaseRecalibrator.read_filter"
                },
                {
                    "id": "#GATK_BaseRecalibrator.quantizing_levels"
                },
                {
                    "id": "#GATK_BaseRecalibrator.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_BaseRecalibrator.phone_home"
                },
                {
                    "id": "#GATK_BaseRecalibrator.pedigree_validation_type"
                },
                {
                    "id": "#GATK_BaseRecalibrator.pedigree_string"
                },
                {
                    "id": "#GATK_BaseRecalibrator.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_BaseRecalibrator.no_standard_covs"
                },
                {
                    "id": "#GATK_BaseRecalibrator.mismatches_default_quality"
                },
                {
                    "id": "#GATK_BaseRecalibrator.mismatches_context_size"
                },
                {
                    "id": "#GATK_BaseRecalibrator.memory_per_job",
                    "default": 50000
                },
                {
                    "id": "#GATK_BaseRecalibrator.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_BaseRecalibrator.maximum_cycle_value"
                },
                {
                    "id": "#GATK_BaseRecalibrator.max_runtime_units"
                },
                {
                    "id": "#GATK_BaseRecalibrator.max_runtime"
                },
                {
                    "id": "#GATK_BaseRecalibrator.low_quality_tail"
                },
                {
                    "id": "#GATK_BaseRecalibrator.known_sites",
                    "source": [
                        "#known_sites_1"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.keep_program_records"
                },
                {
                    "id": "#GATK_BaseRecalibrator.intervals_file"
                },
                {
                    "id": "#GATK_BaseRecalibrator.intervals",
                    "source": [
                        "#bqsr_intervals"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.interval_set_rule"
                },
                {
                    "id": "#GATK_BaseRecalibrator.interval_padding"
                },
                {
                    "id": "#GATK_BaseRecalibrator.interval_merging"
                },
                {
                    "id": "#GATK_BaseRecalibrator.insertions_default_quality"
                },
                {
                    "id": "#GATK_BaseRecalibrator.indels_context_size"
                },
                {
                    "id": "#GATK_BaseRecalibrator.gatk_key"
                },
                {
                    "id": "#GATK_BaseRecalibrator.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_BaseRecalibrator.exclude_intervals"
                },
                {
                    "id": "#GATK_BaseRecalibrator.emit_original_quals"
                },
                {
                    "id": "#GATK_BaseRecalibrator.downsampling_type"
                },
                {
                    "id": "#GATK_BaseRecalibrator.downsample_to_fraction"
                },
                {
                    "id": "#GATK_BaseRecalibrator.downsample_to_coverage"
                },
                {
                    "id": "#GATK_BaseRecalibrator.disable_radnomization"
                },
                {
                    "id": "#GATK_BaseRecalibrator.disable_indel_quals"
                },
                {
                    "id": "#GATK_BaseRecalibrator.deletions_default_quality"
                },
                {
                    "id": "#GATK_BaseRecalibrator.default_base_qualities"
                },
                {
                    "id": "#GATK_BaseRecalibrator.cpu_per_job",
                    "default": 30
                },
                {
                    "id": "#GATK_BaseRecalibrator.covariate"
                },
                {
                    "id": "#GATK_BaseRecalibrator.bqsr_baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_BaseRecalibrator.binary_tag_name"
                },
                {
                    "id": "#GATK_BaseRecalibrator.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_BaseRecalibrator.baq"
                },
                {
                    "id": "#GATK_BaseRecalibrator.allow_potentailly_misencoded_quals"
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_BaseRecalibrator.plot_pdf"
                },
                {
                    "id": "#GATK_BaseRecalibrator.bqsr"
                }
            ],
            "sbg:x": 1571.1768614653809,
            "sbg:y": 408.9413004295544
        },
        {
            "id": "#SnpEff",
            "run": {
                "arguments": [
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\t\n  filename = $job.inputs.variants_file.path\n  basename = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  if($job.inputs.output_format === \"txt\")\n  {\n    name = basename.concat(\".snpEff_annotated.txt\")\n  }\n  else if ($job.inputs.output_format === \"bed\" || $job.inputs.output_format === \"bedAnn\")\n  {\n    name = basename.concat(\".snpEff_annotated.bed\")\n  }\n  else\n  {\n    name = basename.concat(\".snpEff_annotated.vcf\")\n  }\n  return '> ' + name\n}\n",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true,
                        "position": 5000
                    },
                    {
                        "valueFrom": "-nodownload",
                        "separate": true,
                        "position": 0
                    },
                    {
                        "valueFrom": "-noLog",
                        "separate": true,
                        "position": 0
                    }
                ],
                "sbg:project": "vladimirk/snpeff-4-2-demo",
                "sbg:createdBy": "vladimirk",
                "sbg:toolAuthor": "Pablo Cingolani/Broad Institue",
                "y": 269.4271676577653,
                "inputs": [
                    {
                        "sbg:category": "File type inputs",
                        "description": "Input variants file.",
                        "sbg:fileTypes": "VCF, TXT, PILEUP, BED",
                        "required": true,
                        "label": "Input variants file",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "position": 2001
                        },
                        "id": "#variants_file",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "description": "Set upstream downstream interval length (in bases).",
                        "sbg:category": "Database optins",
                        "label": "Upstream downstream interval length",
                        "inputBinding": {
                            "prefix": "-upDownStreamLen",
                            "separate": true,
                            "position": 490,
                            "sbg:cmdInclude": true
                        },
                        "id": "#up_down_stream_len",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "description": "RAM requirement for the java process execution [Gb].",
                        "sbg:category": "Other input types",
                        "label": "Java Xmx%m requirement [Gb]",
                        "id": "#total_memory",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "description": "Use multiple threads (implies '-noStats'). Default: False.",
                        "sbg:category": "Other input types",
                        "label": "Use multiple threads (implies '-noStats')",
                        "inputBinding": {
                            "prefix": "-t",
                            "separate": true,
                            "position": 280,
                            "sbg:cmdInclude": true
                        },
                        "id": "#threads",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "description": "Only use 'validated' transcripts (i.e. sequence has been checked). Default: false.",
                        "sbg:category": "Database optins",
                        "label": "Only use validated transcripts",
                        "inputBinding": {
                            "prefix": "-strict",
                            "separate": true,
                            "position": 480,
                            "sbg:cmdInclude": true
                        },
                        "id": "#strict",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "snpEff_summary.html",
                        "description": "Name of stats file (summary).",
                        "sbg:category": "Other input types",
                        "label": "Name of stats file (summary)",
                        "inputBinding": {
                            "prefix": "-stats",
                            "separate": true,
                            "position": 60,
                            "sbg:cmdInclude": true
                        },
                        "id": "#stats",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-s"
                    },
                    {
                        "sbg:toolDefaultValue": "2",
                        "description": "Set size for splice sites (donor and acceptor) in bases.",
                        "sbg:category": "Other input types",
                        "label": "Set size for splice sites (donor and acceptor) in bases",
                        "inputBinding": {
                            "prefix": "--spliceSiteSize",
                            "separate": true,
                            "position": 430,
                            "sbg:cmdInclude": true
                        },
                        "id": "#splicesitesize",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-ss"
                    },
                    {
                        "sbg:toolDefaultValue": "3",
                        "description": "Set size for splice site region within exons. Default: 3 bases.",
                        "sbg:category": "Database options",
                        "label": "Set size for splice site region within exons",
                        "inputBinding": {
                            "prefix": "-spliceRegionExonSize",
                            "separate": true,
                            "position": 440,
                            "sbg:cmdInclude": true
                        },
                        "id": "#splice_region_exons_size",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "description": "Use Sequence Ontology terms. Default: false.",
                        "sbg:category": "Annotations options",
                        "label": "Use Sequence Ontology terms",
                        "inputBinding": {
                            "prefix": "-sequenceOntology",
                            "separate": true,
                            "position": 250,
                            "sbg:cmdInclude": true
                        },
                        "id": "#sequenceontology",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Regulation track to use (this option can be used add several times).",
                        "sbg:category": "Other input types",
                        "label": "Regulation track to use (this option can be used add several times)",
                        "inputBinding": {
                            "prefix": "-reg",
                            "itemSeparator": null,
                            "separate": true,
                            "position": 420,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reg",
                        "type": [
                            "null",
                            {
                                "name": "reg",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "vcf",
                        "description": "Ouput format. Possible values: {txt, vcf, gatk, bed, bedAnn}.",
                        "sbg:category": "Other input types",
                        "label": "Ouput format",
                        "inputBinding": {
                            "prefix": "-o",
                            "separate": true,
                            "position": 50,
                            "sbg:cmdInclude": true
                        },
                        "id": "#output_format",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "txt",
                                    "vcf",
                                    "gatk",
                                    "bed",
                                    "bedAnn"
                                ],
                                "name": "output_format",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "description": "Only use regulation tracks.",
                        "sbg:category": "Other input types",
                        "label": "Only use regulation tracks",
                        "inputBinding": {
                            "prefix": "--onlyReg",
                            "separate": true,
                            "position": 400,
                            "sbg:cmdInclude": true
                        },
                        "id": "#onlyreg",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "description": "Only use protein coding transcripts. Default: false.",
                        "sbg:category": "Database optins",
                        "label": "Only protein",
                        "inputBinding": {
                            "prefix": "-onlyProtein",
                            "separate": true,
                            "position": 410,
                            "sbg:cmdInclude": true
                        },
                        "id": "#only_protein",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "description": "Add OICR tag in VCF file. Default: false.",
                        "sbg:category": "Annotations options",
                        "label": "Add OICR tag in VCF file",
                        "inputBinding": {
                            "prefix": "-oicr",
                            "separate": true,
                            "position": 240,
                            "sbg:cmdInclude": true
                        },
                        "id": "#oicr",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Do not create stats (summary) file.",
                        "sbg:category": "Other input types",
                        "label": "Do not create stats (summary) file",
                        "inputBinding": {
                            "prefix": "-noStats",
                            "separate": true,
                            "position": 70,
                            "sbg:cmdInclude": true
                        },
                        "id": "#nostats",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes.",
                        "sbg:category": "Results filter options",
                        "label": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes",
                        "inputBinding": {
                            "prefix": "-no-utr",
                            "separate": true,
                            "position": 130,
                            "sbg:cmdInclude": true
                        },
                        "id": "#no_utr",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Do not show UPSTREAM changes.",
                        "sbg:category": "Results filter options",
                        "label": "Do not show UPSTREAM changes",
                        "inputBinding": {
                            "prefix": "-no-upstream",
                            "separate": true,
                            "position": 120,
                            "sbg:cmdInclude": true
                        },
                        "id": "#no_upstream",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:toolDefaultValue": "False",
                        "description": "Do not shift variants according to HGVS notation (most 3prime end).",
                        "sbg:category": "Annotations options",
                        "label": "Do not shift variants according to HGVS",
                        "inputBinding": {
                            "prefix": "-noShiftHgvs",
                            "separate": true,
                            "position": 230,
                            "sbg:cmdInclude": true
                        },
                        "id": "#no_shift_hgvs",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "description": "Disable NextProt annotations.",
                        "sbg:category": "Database options",
                        "label": "Disable NextProt annotations",
                        "inputBinding": {
                            "prefix": "-noNextProt",
                            "separate": true,
                            "position": 390,
                            "sbg:cmdInclude": true
                        },
                        "id": "#no_next_prot",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "description": "Disable motif annotations.",
                        "sbg:category": "Database options",
                        "label": "Disable motif annotations",
                        "inputBinding": {
                            "prefix": "-noMotif",
                            "separate": true,
                            "position": 380,
                            "sbg:cmdInclude": true
                        },
                        "id": "#no_motif",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Do not add LOF and NMD annotations.",
                        "sbg:category": "Annotations options",
                        "label": "Do not add LOF and NMD annotations",
                        "inputBinding": {
                            "prefix": "-noLof",
                            "separate": true,
                            "position": 220,
                            "sbg:cmdInclude": true
                        },
                        "id": "#no_lof",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Do not show INTRON changes.",
                        "sbg:category": "Results filter options",
                        "label": "Do not show INTRON changes",
                        "inputBinding": {
                            "prefix": "-no-intron",
                            "separate": true,
                            "position": 110,
                            "sbg:cmdInclude": true
                        },
                        "id": "#no_intron",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Do not show INTERGENIC changes.",
                        "sbg:category": "Results filter options",
                        "label": "Do not show INTERGENIC changes",
                        "inputBinding": {
                            "prefix": "-no-intergenic",
                            "separate": true,
                            "position": 100,
                            "sbg:cmdInclude": true
                        },
                        "id": "#no_intergenic",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "description": "Disable interaction annotations. Default: false.",
                        "sbg:category": "Database options",
                        "label": "Disable interaction annotations",
                        "inputBinding": {
                            "prefix": "-noInteraction",
                            "separate": true,
                            "position": 370,
                            "sbg:cmdInclude": true
                        },
                        "id": "#no_interaction",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "description": "Do not add HGVS annotations.",
                        "sbg:category": "Annotations options",
                        "label": "Do not add HGVS annotations",
                        "inputBinding": {
                            "prefix": "-noHgvs",
                            "separate": true,
                            "position": 210,
                            "sbg:cmdInclude": true
                        },
                        "id": "#no_hgvs",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "description": "Do not load any genomic database (e.g. annotate using custom files).",
                        "sbg:category": "Database options",
                        "label": "Do not load any genomic database",
                        "inputBinding": {
                            "prefix": "-noGenome",
                            "separate": true,
                            "position": 360,
                            "sbg:cmdInclude": true
                        },
                        "id": "#no_genome",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Do not show DOWNSTREAM changes.",
                        "sbg:category": "Results filter options",
                        "label": "Do not show DOWNSTREAM changes",
                        "inputBinding": {
                            "prefix": "-no-downstream",
                            "separate": true,
                            "position": 90,
                            "sbg:cmdInclude": true
                        },
                        "id": "#no_downstream",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Annotate using NextProt (requires NextProt database).",
                        "sbg:category": "Other input types",
                        "label": "Annotate using NextProt (requires NextProt database)",
                        "inputBinding": {
                            "prefix": "-nextProt",
                            "separate": true,
                            "position": 350,
                            "sbg:cmdInclude": true
                        },
                        "id": "#nextprot",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Annotate using motifs (requires Motif database).",
                        "sbg:category": "Other input types",
                        "label": "Annotate using motifs (requires Motif database)",
                        "inputBinding": {
                            "prefix": "--motif",
                            "separate": true,
                            "position": 340,
                            "sbg:cmdInclude": true
                        },
                        "id": "#motif",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "description": "Only use transcripts having Transcript Support Level lower than <TSL_number>.",
                        "sbg:category": "Database options",
                        "label": "Max TSL",
                        "inputBinding": {
                            "prefix": "-maxTSL",
                            "separate": true,
                            "position": 330,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_tsl",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "Other input types",
                        "description": "Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).",
                        "sbg:fileTypes": "interval",
                        "required": false,
                        "label": "Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times)",
                        "inputBinding": {
                            "prefix": "-interval",
                            "separate": true,
                            "position": 320,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "TRUE",
                        "description": "Annotate using inteactions (requires interaciton database). Default: true.",
                        "sbg:category": "Database options",
                        "label": "Annotate using interactions",
                        "inputBinding": {
                            "prefix": "-interaction",
                            "separate": true,
                            "position": 310,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interaction",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "vcf",
                        "description": "Input format. Possible values: {vcf, txt, pileup, bed}. [Default: vcf].",
                        "sbg:category": "Other input types",
                        "label": "Input format",
                        "inputBinding": {
                            "prefix": "-i",
                            "separate": true,
                            "position": 40,
                            "sbg:cmdInclude": true
                        },
                        "id": "#input_format",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "vcf",
                                    " txt",
                                    " pileup",
                                    " bed"
                                ],
                                "name": "input_format",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "description": "Use transcript ID in HGVS notation. Default: false.",
                        "sbg:category": "Configuration",
                        "label": "Use transcript ID in HGVS",
                        "inputBinding": {
                            "prefix": "-hgvsTrId",
                            "separate": true,
                            "position": 190,
                            "sbg:cmdInclude": true
                        },
                        "id": "#hgvs_tr_id",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "description": "Use one letter Amino acid codes in HGVS notation. Default: false.",
                        "sbg:category": "Annotations options",
                        "label": "Use one letter Amino acid codes in HGVS",
                        "inputBinding": {
                            "prefix": "-hgvs1LetterAa",
                            "separate": true,
                            "position": 180,
                            "sbg:cmdInclude": true
                        },
                        "id": "#hgvs_1_letter",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "description": "Use gene ID instead of gene name (VCF output). Default: false.",
                        "sbg:category": "Annotations options",
                        "label": "Use gene ID instead of gene name (VCF output)",
                        "inputBinding": {
                            "prefix": "-geneId",
                            "separate": true,
                            "position": 170,
                            "sbg:cmdInclude": true
                        },
                        "id": "#geneid",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Use 'EFF' field compatible with older versions (instead of 'ANN').",
                        "sbg:category": "Annotations options",
                        "label": "Use EFF field",
                        "inputBinding": {
                            "prefix": "-formatEff",
                            "separate": true,
                            "position": 160,
                            "sbg:cmdInclude": true
                        },
                        "id": "#format_eff",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Results filter options",
                        "description": "Only analyze changes that intersect with the intervals specified in this file.",
                        "sbg:fileTypes": "interval",
                        "required": false,
                        "label": "Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)",
                        "inputBinding": {
                            "prefix": "--filterInterval",
                            "separate": true,
                            "position": 80,
                            "sbg:cmdInclude": true
                        },
                        "id": "#filterinterval",
                        "type": [
                            "null",
                            {
                                "name": "filterinterval",
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-fi"
                    },
                    {
                        "sbg:category": "File type inputs",
                        "description": "SnpEff database file is zip archive that can be downloaded from the SnpEff official site, or using the SnpEff download app.",
                        "sbg:fileTypes": "ZIP",
                        "required": true,
                        "label": "SnpEff database file",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "valueFrom": {
                                "class": "Expression",
                                "script": "{\n  input_database = $job.inputs.database\n  full_name = input_database.path.split('/')[input_database.path.split('/').length-1] \n  name = full_name.slice(0, -4) // Cut .zip extension\n  return name\n}",
                                "engine": "#cwl-js-engine"
                            },
                            "separate": true,
                            "position": 2000
                        },
                        "id": "#database",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "description": "Create CSV summary file instead of HTML.",
                        "sbg:category": "Other input types",
                        "label": "Create CSV summary file instead of HTML",
                        "inputBinding": {
                            "prefix": "-csvStats",
                            "separate": true,
                            "position": 20,
                            "sbg:cmdInclude": true
                        },
                        "id": "#csvstats",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "Generic options",
                        "description": "Specify config file.",
                        "sbg:fileTypes": "config",
                        "required": false,
                        "label": "Configuration file",
                        "inputBinding": {
                            "prefix": "-c",
                            "separate": true,
                            "position": 260,
                            "sbg:cmdInclude": true
                        },
                        "id": "#configuration_file",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "description": "Use old style annotations instead of Sequence Ontology and Hgvs.",
                        "sbg:category": "General options",
                        "label": "Use old style annotations",
                        "inputBinding": {
                            "prefix": "--classic",
                            "separate": true,
                            "position": 10,
                            "sbg:cmdInclude": true
                        },
                        "id": "#classic",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Only use canonical transcripts.",
                        "sbg:category": "Database options",
                        "label": "Only use canonical transcripts",
                        "inputBinding": {
                            "prefix": "-canon",
                            "separate": true,
                            "position": 300,
                            "sbg:cmdInclude": true
                        },
                        "id": "#canon",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Annotations options",
                        "description": "Two column TXT file defining 'original \\t derived' samples.",
                        "sbg:fileTypes": "TXT",
                        "required": false,
                        "label": "Two column TXT file defining 'original and derived' samples",
                        "inputBinding": {
                            "prefix": "-cancerSamples",
                            "separate": true,
                            "position": 150,
                            "sbg:cmdInclude": true
                        },
                        "id": "#cancersamples",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "FALSE",
                        "description": "Perform 'cancer' comparisons (Somatic vs Germline).",
                        "sbg:category": "Annotations options",
                        "label": "Perform 'cancer' comparisons (Somatic vs Germline)",
                        "inputBinding": {
                            "prefix": "-cancer",
                            "separate": true,
                            "position": 140,
                            "sbg:cmdInclude": true
                        },
                        "id": "#cancer",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Add loss of function (LOF) and Nonsense mediated decay (NMD) tags.",
                        "sbg:category": "Other input types",
                        "label": "Add loss of function (LOF) and Nonsense mediated decay (NMD) tags",
                        "inputBinding": {
                            "prefix": "-lof",
                            "separate": true,
                            "position": 200,
                            "sbg:cmdInclude": true
                        },
                        "id": "#add_lof_tag",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "TRUE",
                        "description": "Use HGVS annotations for amino acid sub-field. Default: true.",
                        "sbg:category": "Annotations options",
                        "label": "Use HGVS annotations for amino acid sub-field",
                        "inputBinding": {
                            "prefix": "--hgvs",
                            "separate": true,
                            "position": 170,
                            "sbg:cmdInclude": true
                        },
                        "id": "#add_hgvs_anno",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    }
                ],
                "label": "SnpEff",
                "sbg:createdOn": 1459258963,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1459258963,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1459268644,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1459334075,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1459344734,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1459346778,
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1459349594,
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1459350669,
                        "sbg:revision": 6,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1459352131,
                        "sbg:revision": 7,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1459353590,
                        "sbg:revision": 8,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1460986857,
                        "sbg:revision": 9,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1460989537,
                        "sbg:revision": 10,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1460994055,
                        "sbg:revision": 11,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1461079628,
                        "sbg:revision": 12,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1461145387,
                        "sbg:revision": 13,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1461146419,
                        "sbg:revision": 14,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1461857375,
                        "sbg:revision": 15,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1461857546,
                        "sbg:revision": 16,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1464273953,
                        "sbg:revision": 17,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1464279085,
                        "sbg:revision": 18,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1464625627,
                        "sbg:revision": 19,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1471007312,
                        "sbg:revision": 20,
                        "sbg:revisionNotes": "typos",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472209344,
                        "sbg:revision": 21,
                        "sbg:revisionNotes": "Peer-review comments implemented.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472209772,
                        "sbg:revision": 22,
                        "sbg:revisionNotes": "Peer-review comments and typos implemented.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472212308,
                        "sbg:revision": 23,
                        "sbg:revisionNotes": "typos",
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "unzip -o /path/to/database/GRCh37.75.zip -d /opt/snpEff ; java -Xmx3072M -jar /opt/snpEff/snpEff.jar  -nodownload  -noLog  GRCh37.75  path/to/variance/varinats_file.vcf  > varinats_file.snpEff_annotated.vcf",
                "sbg:revisionNotes": "typos",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "aae3dcb89b53",
                        "dockerPull": "images.sbgenomics.com/vladimirk/snpeff:4.2"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if ($job.inputs.total_memory)\n  {\n    return $job.inputs.total_memory * 1024\n  }\n  \n  else\n  {\n    return 4096\n  }\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "description": "SnpEff Summary in text format.",
                        "sbg:fileTypes": "TXT",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants_file",
                            "glob": "*.txt"
                        },
                        "label": "Summary",
                        "id": "#summary_text",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "description": "SnpEff summary file in HTML or CSV file format.",
                        "sbg:fileTypes": "HTML, CSV",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants_file",
                            "glob": "*.html"
                        },
                        "label": "Summary file",
                        "id": "#summary",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "description": "SnpEff Annotated file.",
                        "sbg:fileTypes": "VCF, TXT, GATK, BED, BEDANN",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#variants_file",
                            "sbg:metadata": {},
                            "glob": {
                                "class": "Expression",
                                "script": "{\t\n  filename = $job.inputs.variants_file.path\n  basename = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  if($job.inputs.output_format === \"txt\")\n  {\n    return basename.concat(\".snpEff_annotated.txt\")\n  }\n  else if ($job.inputs.output_format === \"bed\" || $job.inputs.output_format === \"bedAnn\")\n  {\n    return basename.concat(\".snpEff_annotated.bed\")\n  }\n  else\n  {\n    return basename.concat(\".snpEff_annotated.vcf\")\n  }\n}",
                                "engine": "#cwl-js-engine"
                            }
                        },
                        "label": "SnpEff Annotated file",
                        "id": "#annotated",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "GNU Lesser General Public License v3.0 only",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/snpeff-4-2/36",
                "temporaryFailCodes": [],
                "description": "SnpEff is a variant annotation and effect prediction​ tool. It annotates and predicts the effects of variants on genes, such as amino acid changes.\n\nTypical usage assumes the user chooses inputs that are predicted variants (SNPs, insertions, deletions, and MNPs). This input file is usually the result of a sequencing experiment, and it is usually in variant call format (VCF). SnpEff analyzes the input variants and, in the process, it annotates the variants and calculates the effects they produce on known genes (e.g. amino acid changes). The output file can be in several file formats. The most common format is VCF.\n\nThere is also a command line option to control the amount of RAM in MB [-Xmx%m] for java, which is a custom parameter.\nCommon issues:\n- Name of the snpEff file with database must contain the name that exactly relates to the reference that it is for (e.g. GRCh37.75.zip, hg19.zip).",
                "sbg:categories": [
                    "Annotation",
                    "VCF-Processing"
                ],
                "sbg:modifiedOn": 1472212308,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://snpeff.sourceforge.net/index.html"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/pcingola/SnpEff"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://snpeff.sourceforge.net/SnpEff_manual.html"
                    },
                    {
                        "label": "Download",
                        "id": "http://sourceforge.net/projects/snpeff/files/snpEff_latest_core.zip"
                    },
                    {
                        "label": "Publication",
                        "id": "http://snpeff.sourceforge.net/SnpEff_paper.pdf"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/snpeff-4-2/36",
                "baseCommand": [
                    {
                        "class": "Expression",
                        "script": "{\n  return 'unzip -o ' + $job.inputs.database.path + ' -d /opt/snpEff ;'\n}",
                        "engine": "#cwl-js-engine"
                    },
                    "java",
                    {
                        "class": "Expression",
                        "script": "{\n  //java -Xmx4g path/to/snpEff/snpEff.jar -c path/to/snpEff/snpEff.config GRCh37.75 path/to/snps.vcf\n  if($job.inputs.total_memory){\n    mem_mb = parseInt($job.inputs.total_memory) * 1024\n  \treturn '-Xmx'.concat(mem_mb, 'M')\n  }\n  \treturn '-Xmx4096M'\n}\n\n",
                        "engine": "#cwl-js-engine"
                    },
                    "-jar",
                    "/opt/snpEff/snpEff.jar"
                ],
                "sbg:toolkit": "SnpEff",
                "stdin": "",
                "sbg:latestRevision": 23,
                "sbg:toolkitVersion": "4.2",
                "sbg:revision": 23,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "hgvs_tr_id": false,
                        "no_shift_hgvs": false,
                        "threads": true,
                        "input_format": "vcf",
                        "no_hgvs": false,
                        "max_tsl": null,
                        "database": {
                            "path": "/path/to/database/GRCh37.75.zip",
                            "secondaryFiles": [],
                            "metadata": {}
                        },
                        "csvstats": false,
                        "up_down_stream_len": null,
                        "stats": "",
                        "classic": false,
                        "oicr": false,
                        "nostats": false,
                        "interval": {
                            "size": 0,
                            "path": "/path/to/interval.ext",
                            "secondaryFiles": [],
                            "class": "File"
                        },
                        "no_interaction": false,
                        "no_next_prot": false,
                        "variants_file": {
                            "size": 0,
                            "path": "path/to/variance/varinats_file.vcf",
                            "secondaryFiles": [],
                            "class": "File"
                        },
                        "no_motif": false,
                        "no_lof": false,
                        "interaction": false,
                        "splice_region_exons_size": null,
                        "configuration_file": {
                            "size": 0,
                            "path": null,
                            "secondaryFiles": [],
                            "class": "File"
                        },
                        "format_eff": false,
                        "no_genome": false,
                        "strict": false,
                        "output_format": "vcf",
                        "total_memory": 3,
                        "only_protein": false,
                        "hgvs_1_letter": false
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 3072
                    }
                },
                "x": 3451.667128947061,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "vladimirk"
                ]
            },
            "inputs": [
                {
                    "id": "#SnpEff.variants_file",
                    "source": [
                        "#GATK_ApplyRecalibration_1.vcf"
                    ]
                },
                {
                    "id": "#SnpEff.up_down_stream_len"
                },
                {
                    "id": "#SnpEff.total_memory",
                    "default": 10
                },
                {
                    "id": "#SnpEff.threads",
                    "default": true
                },
                {
                    "id": "#SnpEff.strict"
                },
                {
                    "id": "#SnpEff.stats"
                },
                {
                    "id": "#SnpEff.splicesitesize"
                },
                {
                    "id": "#SnpEff.splice_region_exons_size"
                },
                {
                    "id": "#SnpEff.sequenceontology"
                },
                {
                    "id": "#SnpEff.reg"
                },
                {
                    "id": "#SnpEff.output_format",
                    "default": "vcf"
                },
                {
                    "id": "#SnpEff.onlyreg"
                },
                {
                    "id": "#SnpEff.only_protein"
                },
                {
                    "id": "#SnpEff.oicr"
                },
                {
                    "id": "#SnpEff.nostats"
                },
                {
                    "id": "#SnpEff.no_utr"
                },
                {
                    "id": "#SnpEff.no_upstream"
                },
                {
                    "id": "#SnpEff.no_shift_hgvs"
                },
                {
                    "id": "#SnpEff.no_next_prot"
                },
                {
                    "id": "#SnpEff.no_motif"
                },
                {
                    "id": "#SnpEff.no_lof"
                },
                {
                    "id": "#SnpEff.no_intron"
                },
                {
                    "id": "#SnpEff.no_intergenic"
                },
                {
                    "id": "#SnpEff.no_interaction"
                },
                {
                    "id": "#SnpEff.no_hgvs"
                },
                {
                    "id": "#SnpEff.no_genome"
                },
                {
                    "id": "#SnpEff.no_downstream"
                },
                {
                    "id": "#SnpEff.nextprot"
                },
                {
                    "id": "#SnpEff.motif"
                },
                {
                    "id": "#SnpEff.max_tsl"
                },
                {
                    "id": "#SnpEff.interval"
                },
                {
                    "id": "#SnpEff.interaction"
                },
                {
                    "id": "#SnpEff.input_format"
                },
                {
                    "id": "#SnpEff.hgvs_tr_id"
                },
                {
                    "id": "#SnpEff.hgvs_1_letter"
                },
                {
                    "id": "#SnpEff.geneid"
                },
                {
                    "id": "#SnpEff.format_eff"
                },
                {
                    "id": "#SnpEff.filterinterval"
                },
                {
                    "id": "#SnpEff.database",
                    "source": [
                        "#database_1"
                    ]
                },
                {
                    "id": "#SnpEff.csvstats"
                },
                {
                    "id": "#SnpEff.configuration_file"
                },
                {
                    "id": "#SnpEff.classic"
                },
                {
                    "id": "#SnpEff.canon"
                },
                {
                    "id": "#SnpEff.cancersamples"
                },
                {
                    "id": "#SnpEff.cancer"
                },
                {
                    "id": "#SnpEff.add_lof_tag"
                },
                {
                    "id": "#SnpEff.add_hgvs_anno"
                }
            ],
            "outputs": [
                {
                    "id": "#SnpEff.summary_text"
                },
                {
                    "id": "#SnpEff.summary"
                },
                {
                    "id": "#SnpEff.annotated"
                }
            ],
            "sbg:x": 3451.667128947061,
            "sbg:y": 269.4271676577653
        },
        {
            "id": "#SBG_Prepare_VQSR_Mills",
            "run": {
                "arguments": [],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:createdBy": "djordje_klisic",
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "y": 389.42713929919915,
                "inputs": [
                    {
                        "sbg:category": "",
                        "label": "Truth",
                        "description": "Truth.",
                        "id": "#truth",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Training",
                        "description": "Training.",
                        "id": "#training",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Prior",
                        "description": "Prior.",
                        "id": "#prior",
                        "type": [
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Label",
                        "description": "Label.",
                        "id": "#label",
                        "type": [
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Known",
                        "description": "Known.",
                        "id": "#known",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:stageInput": "link",
                        "description": "Input VCF file for GATK VariantRecalibrator Resources.",
                        "sbg:fileTypes": "VCF",
                        "required": false,
                        "label": "VCF File",
                        "id": "#input_vcf",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "label": "SBG Prepare VQSR Mills",
                "sbg:createdOn": 1461613037,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1461613037,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:modifiedOn": 1461613070,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:modifiedOn": 1471362399,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472512980,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "VCF_input not required.",
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "",
                "sbg:revisionNotes": "VCF_input not required.",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "",
                        "dockerPull": "ubuntu:14.04"
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    }
                ],
                "outputs": [
                    {
                        "label": "Prepared VCF",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_vcf",
                            "sbg:metadata": {
                                "resources": {
                                    "class": "Expression",
                                    "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                                    "engine": "#cwl-js-engine"
                                }
                            },
                            "glob": "*.vcf"
                        },
                        "description": "Prepared VCF file for GATK VariantRecalibrator",
                        "id": "#output_vcf",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "Apache License 2.0",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/11",
                "temporaryFailCodes": [],
                "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:modifiedOn": 1472512980,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/11",
                "baseCommand": [
                    ""
                ],
                "sbg:toolkit": "SBGTools",
                "stdin": "",
                "sbg:latestRevision": 3,
                "sbg:toolkitVersion": "",
                "sbg:revision": 3,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "label": "aaa",
                        "prior": 12,
                        "known": true,
                        "input_vcf": {
                            "path": "vcf"
                        },
                        "truth": true
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 1000
                    }
                },
                "x": 2576.6670919921808,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "vladimirk",
                    "djordje_klisic"
                ]
            },
            "inputs": [
                {
                    "id": "#SBG_Prepare_VQSR_Mills.truth",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_Mills.training",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_Mills.prior",
                    "default": 12
                },
                {
                    "id": "#SBG_Prepare_VQSR_Mills.label",
                    "default": "mills"
                },
                {
                    "id": "#SBG_Prepare_VQSR_Mills.known",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_Mills.input_vcf",
                    "source": [
                        "#input_vcf_3"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_Prepare_VQSR_Mills.output_vcf"
                }
            ],
            "sbg:x": 2576.6670919921808,
            "sbg:y": 389.42713929919915
        },
        {
            "id": "#SBG_Prepare_VQSR_dbSNP",
            "run": {
                "arguments": [],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:createdBy": "djordje_klisic",
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "y": 676.0938190788879,
                "inputs": [
                    {
                        "sbg:category": "",
                        "label": "Truth",
                        "description": "Truth.",
                        "id": "#truth",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Training",
                        "description": "Training.",
                        "id": "#training",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Prior",
                        "description": "Prior.",
                        "id": "#prior",
                        "type": [
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Label",
                        "description": "Label.",
                        "id": "#label",
                        "type": [
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Known",
                        "description": "Known.",
                        "id": "#known",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:stageInput": "link",
                        "description": "Input VCF file for GATK VariantRecalibrator Resources.",
                        "sbg:fileTypes": "VCF",
                        "required": false,
                        "label": "VCF File",
                        "id": "#input_vcf",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "label": "SBG Prepare VQSR dbSNP",
                "sbg:createdOn": 1461613037,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1461613037,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:modifiedOn": 1461613070,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:modifiedOn": 1471362399,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472512980,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "VCF_input not required.",
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "",
                "sbg:revisionNotes": "VCF_input not required.",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "",
                        "dockerPull": "ubuntu:14.04"
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    }
                ],
                "outputs": [
                    {
                        "label": "Prepared VCF",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_vcf",
                            "sbg:metadata": {
                                "resources": {
                                    "class": "Expression",
                                    "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                                    "engine": "#cwl-js-engine"
                                }
                            },
                            "glob": "*.vcf"
                        },
                        "description": "Prepared VCF file for GATK VariantRecalibrator",
                        "id": "#output_vcf",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "Apache License 2.0",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/11",
                "temporaryFailCodes": [],
                "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:modifiedOn": 1472512980,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/11",
                "baseCommand": [
                    ""
                ],
                "sbg:toolkit": "SBGTools",
                "stdin": "",
                "sbg:latestRevision": 3,
                "sbg:toolkitVersion": "",
                "sbg:revision": 3,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "label": "aaa",
                        "prior": 12,
                        "known": true,
                        "input_vcf": {
                            "path": "vcf"
                        },
                        "truth": true
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 1000
                    }
                },
                "x": 1965.0002025365889,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "vladimirk",
                    "djordje_klisic"
                ]
            },
            "inputs": [
                {
                    "id": "#SBG_Prepare_VQSR_dbSNP.truth",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_dbSNP.training",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_dbSNP.prior",
                    "default": 2
                },
                {
                    "id": "#SBG_Prepare_VQSR_dbSNP.label",
                    "default": "dbsnp"
                },
                {
                    "id": "#SBG_Prepare_VQSR_dbSNP.known"
                },
                {
                    "id": "#SBG_Prepare_VQSR_dbSNP.input_vcf",
                    "source": [
                        "#known_sites_1"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_Prepare_VQSR_dbSNP.output_vcf"
                }
            ],
            "sbg:x": 1965.0002025365889,
            "sbg:y": 676.0938190788879
        },
        {
            "id": "#SBG_Prepare_VQSR_1000G",
            "run": {
                "arguments": [],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:createdBy": "djordje_klisic",
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "y": -53.90628526897978,
                "inputs": [
                    {
                        "sbg:category": "",
                        "label": "Truth",
                        "description": "Truth.",
                        "id": "#truth",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Training",
                        "description": "Training.",
                        "id": "#training",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Prior",
                        "description": "Prior.",
                        "id": "#prior",
                        "type": [
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Label",
                        "description": "Label.",
                        "id": "#label",
                        "type": [
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Known",
                        "description": "Known.",
                        "id": "#known",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:stageInput": "link",
                        "description": "Input VCF file for GATK VariantRecalibrator Resources.",
                        "sbg:fileTypes": "VCF",
                        "required": false,
                        "label": "VCF File",
                        "id": "#input_vcf",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "label": "SBG Prepare VQSR 1000G",
                "sbg:createdOn": 1461613037,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1461613037,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:modifiedOn": 1461613070,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:modifiedOn": 1471362399,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472512980,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "VCF_input not required.",
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "",
                "sbg:revisionNotes": "VCF_input not required.",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "",
                        "dockerPull": "ubuntu:14.04"
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    }
                ],
                "outputs": [
                    {
                        "label": "Prepared VCF",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_vcf",
                            "sbg:metadata": {
                                "resources": {
                                    "class": "Expression",
                                    "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                                    "engine": "#cwl-js-engine"
                                }
                            },
                            "glob": "*.vcf"
                        },
                        "description": "Prepared VCF file for GATK VariantRecalibrator",
                        "id": "#output_vcf",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "Apache License 2.0",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/11",
                "temporaryFailCodes": [],
                "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:modifiedOn": 1472512980,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/11",
                "baseCommand": [
                    ""
                ],
                "sbg:toolkit": "SBGTools",
                "stdin": "",
                "sbg:latestRevision": 3,
                "sbg:toolkitVersion": "",
                "sbg:revision": 3,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "label": "aaa",
                        "prior": 12,
                        "known": true,
                        "input_vcf": {
                            "path": "vcf"
                        },
                        "truth": true
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 1000
                    }
                },
                "x": 2295.0003456672143,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "vladimirk",
                    "djordje_klisic"
                ]
            },
            "inputs": [
                {
                    "id": "#SBG_Prepare_VQSR_1000G.truth",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_1000G.training",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_1000G.prior",
                    "default": 10
                },
                {
                    "id": "#SBG_Prepare_VQSR_1000G.label",
                    "default": "1000G"
                },
                {
                    "id": "#SBG_Prepare_VQSR_1000G.known"
                },
                {
                    "id": "#SBG_Prepare_VQSR_1000G.input_vcf",
                    "source": [
                        "#input_vcf_2"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_Prepare_VQSR_1000G.output_vcf"
                }
            ],
            "sbg:x": 2295.0003456672143,
            "sbg:y": -53.90628526897978
        },
        {
            "id": "#SBG_Prepare_VQSR_HapMap",
            "run": {
                "arguments": [],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:createdBy": "djordje_klisic",
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "y": -188.90630268678262,
                "inputs": [
                    {
                        "sbg:category": "",
                        "label": "Truth",
                        "description": "Truth.",
                        "id": "#truth",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Training",
                        "description": "Training.",
                        "id": "#training",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Prior",
                        "description": "Prior.",
                        "id": "#prior",
                        "type": [
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Label",
                        "description": "Label.",
                        "id": "#label",
                        "type": [
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Known",
                        "description": "Known.",
                        "id": "#known",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:stageInput": "link",
                        "description": "Input VCF file for GATK VariantRecalibrator Resources.",
                        "sbg:fileTypes": "VCF",
                        "required": false,
                        "label": "VCF File",
                        "id": "#input_vcf",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "label": "SBG Prepare VQSR HapMap",
                "sbg:createdOn": 1461613037,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1461613037,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:modifiedOn": 1461613070,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:modifiedOn": 1471362399,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472512980,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "VCF_input not required.",
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "",
                "sbg:revisionNotes": "VCF_input not required.",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "",
                        "dockerPull": "ubuntu:14.04"
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    }
                ],
                "outputs": [
                    {
                        "label": "Prepared VCF",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_vcf",
                            "sbg:metadata": {
                                "resources": {
                                    "class": "Expression",
                                    "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                                    "engine": "#cwl-js-engine"
                                }
                            },
                            "glob": "*.vcf"
                        },
                        "description": "Prepared VCF file for GATK VariantRecalibrator",
                        "id": "#output_vcf",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "Apache License 2.0",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/11",
                "temporaryFailCodes": [],
                "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:modifiedOn": 1472512980,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/11",
                "baseCommand": [
                    ""
                ],
                "sbg:toolkit": "SBGTools",
                "stdin": "",
                "sbg:latestRevision": 3,
                "sbg:toolkitVersion": "",
                "sbg:revision": 3,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "label": "aaa",
                        "prior": 12,
                        "known": true,
                        "input_vcf": {
                            "path": "vcf"
                        },
                        "truth": true
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 1000
                    }
                },
                "x": 2303.3338323566823,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "vladimirk",
                    "djordje_klisic"
                ]
            },
            "inputs": [
                {
                    "id": "#SBG_Prepare_VQSR_HapMap.truth",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_HapMap.training",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_HapMap.prior",
                    "default": 15
                },
                {
                    "id": "#SBG_Prepare_VQSR_HapMap.label",
                    "default": "hapmap"
                },
                {
                    "id": "#SBG_Prepare_VQSR_HapMap.known"
                },
                {
                    "id": "#SBG_Prepare_VQSR_HapMap.input_vcf",
                    "source": [
                        "#input_vcf_1"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_Prepare_VQSR_HapMap.output_vcf"
                }
            ],
            "sbg:x": 2303.3338323566823,
            "sbg:y": -188.90630268678262
        },
        {
            "id": "#SBG_Prepare_VQSR_Omni",
            "run": {
                "arguments": [],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:createdBy": "djordje_klisic",
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "y": -312.23961860231327,
                "inputs": [
                    {
                        "sbg:category": "",
                        "label": "Truth",
                        "description": "Truth.",
                        "id": "#truth",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Training",
                        "description": "Training.",
                        "id": "#training",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Prior",
                        "description": "Prior.",
                        "id": "#prior",
                        "type": [
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Label",
                        "description": "Label.",
                        "id": "#label",
                        "type": [
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "",
                        "label": "Known",
                        "description": "Known.",
                        "id": "#known",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:stageInput": "link",
                        "description": "Input VCF file for GATK VariantRecalibrator Resources.",
                        "sbg:fileTypes": "VCF",
                        "required": false,
                        "label": "VCF File",
                        "id": "#input_vcf",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "label": "SBG Prepare VQSR Omni",
                "sbg:createdOn": 1461613037,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1461613037,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:modifiedOn": 1461613070,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:modifiedOn": 1471362399,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472512980,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "VCF_input not required.",
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "",
                "sbg:revisionNotes": "VCF_input not required.",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "",
                        "dockerPull": "ubuntu:14.04"
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    }
                ],
                "outputs": [
                    {
                        "label": "Prepared VCF",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_vcf",
                            "sbg:metadata": {
                                "resources": {
                                    "class": "Expression",
                                    "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                                    "engine": "#cwl-js-engine"
                                }
                            },
                            "glob": "*.vcf"
                        },
                        "description": "Prepared VCF file for GATK VariantRecalibrator",
                        "id": "#output_vcf",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "Apache License 2.0",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/11",
                "temporaryFailCodes": [],
                "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:modifiedOn": 1472512980,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/11",
                "baseCommand": [
                    ""
                ],
                "sbg:toolkit": "SBGTools",
                "stdin": "",
                "sbg:latestRevision": 3,
                "sbg:toolkitVersion": "",
                "sbg:revision": 3,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "label": "aaa",
                        "prior": 12,
                        "known": true,
                        "input_vcf": {
                            "path": "vcf"
                        },
                        "truth": true
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 1000
                    }
                },
                "x": 2303.333517498445,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "vladimirk",
                    "djordje_klisic"
                ]
            },
            "inputs": [
                {
                    "id": "#SBG_Prepare_VQSR_Omni.truth",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_Omni.training",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_Omni.prior",
                    "default": 12
                },
                {
                    "id": "#SBG_Prepare_VQSR_Omni.label",
                    "default": "omni"
                },
                {
                    "id": "#SBG_Prepare_VQSR_Omni.known"
                },
                {
                    "id": "#SBG_Prepare_VQSR_Omni.input_vcf",
                    "source": [
                        "#input_vcf"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_Prepare_VQSR_Omni.output_vcf"
                }
            ],
            "sbg:x": 2303.333517498445,
            "sbg:y": -312.23961860231327
        },
        {
            "id": "#Picard_CollectAlignmentSummaryMetrics",
            "run": {
                "arguments": [
                    {
                        "prefix": "OUTPUT=",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  if ($job.inputs.input_bam)\n  {\n    filename = [].concat($job.inputs.input_bam)[0].path\n    filebase = filename.split('.').slice(0, -1)\n\n    return filebase.concat(\"summary_metrics.txt\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n  }\n}\n",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": false,
                        "position": 3
                    }
                ],
                "sbg:project": "bix-demo/picard-1-140-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Broad Institute",
                "y": -523.3333528041843,
                "inputs": [
                    {
                        "sbg:toolDefaultValue": "INFO",
                        "description": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
                        "sbg:category": "",
                        "label": "Verbosity",
                        "inputBinding": {
                            "prefix": "VERBOSITY=",
                            "separate": false,
                            "position": 6,
                            "sbg:cmdInclude": true
                        },
                        "id": "#verbosity",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "SILENT",
                        "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}.",
                        "label": "Validation stringency",
                        "inputBinding": {
                            "prefix": "VALIDATION_STRINGENCY=",
                            "valueFrom": {
                                "class": "Expression",
                                "script": "{\n  if ($job.inputs.validation_stringency)\n  {\n    return $job.inputs.validation_stringency\n  }\n  else\n  {\n    return \"SILENT\"\n  }\n}",
                                "engine": "#cwl-js-engine"
                            },
                            "separate": false,
                            "position": 4,
                            "sbg:cmdInclude": true
                        },
                        "id": "#validation_stringency",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "validation_stringency",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Stop after processing N reads, mainly for debugging. Default value: 0. This option can be set to 'null' to clear the default value.",
                        "sbg:category": "",
                        "label": "Stop after",
                        "inputBinding": {
                            "prefix": "STOP_AFTER=",
                            "separate": false,
                            "position": 9,
                            "sbg:cmdInclude": true
                        },
                        "id": "#stop_after",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "File inputs",
                        "description": "Reference sequence file. Note that while this argument is not required, without it only a small subset of the metrics will be calculated.  Default value: null.",
                        "sbg:fileTypes": "FASTA",
                        "required": false,
                        "label": "Reference sequence",
                        "inputBinding": {
                            "prefix": "REFERENCE_SEQUENCE=",
                            "separate": false,
                            "position": 3,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reference",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "R"
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "description": "This parameter indicates whether to suppress job-summary info on System.err. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                        "sbg:category": "",
                        "label": "Quiet",
                        "inputBinding": {
                            "prefix": "QUIET=",
                            "separate": false,
                            "position": 4,
                            "sbg:cmdInclude": true
                        },
                        "id": "#quiet",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "quiet",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "ALL_READS",
                        "description": "This parameter indicates the level(s) at which to accumulate metrics. Default value: [ALL_READS]. This option can be set to 'null' to clear the default value. Possible values: {ALL_READS, SAMPLE, LIBRARY, READ_GROUP}. This option may be specified 0 or more times. This option can be set to 'null' to clear the default list.",
                        "sbg:category": "",
                        "label": "Metric accumulation level",
                        "inputBinding": {
                            "prefix": "METRIC_ACCUMULATION_LEVEL=",
                            "itemSeparator": null,
                            "separate": false,
                            "position": 8,
                            "sbg:cmdInclude": true
                        },
                        "id": "#metric_accumulation_level",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "ALL_READS",
                                        "SAMPLE",
                                        "LIBRARY",
                                        "READ_GROUP"
                                    ],
                                    "name": "metric_accumulation_level",
                                    "type": "enum"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "LEVEL"
                    },
                    {
                        "label": "Memory per job",
                        "description": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs.",
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2048"
                    },
                    {
                        "sbg:toolDefaultValue": "500000",
                        "description": "When writing SAM files that need to be sorted, this parameter will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000. This option can be set to 'null' to clear the default value.",
                        "sbg:category": "",
                        "label": "Max records in RAM",
                        "inputBinding": {
                            "prefix": "MAX_RECORDS_IN_RAM=",
                            "separate": false,
                            "position": 4,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_records_in_ram",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "100000",
                        "description": "Paired end reads above this insert size will be considered chimeric along with inter-chromosomal pairs. Default value: 100000. This option can be set to 'null' to clear the default value.",
                        "sbg:category": "",
                        "label": "Max insert size",
                        "inputBinding": {
                            "prefix": "MAX_INSERT_SIZE=",
                            "separate": false,
                            "position": 9,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_insert_size",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "description": "This parameter indicates whether the SAM or BAM file consists of bisulfite sequenced reads. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                        "sbg:category": "",
                        "label": "Is bisulfite sequenced",
                        "inputBinding": {
                            "prefix": "BS=",
                            "separate": false,
                            "position": 8,
                            "sbg:cmdInclude": true
                        },
                        "id": "#is_bisulfite_sequenced",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "is_bisulfite_sequenced",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "BS"
                    },
                    {
                        "sbg:category": "File inputs",
                        "description": "Input SAM or BAM file.  Required.",
                        "sbg:fileTypes": "BAM, SAM",
                        "required": true,
                        "label": "Input file",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "position": 0,
                            "sbg:cmdInclude": true
                        },
                        "id": "#input_bam",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "I"
                    },
                    {
                        "sbg:toolDefaultValue": "5",
                        "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5. This option can be set to 'null' to clear the default value.",
                        "sbg:category": "",
                        "label": "Compression level",
                        "inputBinding": {
                            "prefix": "COMPRESSION_LEVEL=",
                            "separate": false,
                            "position": 4,
                            "sbg:cmdInclude": true
                        },
                        "id": "#compression_level",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "true",
                        "description": "If this parameter is set to true, the sort order in the header file will be ignored. Default value: true. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                        "sbg:category": "",
                        "label": "Assume sorted",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": false,
                            "prefix": "ASSUME_SORTED="
                        },
                        "id": "#assume_sorted",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "assume_sorted",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "AS"
                    },
                    {
                        "sbg:toolDefaultValue": "AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT",
                        "description": "List of adapter sequences to use when processing the alignment metrics. Default value: [AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCTCGTATGCCGTCTTCTGCTTG, AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG, AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCACACGTCTGAACTCCAGTCACNNNNNNNNATCTCGTATGCCGTCTTCTGCTTG]. This option can be set to 'null' to clear the default value. This option may be specified 0 or more times. This option can be set to 'null' to clear the default list.",
                        "sbg:category": "",
                        "label": "Adapter sequence",
                        "inputBinding": {
                            "prefix": "ADAPTER_SEQUENCE=",
                            "itemSeparator": null,
                            "separate": false,
                            "position": 8,
                            "sbg:cmdInclude": true
                        },
                        "id": "#adapter_sequence",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ]
                    }
                ],
                "label": "Picard CollectAlignmentSummaryMetrics",
                "sbg:createdOn": 1450911255,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911255,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911256,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911257,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1472811193,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "[].concat(input_bam)[0].path",
                        "sbg:modifiedBy": "bix-demo"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/picard-tools-1.140/picard.jar CollectAlignmentSummaryMetrics INPUT=/root/folder/example.bam OUTPUT=example.summary_metrics.txt",
                "sbg:revisionNotes": "[].concat(input_bam)[0].path",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "eab0e70b6629",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/picard:1.140"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn $job.inputs.memory_per_job\n  }\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "description": "File to which the output will be written.",
                        "sbg:fileTypes": "TXT",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_bam",
                            "secondaryFiles": [
                                ""
                            ],
                            "sbg:metadata": {},
                            "glob": "*.summary_metrics.txt"
                        },
                        "label": "Summary metrics",
                        "id": "#summary_metrics",
                        "type": [
                            "File"
                        ]
                    }
                ],
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/picard-collectalignmentsummarymetrics-1-140/3",
                "temporaryFailCodes": [],
                "description": "Picard CollectAlignmentSummaryMetrics assesses the quality of alignment by analyzing a SAM or BAM file. It compares it with the reference file (FASTA) and provides alignment statistics, such as the number of input reads and the percent of reads that are mapped. It produces a file which contains summary alignment metrics from a SAM or BAM file.\n\nNote: This tool requires the exact same FASTA file as the one to which raw reads were aligned.",
                "sbg:categories": [
                    "SAM/BAM-Processing",
                    "Quality-Control",
                    "Quantification"
                ],
                "sbg:modifiedOn": 1472811193,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "bix-demo",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://broadinstitute.github.io/picard/index.html"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/picard/releases/tag/1.140"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/broadinstitute/picard/zipball/master"
                    },
                    {
                        "label": "Publication",
                        "id": "http://broadinstitute.github.io/picard/"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/picard-collectalignmentsummarymetrics-1-140/3",
                "baseCommand": [
                    "java",
                    {
                        "class": "Expression",
                        "script": "{   \n  if($job.inputs.memory_per_job){\n    return '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }   \n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine"
                    },
                    "-jar",
                    "/opt/picard-tools-1.140/picard.jar",
                    "CollectAlignmentSummaryMetrics"
                ],
                "sbg:toolkit": "Picard",
                "stdin": "",
                "sbg:latestRevision": 3,
                "sbg:toolkitVersion": "1.140",
                "sbg:revision": 3,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "reference": {
                            "path": "/root/directory/example.fasta"
                        },
                        "memory_per_job": 0,
                        "input_bam": {
                            "path": "/root/folder/example.bam"
                        },
                        "metric_accumulation_level": [
                            "ALL_READS"
                        ]
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 2048
                    }
                },
                "x": 2506.666687144172,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "bix-demo"
                ]
            },
            "inputs": [
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.verbosity"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.validation_stringency"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.stop_after"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.quiet"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.metric_accumulation_level"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.memory_per_job"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.max_records_in_ram"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.max_insert_size"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.is_bisulfite_sequenced"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.input_bam",
                    "source": [
                        "#Sambamba_Merge.merged_bam"
                    ]
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.compression_level"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.assume_sorted"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.adapter_sequence"
                }
            ],
            "outputs": [
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.summary_metrics"
                }
            ],
            "sbg:x": 2506.666687144172,
            "sbg:y": -523.3333528041843
        },
        {
            "id": "#GATK_IndelRealigner",
            "run": {
                "arguments": [
                    {
                        "prefix": "--out",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  read_name = [].concat($job.inputs.target_intervals)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.realigned.bam'\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    }
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Broad Institute",
                "y": 414.4274159442347,
                "inputs": [
                    {
                        "sbg:toolDefaultValue": "SILENT",
                        "description": "How strict should we be with validation.",
                        "sbg:category": "GATK General",
                        "label": "Validation Strictness",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "name": "validation_strictness",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-S"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:category": "GATK General",
                        "label": "Use Original Qualities",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-OQ"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:category": "GATK General",
                        "label": "Use Legacy Downsampler",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-use_legacy_downsampler"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:category": "GATK General",
                        "label": "Unsafe",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "name": "unsafe",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-U"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Intervals file output from RealignerTargetCreator.",
                        "sbg:fileTypes": "TXT,INTERVALS",
                        "required": true,
                        "label": "Target Intervals",
                        "inputBinding": {
                            "prefix": "--targetIntervals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#target_intervals",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-targetIntervals"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:category": "GATK General",
                        "label": "Tag",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-tag"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Remove Program Records",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-rpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Reference Genome in FASTA format.",
                        "sbg:fileTypes": "FASTA, FA",
                        "required": true,
                        "label": "Reference Genome",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-R"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Read sequences in BAM format.",
                        "sbg:fileTypes": "SAM, BAM",
                        "required": true,
                        "label": "Read sequences",
                        "inputBinding": {
                            "prefix": "--input_file",
                            "itemSeparator": null,
                            "separate": true,
                            "secondaryFiles": [
                                ".bai"
                            ],
                            "sbg:cmdInclude": true
                        },
                        "id": "#reads",
                        "type": [
                            {
                                "name": "reads",
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-I"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:category": "GATK General",
                        "label": "Read Group Black List",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rgbl"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:category": "GATK General",
                        "label": "Read Filter",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "name": "read_filter",
                                    "type": "enum"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rf"
                    },
                    {
                        "sbg:toolDefaultValue": "6",
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Preserve Qscores Less Than",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-preserveQ"
                    },
                    {
                        "sbg:toolDefaultValue": "STANDARD",
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:category": "GATK General",
                        "label": "Phone Home",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "name": "phone_home",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-et"
                    },
                    {
                        "sbg:toolDefaultValue": "STRICT",
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree Validation Type",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "name": "pedigree_validation_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-pedValidationType"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Pedigree string for samples.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree String",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-pedString"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:category": "GATK General",
                        "label": "Non Deterministic Random Seed",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-ndrs"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Don't output the original cigar or alignment start tags for each realigned read in the output bam.",
                        "sbg:category": "Indel Realigner",
                        "label": "No Original Alignment Tags",
                        "inputBinding": {
                            "prefix": "--noOriginalAlignmentTags",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#no_original_alignment_tags",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-noTags"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "sbg:category": "Execution",
                        "label": "Memory per job",
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "sbg:category": "Execution",
                        "label": "Memory overhead per job",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "MINUTES",
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime Units",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "name": "max_runtime_units",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-maxRuntimeUnits"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxRuntime"
                    },
                    {
                        "sbg:toolDefaultValue": "150000",
                        "description": "Max reads allowed to be kept in memory at a time by the SAMFileWriter.",
                        "sbg:category": "Indel Realigner",
                        "label": "Max Reads In Memory",
                        "inputBinding": {
                            "prefix": "--maxReadsInMemory",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_reads_in_memory",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxInMemory"
                    },
                    {
                        "sbg:toolDefaultValue": "20000",
                        "description": "Max reads allowed at an interval for realignment.",
                        "sbg:category": "Indel Realigner",
                        "label": "Max Reads For Realignment",
                        "inputBinding": {
                            "prefix": "--maxReadsForRealignment",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_reads_for_realignment",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxReads"
                    },
                    {
                        "sbg:toolDefaultValue": "120",
                        "description": "Max reads used for finding the alternate consensuses (necessary to improve performance in deep coverage).",
                        "sbg:category": "Indel Realigner",
                        "label": "Max Reads For Consensuses",
                        "inputBinding": {
                            "prefix": "--maxReadsForConsensuses",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_reads_for_consensuses",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-greedy"
                    },
                    {
                        "sbg:toolDefaultValue": "200",
                        "description": "Maximum positional move in basepairs that a read can be adjusted during realignment.",
                        "sbg:category": "Indel Realigner",
                        "label": "Max Positional Move Allowed",
                        "inputBinding": {
                            "prefix": "--maxPositionalMoveAllowed",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_positional_move_allowed",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxPosMove"
                    },
                    {
                        "sbg:toolDefaultValue": "3000",
                        "description": "Maximum insert size of read pairs that we attempt to realign.",
                        "sbg:category": "Indel Realigner",
                        "label": "Max Isize For Movement",
                        "inputBinding": {
                            "prefix": "--maxIsizeForMovement",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_isize_for_movement",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxIsize"
                    },
                    {
                        "sbg:toolDefaultValue": "30",
                        "description": "Max alternate consensuses to try (necessary to improve performance in deep coverage).",
                        "sbg:category": "Indel Realigner",
                        "label": "Max Consensuses",
                        "inputBinding": {
                            "prefix": "--maxConsensuses",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_consensuses",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "5.0",
                        "description": "LOD threshold above which the cleaner will clean.",
                        "sbg:category": "Indel Realigner",
                        "label": "Lod Threshold For Cleaning",
                        "inputBinding": {
                            "prefix": "--LODThresholdForCleaning",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#lod_threshold_for_cleaning",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-LOD"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Input VCF file(s) with known indels.",
                        "sbg:fileTypes": "VCF",
                        "required": false,
                        "label": "Known Alleles",
                        "inputBinding": {
                            "prefix": "--knownAlleles",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#known_alleles",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-known"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Keep Program Records",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-kpr"
                    },
                    {
                        "sbg:stageInput": "link",
                        "required": false,
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "sbg:category": "Input Files",
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": null,
                            "separate": true,
                            "valueFrom": {
                                "class": "Expression",
                                "script": "{\n  if($job.inputs.intervals_file instanceof Array)\n    if($job.inputs.target_intervals.metadata)\n      if($job.inputs.target_intervals.metadata.intervals_file)\n        return $job.inputs.target_intervals.metadata.intervals_file\n  \n  return $job.inputs.intervals_file.path\n}",
                                "engine": "#cwl-js-engine"
                            },
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            {
                                "name": "intervals_file",
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-L"
                    },
                    {
                        "sbg:toolDefaultValue": "sample",
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:category": "GATK General",
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "UNION",
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:category": "GATK General",
                        "label": "Interval Set Rule",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-isr"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:category": "GATK General",
                        "label": "Interval Padding",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-ip"
                    },
                    {
                        "sbg:toolDefaultValue": "ALL",
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:category": "GATK General",
                        "label": "Interval Merging",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-im"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "required": false,
                        "label": "Gatk key",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-K"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Fix Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-fixMisencodedQuals"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Exclude Intervals",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-XL"
                    },
                    {
                        "sbg:toolDefaultValue": "0.15",
                        "description": "Percentage of mismatches at a locus to be considered having high entropy.",
                        "sbg:category": "Indel Realigner",
                        "label": "Entropy Threshold",
                        "inputBinding": {
                            "prefix": "--entropyThreshold",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#entropy_threshold",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-entropy"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Emit Original Quals",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-EOQ"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:category": "GATK General",
                        "label": "Downsampling Type",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "name": "downsampling_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-dt"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Fraction",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-dfrac"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Coverage",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-dcov"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:category": "GATK General",
                        "label": "Disable Randomization",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:category": "GATK General",
                        "label": "Disable Indel Quals",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-DIQ"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Default Base Qualities",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-DBQ"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "description": "Number of CPUs per job.",
                        "sbg:category": "Execution",
                        "label": "CPU per job",
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "USE_READS",
                        "description": "Determines how to compute the possible alternate consenses.",
                        "sbg:category": "Indel Realigner",
                        "label": "Consensus Determination Model",
                        "inputBinding": {
                            "prefix": "--consensusDeterminationModel",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#consensus_determination_model",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "KNOWNS_ONLY",
                                    "USE_READS",
                                    "USE_SW"
                                ],
                                "name": "consensus_determination_model",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-model"
                    },
                    {
                        "sbg:toolDefaultValue": "40.0",
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Gap Open Penalty",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-baqGOP"
                    },
                    {
                        "sbg:toolDefaultValue": "OFF",
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Calculation Type",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "name": "baq",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-baq"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:category": "GATK General",
                        "label": "Allow Potentially Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores"
                    }
                ],
                "label": "GATK IndelRealigner",
                "sbg:createdOn": 1450911378,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911378,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911378,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911379,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911380,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911381,
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911382,
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1460993599,
                        "sbg:revision": 6,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1472651971,
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Scatter metadata support.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472652361,
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "metadata scatter 2",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472655804,
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "scatter metadata 3",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472724542,
                        "sbg:revision": 10,
                        "sbg:revisionNotes": ".bai as secondary.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472738930,
                        "sbg:revision": 11,
                        "sbg:revisionNotes": "output single file.",
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type IndelRealigner --reference_sequence /folder/reference.fasta --input_file /folder/input.bam --targetIntervals intervalListFromRTC.intervals --out intervalListFromRTC.realigned.bam",
                "sbg:revisionNotes": "output single file.",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "47510cb2da55",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
                            "engine": "#cwl-js-engine"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "description": "Realigned BAM.",
                        "sbg:fileTypes": "BAM",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#reads",
                            "secondaryFiles": [
                                ".bai",
                                "^.bai"
                            ],
                            "sbg:metadata": {
                                "intervals_file": {
                                    "class": "Expression",
                                    "script": "{\n  if ($job.inputs.target_intervals)\n    if($job.inputs.target_intervals.metadata)\n      if('intervals_file' in $job.inputs.target_intervals.metadata)\n        return $job.inputs.target_intervals.metadata.intervals_file\n  return 'NO_INTERVALS'\n}",
                                    "engine": "#cwl-js-engine"
                                }
                            },
                            "glob": "*.realigned.bam"
                        },
                        "label": "Realigned BAM",
                        "id": "#realigned_bam_file",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "MIT License",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-indelrealigner/18",
                "temporaryFailCodes": [],
                "description": "Overview\n\nThe local realignment process is designed to consume one or more BAM files and to locally realign reads such that the number of mismatching bases is minimized across all the reads. In general, a large percent of regions requiring local realignment are due to the presence of an insertion or deletion (indels) in the individual's genome with respect to the reference genome. Such alignment artifacts result in many bases mismatching the reference near the misalignment, which are easily mistaken as SNPs. Moreover, since read mapping algorithms operate on each read independently, it is impossible to place reads on the reference genome such at mismatches are minimized across all reads. Consequently, even when some reads are correctly mapped with indels, reads covering the indel near just the start or end of the read are often incorrectly mapped with respect the true indel, also requiring realignment. Local realignment serves to transform regions with misalignments due to indels into clean reads containing a consensus indel suitable for standard variant discovery approaches. Unlike most mappers, this walker uses the full alignment context to determine whether an appropriate alternate reference (i.e. indel) exists. Following local realignment, the GATK tool Unified Genotyper can be used to sensitively and specifically identify indels.\n\nThere are 2 steps to the realignment process:\n\n1. Determining (small) suspicious intervals which are likely in need of realignment (see the RealignerTargetCreator tool)\n2. Running the realigner over those intervals (IndelRealigner)\nFor more details, see the indel realignment method documentation.\n\nInput\nOne or more aligned BAM files and optionally one or more lists of known indels.\n\nOutput\nA realigned version of your input BAM file(s).\n\nUsage example:\n java -jar GenomeAnalysisTK.jar \\\n   -T IndelRealigner \\\n   -R reference.fasta \\\n   -I input.bam \\\n   --known indels.vcf \\\n   -targetIntervals intervalListFromRTC.intervals \\\n   -o realignedBam.bam\n \nCaveats\n\nThe input BAM(s), reference, and known indel file(s) should be the same ones to be used for the IndelRealigner step.\nBecause reads produced from the 454 technology inherently contain false indels, the realigner will not work with them (or with reads from similar technologies).\nThis tool also ignores MQ0 reads and reads with consecutive indel operators in the CIGAR string.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:categories": [
                    "Alignment"
                ],
                "sbg:modifiedOn": 1472738930,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_indels_IndelRealigner.php"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/gatk-2-3-9-lite-indelrealigner/18",
                "baseCommand": [
                    "java",
                    {
                        "class": "Expression",
                        "script": "{   \n  if($job.inputs.memory_per_job){\n    return '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }   \n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "IndelRealigner"
                ],
                "sbg:toolkit": "GATK",
                "stdin": "",
                "sbg:latestRevision": 11,
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:revision": 11,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "known_alleles": [
                            {
                                "path": "/folder/indels.vcf"
                            }
                        ],
                        "intervals": "",
                        "memory_per_job": null,
                        "reads": [
                            {
                                "path": "/folder/input.bam"
                            }
                        ],
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "target_intervals": {
                            "size": 0,
                            "path": "intervalListFromRTC.intervals",
                            "secondaryFiles": [],
                            "metadata": {
                                "intervals_file": "treterfgsdfsd.4444"
                            },
                            "class": "File"
                        },
                        "memory_overhead_per_job": 1000,
                        "intervals_file": [
                            {
                                "size": 0,
                                "path": "/path/to/intervals_file-1.ext",
                                "secondaryFiles": [],
                                "class": "File"
                            },
                            {
                                "size": 0,
                                "path": "/path/to/intervals_file-2.ext",
                                "secondaryFiles": [],
                                "class": "File"
                            }
                        ]
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 3048
                    }
                },
                "x": 1423.33355702295,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "bix-demo",
                    "vladimirk"
                ]
            },
            "inputs": [
                {
                    "id": "#GATK_IndelRealigner.validation_strictness"
                },
                {
                    "id": "#GATK_IndelRealigner.use_original_qualities"
                },
                {
                    "id": "#GATK_IndelRealigner.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_IndelRealigner.unsafe"
                },
                {
                    "id": "#GATK_IndelRealigner.target_intervals",
                    "source": [
                        "#GATK_RealignerTargetCreator.indel_realigner_intervals_file"
                    ]
                },
                {
                    "id": "#GATK_IndelRealigner.tag"
                },
                {
                    "id": "#GATK_IndelRealigner.remove_program_records"
                },
                {
                    "id": "#GATK_IndelRealigner.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_IndelRealigner.reads",
                    "source": [
                        "#BWA_MEM_Bundle_0_7_13.aligned_reads"
                    ]
                },
                {
                    "id": "#GATK_IndelRealigner.read_group_black_list"
                },
                {
                    "id": "#GATK_IndelRealigner.read_filter"
                },
                {
                    "id": "#GATK_IndelRealigner.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_IndelRealigner.phone_home"
                },
                {
                    "id": "#GATK_IndelRealigner.pedigree_validation_type"
                },
                {
                    "id": "#GATK_IndelRealigner.pedigree_string"
                },
                {
                    "id": "#GATK_IndelRealigner.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_IndelRealigner.no_original_alignment_tags"
                },
                {
                    "id": "#GATK_IndelRealigner.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_IndelRealigner.memory_overhead_per_job",
                    "default": 512
                },
                {
                    "id": "#GATK_IndelRealigner.max_runtime_units"
                },
                {
                    "id": "#GATK_IndelRealigner.max_runtime"
                },
                {
                    "id": "#GATK_IndelRealigner.max_reads_in_memory"
                },
                {
                    "id": "#GATK_IndelRealigner.max_reads_for_realignment"
                },
                {
                    "id": "#GATK_IndelRealigner.max_reads_for_consensuses"
                },
                {
                    "id": "#GATK_IndelRealigner.max_positional_move_allowed"
                },
                {
                    "id": "#GATK_IndelRealigner.max_isize_for_movement"
                },
                {
                    "id": "#GATK_IndelRealigner.max_consensuses"
                },
                {
                    "id": "#GATK_IndelRealigner.lod_threshold_for_cleaning"
                },
                {
                    "id": "#GATK_IndelRealigner.known_alleles"
                },
                {
                    "id": "#GATK_IndelRealigner.keep_program_records"
                },
                {
                    "id": "#GATK_IndelRealigner.intervals_file",
                    "source": [
                        "#SBG_Prepare_Intervals_1.intervals"
                    ]
                },
                {
                    "id": "#GATK_IndelRealigner.intervals"
                },
                {
                    "id": "#GATK_IndelRealigner.interval_set_rule"
                },
                {
                    "id": "#GATK_IndelRealigner.interval_padding"
                },
                {
                    "id": "#GATK_IndelRealigner.interval_merging"
                },
                {
                    "id": "#GATK_IndelRealigner.gatk_key"
                },
                {
                    "id": "#GATK_IndelRealigner.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_IndelRealigner.exclude_intervals"
                },
                {
                    "id": "#GATK_IndelRealigner.entropy_threshold"
                },
                {
                    "id": "#GATK_IndelRealigner.emit_original_quals"
                },
                {
                    "id": "#GATK_IndelRealigner.downsampling_type"
                },
                {
                    "id": "#GATK_IndelRealigner.downsample_to_fraction"
                },
                {
                    "id": "#GATK_IndelRealigner.downsample_to_coverage"
                },
                {
                    "id": "#GATK_IndelRealigner.disable_radnomization"
                },
                {
                    "id": "#GATK_IndelRealigner.disable_indel_quals"
                },
                {
                    "id": "#GATK_IndelRealigner.default_base_qualities"
                },
                {
                    "id": "#GATK_IndelRealigner.cpu_per_job"
                },
                {
                    "id": "#GATK_IndelRealigner.consensus_determination_model"
                },
                {
                    "id": "#GATK_IndelRealigner.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_IndelRealigner.baq"
                },
                {
                    "id": "#GATK_IndelRealigner.allow_potentailly_misencoded_quals"
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_IndelRealigner.realigned_bam_file"
                }
            ],
            "sbg:x": 1423.33355702295,
            "sbg:y": 414.4274159442347,
            "scatter": "#GATK_IndelRealigner.target_intervals"
        },
        {
            "id": "#GATK_PrintReads_1",
            "run": {
                "arguments": [
                    {
                        "prefix": "--out",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n\n  if($job.inputs.bqsr){\n  \treturn read_namebase + '.base_recalibrated.bam'\n  }\n  else{\n  \treturn read_namebase + '.bam'\n  }\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    },
                    {
                        "prefix": ";",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  if($job.inputs.bqsr){\n\treturn 'mv ' + read_namebase + '.base_recalibrated.bai '+ read_namebase + '.base_recalibrated.bam.bai'\n  }\n  else{\n  \treturn 'mv ' + read_namebase + '.bai '+read_namebase+'.bam.bai'\n  }\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true,
                        "position": 10000
                    }
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Broad Institute",
                "y": 489.427201725133,
                "inputs": [
                    {
                        "sbg:toolDefaultValue": "SILENT",
                        "description": "How strict should we be with validation.",
                        "sbg:category": "GATK General",
                        "label": "Validation Strictness",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "name": "validation_strictness",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-S"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:category": "GATK General",
                        "label": "Use Original Qualities",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-OQ"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:category": "GATK General",
                        "label": "Use Legacy Downsampler",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-use_legacy_downsampler"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:category": "GATK General",
                        "label": "Unsafe",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "name": "unsafe",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-U"
                    },
                    {
                        "sbg:toolDefaultValue": "4",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:category": "Execution",
                        "label": "Threads per job",
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:category": "GATK General",
                        "label": "Tag",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-tag"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Simplify all reads.",
                        "sbg:category": "Print Reads",
                        "label": "Simplify",
                        "inputBinding": {
                            "prefix": "--simplify",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#simplify",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-s"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Sample name to be included in the analysis. Can be specified multiple times.",
                        "sbg:category": "Print Reads",
                        "label": "Sample Name",
                        "inputBinding": {
                            "prefix": "--sample_name",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#sample_name",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-sn"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "File containing a list of samples (one per line). Can be specified multiple times.",
                        "required": false,
                        "label": "Sample File",
                        "inputBinding": {
                            "prefix": "--sample_file",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#sample_file",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-sf"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Remove Program Records",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-rpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Reference Genome in FASTA format.",
                        "sbg:fileTypes": "FASTA, FA",
                        "required": true,
                        "label": "Reference Genome",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-R"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Read sequences in BAM format.",
                        "sbg:fileTypes": "SAM, BAM",
                        "required": true,
                        "label": "Read sequences",
                        "inputBinding": {
                            "prefix": "--input_file",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reads",
                        "type": [
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-I"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:category": "GATK General",
                        "label": "Read Group Black List",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rgbl"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Exclude all reads with this read group from the output.",
                        "sbg:category": "Print Reads",
                        "label": "Read Group",
                        "inputBinding": {
                            "prefix": "--readGroup",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_group",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-readGroup"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:category": "GATK General",
                        "label": "Read Filter",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "name": "read_filter",
                                    "type": "enum"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rf"
                    },
                    {
                        "sbg:toolDefaultValue": "6",
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Preserve Qscores Less Than",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-preserveQ"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Exclude all reads with this platform from the output.",
                        "sbg:category": "Print Reads",
                        "label": "Platform",
                        "inputBinding": {
                            "prefix": "--platform",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#platform",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-platform"
                    },
                    {
                        "sbg:toolDefaultValue": "STANDARD",
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:category": "GATK General",
                        "label": "Phone Home",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "name": "phone_home",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-et"
                    },
                    {
                        "sbg:toolDefaultValue": "STRICT",
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree Validation Type",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "name": "pedigree_validation_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-pedValidationType"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Pedigree string for samples.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree String",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-pedString"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "Print the first n reads from the file, discarding the rest.",
                        "sbg:category": "Print Reads",
                        "label": "Number",
                        "inputBinding": {
                            "prefix": "--number",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#number",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-n"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:category": "GATK General",
                        "label": "Non Deterministic Random Seed",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-ndrs"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "sbg:category": "Execution",
                        "label": "Memory per job",
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "sbg:category": "Execution",
                        "label": "Memory overhead per job",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "MINUTES",
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime Units",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "name": "max_runtime_units",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-maxRuntimeUnits"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxRuntime"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Keep Program Records",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-kpr"
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": null,
                            "separate": true,
                            "valueFrom": {
                                "class": "Expression",
                                "script": "{\n  if($job.inputs.intervals_file instanceof Array)\n    if([].concat($job.inputs.reads)[0].metadata)\n      if([].concat($job.inputs.reads)[0].metadata.intervals_file)\n        return [].concat($job.inputs.reads)[0].metadata.intervals_file\n  \n  return $job.inputs.intervals_file.path\n}",
                                "engine": "#cwl-js-engine"
                            },
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            {
                                "name": "intervals_file",
                                "items": "File",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:category": "GATK General",
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "UNION",
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:category": "GATK General",
                        "label": "Interval Set Rule",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-isr"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:category": "GATK General",
                        "label": "Interval Padding",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-ip"
                    },
                    {
                        "sbg:toolDefaultValue": "ALL",
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:category": "GATK General",
                        "label": "Interval Merging",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-im"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "required": false,
                        "label": "Gatk key",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-K"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Fix Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-fixMisencodedQuals"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Exclude Intervals",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-XL"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Emit Original Quals",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-EOQ"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:category": "GATK General",
                        "label": "Downsampling Type",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "name": "downsampling_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-dt"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Fraction",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-dfrac"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Coverage",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-dcov"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:category": "GATK General",
                        "label": "Disable Randomization",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:category": "GATK General",
                        "label": "Disable Indel Quals",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-DIQ"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Default Base Qualities",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-DBQ"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "description": "Number of CPUs per job.",
                        "sbg:category": "Execution",
                        "label": "CPU per job",
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "The input covariates table file which enables on-the-fly base quality score recalibration.",
                        "sbg:fileTypes": "GRP",
                        "required": false,
                        "label": "BQSR Table",
                        "inputBinding": {
                            "prefix": "--BQSR",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#bqsr",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "40.0",
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Gap Open Penalty",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-baqGOP"
                    },
                    {
                        "sbg:toolDefaultValue": "OFF",
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Calculation Type",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "name": "baq",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-baq"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:category": "GATK General",
                        "label": "Allow Potentially Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores"
                    }
                ],
                "label": "GATK PrintReads",
                "sbg:createdOn": 1450911393,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911393,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911394,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911395,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911396,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911397,
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911398,
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911399,
                        "sbg:revision": 6,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1461854096,
                        "sbg:revision": 7,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1461861365,
                        "sbg:revision": 8,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1472656041,
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "metadata scatter.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472744347,
                        "sbg:revision": 10,
                        "sbg:revisionNotes": "intervals_file - stage link",
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type PrintReads -nct 4 --reference_sequence /folder/reference.fasta --input_file /folder/input1.bam --out input1.bam ; mv input1.bai input1.bam.bai",
                "sbg:revisionNotes": "intervals_file - stage link",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "47510cb2da55",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
                            "engine": "#cwl-js-engine"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "description": "Write output to this BAM filename.",
                        "sbg:fileTypes": "BAM, SAM",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#reads",
                            "secondaryFiles": [
                                ".bai",
                                "^.bai"
                            ],
                            "sbg:metadata": {},
                            "glob": "*.bam"
                        },
                        "label": "Recalibrated BAM",
                        "id": "#recalibrated_bam",
                        "type": [
                            "File"
                        ]
                    }
                ],
                "sbg:license": "MIT License",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-printreads/20",
                "temporaryFailCodes": [],
                "description": "Overview\n\nPrintReads is a generic utility tool for manipulating sequencing data in SAM/BAM format. It can dynamically merge the contents of multiple input BAM files, resulting in merged output sorted in coordinate order. It can also optionally filter reads based on various read properties such as read group tags using the `--read_filter/-rf` command line argument (see documentation on read filters for more information).\n\nNote that when PrintReads is used as part of the Base Quality Score Recalibration workflow, it takes the `--BQSR` engine argument, which is listed under Inherited Arguments > CommandLineGATK below.\n\nInput\nOne or more bam files.\n\nOutput\nA single processed bam file.\n\nUsage examples:\n\n // Prints all reads that have a mapping quality above zero\n java -jar GenomeAnalysisTK.jar \\\n   -T PrintReads \\\n   -R reference.fasta \\\n   -I input1.bam \\\n   -I input2.bam \\\n   -o output.bam \\\n   --read_filter MappingQualityZero\n\n // Prints the first 2000 reads in the BAM file\n java -jar GenomeAnalysisTK.jar \\\n   -T PrintReads \\\n   -R reference.fasta \\\n   -I input.bam \\\n   -o output.bam \\\n   -n 2000\n\n // Downsamples BAM file to 25%\n java -jar GenomeAnalysisTK.jar \\\n   -T PrintReads \\\n   -R reference.fasta \\\n   -I input.bam \\\n   -o output.bam \\\n   -dfrac 0.25\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:categories": [
                    "SAM/BAM-Processing"
                ],
                "sbg:modifiedOn": 1472744347,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_readutils_PrintReads.php"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/gatk-2-3-9-lite-printreads/20",
                "baseCommand": [
                    "java",
                    {
                        "class": "Expression",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "PrintReads",
                    {
                        "class": "Expression",
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nct '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nct '.concat(4)\n  }\n}",
                        "engine": "#cwl-js-engine"
                    }
                ],
                "sbg:toolkit": "GATK",
                "stdin": "",
                "sbg:latestRevision": 10,
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:revision": 10,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "read_filter": [
                            "MappingQualityZero"
                        ],
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "memory_overhead_per_job": 0,
                        "intervals_file": [
                            {
                                "size": 0,
                                "path": "/path/to/intervals_file-1.ext",
                                "secondaryFiles": [],
                                "class": "File"
                            },
                            {
                                "size": 0,
                                "path": "/path/to/intervals_file-2.ext",
                                "secondaryFiles": [],
                                "class": "File"
                            }
                        ],
                        "reads": [
                            {
                                "path": "/folder/input1.bam",
                                "secondaryFiles": [],
                                "metadata": {
                                    "intervals_file": "3333.intervals"
                                }
                            }
                        ]
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 2048
                    }
                },
                "x": 1790.0006402598724,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "bix-demo",
                    "vladimirk"
                ]
            },
            "inputs": [
                {
                    "id": "#GATK_PrintReads_1.validation_strictness"
                },
                {
                    "id": "#GATK_PrintReads_1.use_original_qualities"
                },
                {
                    "id": "#GATK_PrintReads_1.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_PrintReads_1.unsafe"
                },
                {
                    "id": "#GATK_PrintReads_1.threads_per_job",
                    "default": 4
                },
                {
                    "id": "#GATK_PrintReads_1.tag"
                },
                {
                    "id": "#GATK_PrintReads_1.simplify"
                },
                {
                    "id": "#GATK_PrintReads_1.sample_name"
                },
                {
                    "id": "#GATK_PrintReads_1.sample_file"
                },
                {
                    "id": "#GATK_PrintReads_1.remove_program_records"
                },
                {
                    "id": "#GATK_PrintReads_1.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_PrintReads_1.reads",
                    "source": [
                        "#GATK_IndelRealigner.realigned_bam_file"
                    ]
                },
                {
                    "id": "#GATK_PrintReads_1.read_group_black_list"
                },
                {
                    "id": "#GATK_PrintReads_1.read_group"
                },
                {
                    "id": "#GATK_PrintReads_1.read_filter"
                },
                {
                    "id": "#GATK_PrintReads_1.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_PrintReads_1.platform"
                },
                {
                    "id": "#GATK_PrintReads_1.phone_home"
                },
                {
                    "id": "#GATK_PrintReads_1.pedigree_validation_type"
                },
                {
                    "id": "#GATK_PrintReads_1.pedigree_string"
                },
                {
                    "id": "#GATK_PrintReads_1.number"
                },
                {
                    "id": "#GATK_PrintReads_1.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_PrintReads_1.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_PrintReads_1.memory_overhead_per_job",
                    "default": 512
                },
                {
                    "id": "#GATK_PrintReads_1.max_runtime_units"
                },
                {
                    "id": "#GATK_PrintReads_1.max_runtime"
                },
                {
                    "id": "#GATK_PrintReads_1.keep_program_records"
                },
                {
                    "id": "#GATK_PrintReads_1.intervals_file",
                    "source": [
                        "#SBG_Prepare_Intervals_1.intervals"
                    ]
                },
                {
                    "id": "#GATK_PrintReads_1.intervals"
                },
                {
                    "id": "#GATK_PrintReads_1.interval_set_rule"
                },
                {
                    "id": "#GATK_PrintReads_1.interval_padding"
                },
                {
                    "id": "#GATK_PrintReads_1.interval_merging"
                },
                {
                    "id": "#GATK_PrintReads_1.gatk_key"
                },
                {
                    "id": "#GATK_PrintReads_1.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_PrintReads_1.exclude_intervals"
                },
                {
                    "id": "#GATK_PrintReads_1.emit_original_quals"
                },
                {
                    "id": "#GATK_PrintReads_1.downsampling_type"
                },
                {
                    "id": "#GATK_PrintReads_1.downsample_to_fraction"
                },
                {
                    "id": "#GATK_PrintReads_1.downsample_to_coverage"
                },
                {
                    "id": "#GATK_PrintReads_1.disable_radnomization"
                },
                {
                    "id": "#GATK_PrintReads_1.disable_indel_quals"
                },
                {
                    "id": "#GATK_PrintReads_1.default_base_qualities"
                },
                {
                    "id": "#GATK_PrintReads_1.cpu_per_job",
                    "default": 4
                },
                {
                    "id": "#GATK_PrintReads_1.bqsr",
                    "source": [
                        "#GATK_BaseRecalibrator.bqsr"
                    ]
                },
                {
                    "id": "#GATK_PrintReads_1.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_PrintReads_1.baq"
                },
                {
                    "id": "#GATK_PrintReads_1.allow_potentailly_misencoded_quals"
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_PrintReads_1.recalibrated_bam"
                }
            ],
            "sbg:x": 1790.0006402598724,
            "sbg:y": 489.427201725133,
            "scatter": "#GATK_PrintReads_1.reads"
        },
        {
            "id": "#Picard_CollectWgsMetrics",
            "run": {
                "arguments": [
                    {
                        "prefix": "OUTPUT=",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  if ($job.inputs.input_bam)\n  {\n  filename = [].concat($job.inputs.input_bam)[0].path\n\n    return filename.split('.').slice(0, -1).concat(\"wgs_metrics.txt\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n  }\n}\n",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": false
                    }
                ],
                "sbg:project": "bix-demo/picard-1-140-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Broad Institute",
                "y": -681.6666915019358,
                "inputs": [
                    {
                        "sbg:toolDefaultValue": "INFO",
                        "description": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
                        "sbg:category": "",
                        "label": "Verbosity",
                        "inputBinding": {
                            "prefix": "VERBOSITY=",
                            "separate": false,
                            "position": 6,
                            "sbg:cmdInclude": true
                        },
                        "id": "#verbosity",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "SILENT",
                        "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}.",
                        "label": "Validation stringency",
                        "inputBinding": {
                            "prefix": "VALIDATION_STRINGENCY=",
                            "valueFrom": {
                                "class": "Expression",
                                "script": "{\n  if ($job.inputs.validation_stringency)\n  {\n    return $job.inputs.validation_stringency\n  }\n  else\n  {\n    return \"SILENT\"\n  }\n}",
                                "engine": "#cwl-js-engine"
                            },
                            "separate": false,
                            "position": 4,
                            "sbg:cmdInclude": true
                        },
                        "id": "#validation_stringency",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "validation_stringency",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "For debugging purposes, stop after processing the given number of genomic bases.  Default value: -1. This option can be set to 'null' to clear the default value.",
                        "sbg:category": "",
                        "label": "Stop after",
                        "inputBinding": {
                            "prefix": "STOP_AFTER=",
                            "separate": false,
                            "position": 9,
                            "sbg:cmdInclude": true
                        },
                        "id": "#stop_after",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "File inputs",
                        "description": "The reference sequence in FASTA format to which reads will be aligned.  Required.",
                        "sbg:fileTypes": "FASTA, FA, FASTA.GZ",
                        "required": true,
                        "label": "Reference",
                        "inputBinding": {
                            "prefix": "REFERENCE_SEQUENCE=",
                            "separate": false,
                            "position": 3,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "R="
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Whether to suppress job-summary info on System.err. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                        "sbg:category": "",
                        "label": "Quiet",
                        "inputBinding": {
                            "prefix": "QUIET=",
                            "separate": false,
                            "position": 4,
                            "sbg:cmdInclude": true
                        },
                        "id": "#quiet",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "True",
                                    "False"
                                ],
                                "name": "quiet",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "20",
                        "description": "Minimum mapping quality for a read to contribute coverage.",
                        "sbg:category": "",
                        "label": "Minimum mapping quality",
                        "inputBinding": {
                            "prefix": "MINIMUM_MAPPING_QUALITY=",
                            "separate": false,
                            "position": 7,
                            "sbg:cmdInclude": true
                        },
                        "id": "#minimum_mapping_quality",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "MQ"
                    },
                    {
                        "sbg:toolDefaultValue": "20",
                        "description": "Minimum base quality for a base to contribute coverage.",
                        "sbg:category": "",
                        "label": "Minimum base quality",
                        "inputBinding": {
                            "prefix": "MINIMUM_BASE_QUALITY=",
                            "separate": false,
                            "position": 7,
                            "sbg:cmdInclude": true
                        },
                        "id": "#minimum_base_quality",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "Q"
                    },
                    {
                        "label": "Memory per job",
                        "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for single threaded jobs.",
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:toolDefaultValue": "2048"
                    },
                    {
                        "sbg:toolDefaultValue": "500000",
                        "description": "When writing SAM files that need to be sorted, this parameter will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000. This option can be set to 'null' to clear the default value.",
                        "sbg:category": "",
                        "label": "Max records in RAM",
                        "inputBinding": {
                            "prefix": "MAX_RECORDS_IN_RAM=",
                            "separate": false,
                            "position": 4,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_records_in_ram",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "File inputs",
                        "description": "Input SAM or BAM file.  Required.",
                        "sbg:fileTypes": "SAM, BAM",
                        "required": true,
                        "label": "Input",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": false,
                            "prefix": "INPUT="
                        },
                        "id": "#input_bam",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "I"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "This parameter determines whether to include the base quality histogram in the metrics file.  Possible values: {true, false}.",
                        "label": "Include base quality histogram",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": false,
                            "prefix": "INCLUDE_BQ_HISTOGRAM="
                        },
                        "id": "#include_bq_histogram",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "include_bq_histogram",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "250",
                        "description": "This option provides a maximum value for base coverage. Bases with coverage exceeding the given coverage value will be treated as they if they had such maximum value.",
                        "sbg:category": "",
                        "label": "Coverage cap",
                        "inputBinding": {
                            "prefix": "COVERAGE_CAP=",
                            "separate": false,
                            "position": 7,
                            "sbg:cmdInclude": true
                        },
                        "id": "#coverage_cap",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "CAP"
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "description": "If option true is selected, unpaired reads and paired reads with one unmapped end will be counted. Possible values: {true, false}.",
                        "label": "Count unpaired",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": false,
                            "prefix": "COUNT_UNPAIRED="
                        },
                        "id": "#count_unpaired",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "count_unpaired",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "5",
                        "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5. This option can be set to 'null' to clear the default value.",
                        "sbg:category": "",
                        "label": "Compression level",
                        "inputBinding": {
                            "prefix": "COMPRESSION_LEVEL=",
                            "separate": false,
                            "position": 4,
                            "sbg:cmdInclude": true
                        },
                        "id": "#compression_level",
                        "type": [
                            "null",
                            "int"
                        ]
                    }
                ],
                "label": "Picard CollectWgsMetrics",
                "sbg:createdOn": 1450911253,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911253,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911254,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911255,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1473015877,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "filename = [].concat($job.inputs.input_bam)[0].path",
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/picard-tools-1.140/picard.jar CollectWgsMetrics INPUT=/root/folder/example.bam OUTPUT=example.wgs_metrics.txt REFERENCE_SEQUENCE=/second/folder/human.fasta",
                "sbg:revisionNotes": "filename = [].concat($job.inputs.input_bam)[0].path",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "eab0e70b6629",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/picard:1.140"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn $job.inputs.memory_per_job\n  }\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "description": "Output metrics file.",
                        "sbg:fileTypes": "TXT",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_bam",
                            "sbg:metadata": {
                                "__inherit__": "input_file"
                            },
                            "glob": "*.wgs_metrics.txt"
                        },
                        "label": "WGS metrics",
                        "id": "#wgs_metrics",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/picard-collectwgsmetrics-1-140/5",
                "temporaryFailCodes": [],
                "description": "Picard CollectWgsMetrics computes a number of metrics that are necessary for evaluating the coverage and performance of whole genome sequencing experiments.",
                "sbg:categories": [
                    "SAM/BAM-Processing",
                    "Quality-Control",
                    "Quantification"
                ],
                "sbg:modifiedOn": 1473015877,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/picard/releases/tag/1.140"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/broadinstitute/picard/zipball/master"
                    },
                    {
                        "label": "Publication",
                        "id": "http://broadinstitute.github.io/picard/"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "engineCommand": "cwl-engine.js",
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/picard-collectwgsmetrics-1-140/5",
                "baseCommand": [
                    "java",
                    {
                        "class": "Expression",
                        "script": "{   \n  if($job.inputs.memory_per_job){\n    return '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }   \n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine"
                    },
                    "-jar",
                    "/opt/picard-tools-1.140/picard.jar",
                    "CollectWgsMetrics"
                ],
                "sbg:toolkit": "Picard",
                "stdin": "",
                "sbg:latestRevision": 3,
                "sbg:toolkitVersion": "1.140",
                "sbg:revision": 3,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "reference": {
                            "path": "/second/folder/human.fasta"
                        },
                        "memory_per_job": 0,
                        "include_bq_histogram": "true",
                        "input_bam": {
                            "path": "/root/folder/example.bam"
                        },
                        "count_unpaired": "true"
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 2048
                    }
                },
                "x": 2500.0001011292156,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "bix-demo",
                    "vladimirk"
                ]
            },
            "inputs": [
                {
                    "id": "#Picard_CollectWgsMetrics.verbosity"
                },
                {
                    "id": "#Picard_CollectWgsMetrics.validation_stringency"
                },
                {
                    "id": "#Picard_CollectWgsMetrics.stop_after"
                },
                {
                    "id": "#Picard_CollectWgsMetrics.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#Picard_CollectWgsMetrics.quiet"
                },
                {
                    "id": "#Picard_CollectWgsMetrics.minimum_mapping_quality"
                },
                {
                    "id": "#Picard_CollectWgsMetrics.minimum_base_quality"
                },
                {
                    "id": "#Picard_CollectWgsMetrics.memory_per_job"
                },
                {
                    "id": "#Picard_CollectWgsMetrics.max_records_in_ram"
                },
                {
                    "id": "#Picard_CollectWgsMetrics.input_bam",
                    "source": [
                        "#Sambamba_Merge.merged_bam"
                    ]
                },
                {
                    "id": "#Picard_CollectWgsMetrics.include_bq_histogram"
                },
                {
                    "id": "#Picard_CollectWgsMetrics.coverage_cap"
                },
                {
                    "id": "#Picard_CollectWgsMetrics.count_unpaired"
                },
                {
                    "id": "#Picard_CollectWgsMetrics.compression_level"
                }
            ],
            "outputs": [
                {
                    "id": "#Picard_CollectWgsMetrics.wgs_metrics"
                }
            ],
            "sbg:x": 2500.0001011292156,
            "sbg:y": -681.6666915019358
        },
        {
            "id": "#Sambamba_Merge",
            "run": {
                "arguments": [
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  \n  comm=''\n  if(in_var.length==1)\n  {\n  \tcomm+='. '\n  \n  \tif(in_var[0].secondaryFiles!=undefined && in_var[0].secondaryFiles.length>0)\n  \t{\n    \t comm+='| cp '\n    \t comm+=in_var[0].secondaryFiles[0].path\n    \t comm+=' . '\n  \t}\n  }\n  return comm\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true,
                        "position": 10
                    },
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n\n  function common_end(strs) {\n  \n  \t// Find minimum length of file name\n  \n  \tls = [];\n    whole = [];\n\tfor (i=0;i<strs.length;i++){\n  \t\tls = ls.concat(strs[i].path.split('/').pop().length);\n        whole = whole.concat(strs[i].path.length);\n  \t}\n \tl = Math.min.apply(Math,ls);\n  \n  \t// Loop from the end through characters and check if they are the same for all\n  \n \tind = 0;\n \tflag = 0;\n \tfor (i=1;i<=l;i++){\n    \tfor (j=1;j<strs.length;j++){\n      \t\tif (strs[0].path[whole[0]-i]!=strs[j].path[whole[j]-i]){\n        \tflag = 1;\n        \tbreak\n      \t\t}\n   \t\t}\n   \t \tif (flag == 1){\n   \t \t  \tbreak\n   \t    } else {\n      \t\tind = ind + 1;\n        }\n  \t }\n  \n  // Assign and return longest ending common substring\n  if (ind>0) {\n  \tcomstr = strs[0].path.slice(-ind);\n  } else {\n    comstr = 'different_extensions'\n  }\n  \n  return comstr\n  \n  }\n  \n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  \n  prefix=''\n  \n  if(in_var.length==1) { \n    return '' // Input will be just passed to output\n  }else if (in_var[0].metadata){\n \t   if (\"sample_id\" in in_var[0].metadata){   \n  \t\t prefix = in_var[0].metadata[\"sample_id\"];      \n   \t    } else {\n   \t\t  prefix = 'sample_unknown';\n        }\n   \n  }else {\n    prefix = 'sample_unknown';   \n  }\n  \n  // Create joint name and add the merged suffix\n  joint_name = prefix + '_' + common_end(in_var);\n  name = joint_name.split('.').slice(0,-1).join('.') + '.merged.bam'\n  \n  \n  \n  return name\n  \n}\n\n\n",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true,
                        "position": 5
                    }
                ],
                "sbg:project": "bix-demo/sambamba-0-5-9-demo",
                "sbg:createdBy": "nevenam.sudo",
                "sbg:toolAuthor": "Artem Tarasov",
                "y": -445.5729166666669,
                "inputs": [
                    {
                        "sbg:category": "Merge",
                        "label": "Number of threads to use",
                        "description": "Number of threads to use for compression/decompression.",
                        "id": "#num_of_threads",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Merge",
                        "label": "Compression level",
                        "description": "Level of compression for merged BAM file, number from 0 to 9.",
                        "id": "#compression_level",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Merge",
                        "description": "Input BAM files.",
                        "sbg:fileTypes": "BAM",
                        "required": true,
                        "label": "BAM files",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "itemSeparator": null,
                            "separate": true,
                            "position": 5
                        },
                        "id": "#bams",
                        "type": [
                            {
                                "name": "bams",
                                "items": "File",
                                "type": "array"
                            }
                        ]
                    }
                ],
                "label": "Sambamba Merge",
                "sbg:createdOn": 1458920412,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1458920412,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "nevenam.sudo"
                    },
                    {
                        "sbg:modifiedOn": 1458920459,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "nevenam.sudo"
                    },
                    {
                        "sbg:modifiedOn": 1462963630,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "nevenam"
                    },
                    {
                        "sbg:modifiedOn": 1462963660,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "nevenam"
                    },
                    {
                        "sbg:modifiedOn": 1468849940,
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:modifiedOn": 1470679574,
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Changed to common name",
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:modifiedOn": 1470752287,
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Smart naming introduced",
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:modifiedOn": 1470753233,
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "Corrected single file case",
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:modifiedOn": 1470753950,
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Changed glob",
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:modifiedOn": 1470756561,
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "Updated sample id tag",
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:modifiedOn": 1470757408,
                        "sbg:revision": 10,
                        "sbg:revisionNotes": "Added inherit metadata",
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:modifiedOn": 1472994215,
                        "sbg:revision": 11,
                        "sbg:revisionNotes": "Added support for receiving bams as list inside list.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1473000652,
                        "sbg:revision": 12,
                        "sbg:revisionNotes": "Glob returns *.bam",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1473071971,
                        "sbg:revision": 13,
                        "sbg:revisionNotes": "Added support for input.bams received as list of one-element-lists.",
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "/opt/sambamba_0.5.9/sambamba_v0.5.9 merge  -t 6  /path/to/uuu_bams.bam  /path/to/uyyy_bams.bam  testmeta__bams.merged.bam",
                "sbg:revisionNotes": "Added support for input.bams received as list of one-element-lists.",
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/sambamba:0.5.9"
                    }
                ],
                "outputs": [
                    {
                        "description": "Merged bam.",
                        "sbg:fileTypes": "BAM",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#bams",
                            "secondaryFiles": [
                                ".bai",
                                "^.bai"
                            ],
                            "glob": "*.bam"
                        },
                        "label": "Merged bam",
                        "id": "#merged_bam",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "GNU General Public License v2.0 only",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/sambamba-merge-0-5-9/13",
                "temporaryFailCodes": [],
                "description": "Sambamba Merge is used for merging several sorted BAM files into one. The sorting order of all the files must be the same, and it is maintained in the output file.",
                "sbg:categories": [
                    "SAM/BAM-Processing"
                ],
                "sbg:modifiedOn": 1473071971,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/lomereiter/sambamba"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://github.com/lomereiter/sambamba/wiki"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/lomereiter/sambamba/releases/tag/v0.5.9"
                    },
                    {
                        "label": "Publication",
                        "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/sambamba-merge-0-5-9/13",
                "baseCommand": [
                    {
                        "class": "Expression",
                        "script": "{\n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  comm=''\n  if(in_var instanceof Array) // Always true\n  {\n    if(in_var.length==1)\n    {\n      comm+='cp '\n      \n    }\n  \telse if(in_var.length>1)\n  \t{\n    \n    \tcomm+='/opt/sambamba_0.5.9/sambamba_v0.5.9 merge '\n    \tif($job.inputs.num_of_threads)\n  \t\t{\n    \t\tcomm+=' -t '\n    \t\tcomm+=$job.inputs.num_of_threads\n  \t\t}\n  \t\tif($job.inputs.compression_level)\n  \t\t{\n   \t\t\tcomm+=' -l '\n    \t\tcomm+=$job.inputs.compression_level\n  \t\t}\n   \t\t\n    }\n  \n  \t\n\n  }\n  return comm\n}",
                        "engine": "#cwl-js-engine"
                    }
                ],
                "sbg:toolkit": "Sambamba",
                "stdin": "",
                "sbg:latestRevision": 13,
                "sbg:toolkitVersion": "0.5.9",
                "sbg:revision": 13,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "bams": [
                            {
                                "size": 0,
                                "path": "/path/to/uuu_bams.bam",
                                "secondaryFiles": [],
                                "metadata": {
                                    "sample_id": "testmeta"
                                },
                                "class": "File"
                            },
                            {
                                "size": 0,
                                "path": "/path/to/uyyy_bams.bam",
                                "secondaryFiles": [],
                                "class": "File"
                            }
                        ],
                        "num_of_threads": 6,
                        "compression_level": null
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 1000
                    }
                },
                "x": 2026.6666666666679,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "nevenam.sudo",
                    "nevenam",
                    "vladimirk",
                    "ognjenm"
                ]
            },
            "inputs": [
                {
                    "id": "#Sambamba_Merge.num_of_threads",
                    "default": 10
                },
                {
                    "id": "#Sambamba_Merge.compression_level"
                },
                {
                    "id": "#Sambamba_Merge.bams",
                    "source": [
                        "#GATK_PrintReads_1.recalibrated_bam",
                        "#Sambamba_View.filtered"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#Sambamba_Merge.merged_bam"
                }
            ],
            "sbg:x": 2026.6666666666679,
            "sbg:y": -445.5729166666669
        },
        {
            "id": "#SBG_FASTQ_Quality_Adjuster",
            "run": {
                "arguments": [],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:createdBy": "vladimirk",
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "sbg:categories": [
                    "Converters",
                    "FASTQ-Processing"
                ],
                "inputs": [
                    {
                        "sbg:category": "Input",
                        "label": "Used quality scale",
                        "description": "Used quality scale of FASTQ reads.",
                        "id": "#used_quality_scale",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "sanger",
                                    "illumina18",
                                    "illumina13",
                                    "illumina15",
                                    "solexa"
                                ],
                                "name": "used_quality_scale",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:toolDefaultValue": "1",
                        "description": "Total memory in GB.",
                        "sbg:category": "Execution",
                        "label": "Total memory [GB]",
                        "id": "#total_memory",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "Input",
                        "description": "Input FASTQ file.",
                        "sbg:fileTypes": "FASTQ,FASTQ.GZ",
                        "required": true,
                        "label": "Fastq file",
                        "id": "#fastq",
                        "type": [
                            "File"
                        ]
                    }
                ],
                "y": 246.09373995040806,
                "label": "SBG FASTQ Quality Adjuster",
                "sbg:createdOn": 1470927070,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1470927070,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/23",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472559664,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/24",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1474546255,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/25",
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:modifiedOn": 1475084132,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "'sanger': (33, 74) instead 'sanger': (33, 126)",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1475231421,
                        "sbg:revision": 4,
                        "sbg:revisionNotes": "sanger 33:92",
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:modifiedOn": 1475234050,
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "seqtk for converting from illumina13-15",
                        "sbg:modifiedBy": "bogdang"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "python sbg_fastq_quality_scale_adjuster.py --fastq /path/to/test.1.fastq",
                "sbg:revisionNotes": "seqtk for converting from illumina13-15",
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.total_memory){\n    return $job.inputs.total_memory * 1024\n  } else {\n    return 1000\n  }\n}",
                            "engine": "#cwl-js-engine"
                        }
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "",
                        "dockerPull": "images.sbgenomics.com/bogdang/sbg_quality_scale_adjuster:1.0"
                    }
                ],
                "outputs": [
                    {
                        "description": "Resulting file in FASTQ format.",
                        "sbg:fileTypes": "FASTQ",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#fastq",
                            "sbg:metadata": {
                                "Quality scale": "sanger"
                            },
                            "glob": {
                                "class": "Expression",
                                "script": "{\n  qscale = $job.inputs.used_quality_scale\n  if (qscale == \"sanger\" || qscale == \"illumina18\" ) \n  {\n    return $job.inputs.fastq.name\n  }\n  else\n  {\n\tfile = $job.inputs.fastq.path\n\tfile_split = file.split('.')\n\tbasename = file_split\n  \tif (basename.length > 1)\n    {\n      l_ext = basename.splice(basename.length-1)\n      if (l_ext == 'gz')\n      {\n        basename = basename.slice(0, basename.length-1)\n      }\n    }\n \tretval = basename.concat('std.fastq')\n\treturn retval.join('.').replace(/^.*[\\\\\\/]/, '') + \"*\"\n  }\n}",
                                "engine": "#cwl-js-engine"
                            }
                        },
                        "label": "Result",
                        "id": "#result",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "Apache License 2.0",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/sbg-fastq-quality-adjuster/5",
                "temporaryFailCodes": [],
                "x": 363.33334823449474,
                "sbg:contributors": [
                    "bogdang",
                    "vladimirk"
                ],
                "sbg:modifiedOn": 1475234050,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "bogdang",
                "requirements": [
                    {
                        "class": "CreateFileRequirement",
                        "fileDef": [
                            {
                                "fileContent": "\"\"\"\nUsage:\n    sbg_fastq_quality_scale_adjuster.py --fastq FILE\n\nOptions:\n    -h, --help          Show this message.\n\n    -f, --fastq FILE    Input FASTQ file.\n\n\"\"\"\n\nfrom docopt import docopt\nimport os\nimport gzip\nimport itertools as it\nimport shutil\nimport sys\nfrom math import log10\nfrom subprocess import Popen\n\n\n\nargs = docopt(__doc__, version='1.0')\n\ninput_file = args['--fastq'] \n\nbase_name = input_file[input_file.rfind('/')+1:input_file.rfind('.') if input_file.rfind('.') != -1 else None]\nl_ext = base_name.split('.')[-1].lower()\nif l_ext == 'fastq' or l_ext == 'fq':\n    base_name = base_name[:base_name.rfind('.')]\noutput_file = base_name + '.std.fastq'\n\n\n\"\"\"input and output names defined above\"\"\"\n\nclass myGzipFile(gzip.GzipFile):\n    def __enter__(self, *args, **kwargs):\n        if self.fileobj is None:\n            raise ValueError(\"I/O operation on closed GzipFile object\")\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        self.close()\n\n\ndef extremes(a, b):\n    if a is False:\n        return b, b\n    return min(a[0], b), max(a[1], b)\n\n\ndef walk_qualities(f, sample_size=1000):\n    for i in xrange(sample_size * 4):\n        try:\n            line = f.next()\n        except StopIteration:\n            return\n        if i % 4 == 3:\n            yield line.rstrip(\"\\n\\r\")\n\n\ndef sniff(path):\n    with open(path, 'rb') as f:\n        gz = f.read(2) == '\\x1f\\x8b'\n    opn = myGzipFile if gz else open\n    with opn(path) as f:\n        return get_scale(*map(ord, reduce(extremes, it.chain(*walk_qualities(f)), False)))\n\n\ndef get_scale(ord_min, ord_max):\n    options = {\n        'illumina13': (64, 105),\n        'illumina15': (66, 105),\n        'sanger': (33, 126),\n        'solexa': (59, 105),\n    }\n    fits = [(k, v) for k, v in options.iteritems() if v[0] <= ord_min and v[1] >= ord_max]\n    if not fits:\n        message = 'Quality scale for range (%s, %s) not found.' % (ord_min, ord_max)\n        raise Exception(message)\n        # Return narrowest range\n    return reduce(lambda a, b: a if a[1][1] - a[1][0] < b[1][1] - b[1][0] else b, fits)[0]\n\ndef qsolexa(x):\n    return chr(int(round(10 * log10(10.0**((ord(x)-64)/10.0)+1))) + 33)\n\n\ndef qillumina13(x):\n    return chr(ord(x) - 31)\n\n\ndef qillumina15(x):\n    return chr(ord(x) - 31) if ord(x)-64 > 2 else chr(33)\n\n\ndef qillumina18(x):\n    return x\n\n\n\"\"\"detect quality scale format\"\"\"\n\nmeta_qual = sniff(input_file)\n\n\n\"\"\"adjust quality scale if needed\"\"\"\n\nif meta_qual == 'illumina13':\n    proc = qillumina13\nelif meta_qual == 'illumina15':\n    proc = qillumina15\nelif meta_qual == 'solexa':\n    proc = qsolexa\nelse:\n    proc = None\n\nif proc == qsolexa: \n    with open(input_file, 'rb') as f:\n        gz = f.read(2) == '\\x1f\\x8b'\n    open_gz = myGzipFile if gz else open\n    with open(output_file, 'w') as out:\n        for i, line in enumerate(open_gz(input_file)):\n            if i % 4 == 3:\n                line = line.strip()\n                converted = ''.join(map(proc, line))\n                out.write(converted + '\\n')\n            else:\n                out.write(line)\n    contents = \"Original fastq quality scale format was \" + meta_qual + \", and is converted to illumina18.\\n\"\nelif proc is not None: #seqtk converter from illumina13-15\n    with open(input_file, 'rb') as f:\n        gz = f.read(2) == '\\x1f\\x8b'\n    f.close()\n    if gz:#gunzip file to temp.fastq\n        temp_file = 'temp.fastq'\n        \n        inF = gzip.GzipFile(input_file, 'rb')\n        tmp = inF.read()\n        inF.close()\n\n        outF = file(temp_file, 'wb')\n        outF.write(tmp)\n        outF.close()\n\n    else:\n        temp_file = input_file\n    cmd = ['seqtk','seq','-Q64','-V',temp_file]\n    with open(output_file, 'w') as out:\n        p = Popen(cmd, stdout = out)\n    contents = \"Original fastq quality scale format was \" + meta_qual + \", and is converted to illumina18.\\n\"\nelse:\n    if input_file.rfind(\".gz\") == len(input_file) - 3:\n        output_file = output_file + \".gz\"\n    #shutil.copyfile(input_file, output_file)\n    #os.symlink(input_file, output_file)\n    os.rename(input_file, output_file)\n    contents = \"Original fastq quality scale format was illumina18. No conversion performed.\\n\"\n\nsys.stderr.write(contents) #Write conversion to error log",
                                "filename": "sbg_fastq_quality_scale_adjuster.py"
                            }
                        ]
                    },
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/sbg-fastq-quality-adjuster/5",
                "baseCommand": [
                    {
                        "class": "Expression",
                        "script": "{\n  qscale = $job.inputs.used_quality_scale\n  if (qscale == \"sanger\" || qscale == \"illumina18\" ) \n  {// no conversion\n\treturn \"echo No conversion\"\n  }\n  else\n  {\n    return \"python sbg_fastq_quality_scale_adjuster.py --fastq \" + $job.inputs.fastq.path\n  }\n}",
                        "engine": "#cwl-js-engine"
                    }
                ],
                "sbg:toolkit": "SBGTools",
                "sbg:latestRevision": 5,
                "description": "This app detects quality score format used in input FASTQ file. FASTQ quality score is then converted to standard Sanger quality score if conversion is required. It is basically a compact merged version of \"SBG Fastq Quality Detector\" and \"SBG Fastq Quality Converter\", created to speed up the execution of pipelines. Supported source formats are: Solexa, Illumina 1.3, Illumina 1.5 and Illumina 1.8.",
                "sbg:revision": 5,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "total_memory": 9,
                        "fastq": {
                            "size": 0,
                            "path": "/path/to/test.1.fastq",
                            "secondaryFiles": [],
                            "class": "File"
                        },
                        "used_quality_scale": null
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 9216
                    }
                },
                "class": "CommandLineTool",
                "stdin": ""
            },
            "inputs": [
                {
                    "id": "#SBG_FASTQ_Quality_Adjuster.used_quality_scale"
                },
                {
                    "id": "#SBG_FASTQ_Quality_Adjuster.total_memory"
                },
                {
                    "id": "#SBG_FASTQ_Quality_Adjuster.fastq",
                    "source": [
                        "#fastq"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_FASTQ_Quality_Adjuster.result"
                }
            ],
            "sbg:x": 363.33334823449474,
            "sbg:y": 246.09373995040806,
            "scatter": "#SBG_FASTQ_Quality_Adjuster.fastq"
        },
        {
            "id": "#GATK_RealignerTargetCreator",
            "run": {
                "arguments": [
                    {
                        "prefix": "--out",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.reads){\n    read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n    read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  } else read_namebase = 'known_only'\n  return read_namebase + '.intervals'\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    }
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Broad Institute",
                "y": 429.42749599989867,
                "inputs": [
                    {
                        "sbg:toolDefaultValue": "10",
                        "description": "Window size for calculating entropy or SNP clusters. Any two SNP calls and/or high entropy positions are considered clustered when they occur no more than this many base pairs apart.",
                        "sbg:category": "Realigner Target Creator",
                        "label": "Window size",
                        "inputBinding": {
                            "prefix": "--windowSize",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#window_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-window"
                    },
                    {
                        "sbg:toolDefaultValue": "SILENT",
                        "description": "How strict should we be with validation.",
                        "sbg:category": "GATK General",
                        "label": "Validation Strictness",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "name": "validation_strictness",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-S"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:category": "GATK General",
                        "label": "Use Original Qualities",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-OQ"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:category": "GATK General",
                        "label": "Use Legacy Downsampler",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-use_legacy_downsampler"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:category": "GATK General",
                        "label": "Unsafe",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "name": "unsafe",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-U"
                    },
                    {
                        "sbg:toolDefaultValue": "4",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:category": "Execution",
                        "label": "Threads per job",
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:category": "GATK General",
                        "label": "Tag",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-tag"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Remove Program Records",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-rpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Reference Genome in FASTA format.",
                        "sbg:fileTypes": "FASTA, FA",
                        "required": true,
                        "label": "Reference Genome",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-R"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Read sequences in BAM format.",
                        "sbg:fileTypes": "SAM, BAM",
                        "required": false,
                        "label": "Read sequences",
                        "inputBinding": {
                            "prefix": "--input_file",
                            "itemSeparator": null,
                            "separate": true,
                            "secondaryFiles": [
                                ".bai"
                            ],
                            "sbg:cmdInclude": true
                        },
                        "id": "#reads",
                        "type": [
                            "null",
                            {
                                "name": "reads",
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-I"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:category": "GATK General",
                        "label": "Read Group Black List",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rgbl"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:category": "GATK General",
                        "label": "Read Filter",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "name": "read_filter",
                                    "type": "enum"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rf"
                    },
                    {
                        "sbg:toolDefaultValue": "6",
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Preserve Qscores Less Than",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-preserveQ"
                    },
                    {
                        "sbg:toolDefaultValue": "STANDARD",
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:category": "GATK General",
                        "label": "Phone Home",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "name": "phone_home",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-et"
                    },
                    {
                        "sbg:toolDefaultValue": "STRICT",
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree Validation Type",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "name": "pedigree_validation_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-pedValidationType"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Pedigree string for samples.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree String",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-pedString"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:category": "GATK General",
                        "label": "Non Deterministic Random Seed",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-ndrs"
                    },
                    {
                        "sbg:toolDefaultValue": "0.0",
                        "description": "Fraction of base qualities needing to mismatch for a position to have high entropy. To disable this behavior, set this value to <= 0 or > 1. This feature is really only necessary when using an ungapped aligner (e.g. MAQ in the case of single-end read data) and should be used in conjunction with USE_SW' option.",
                        "sbg:category": "Realigner Target Creator",
                        "label": "Mismatch fraction",
                        "inputBinding": {
                            "prefix": "--mismatchFraction",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#mismatch_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-mismatch"
                    },
                    {
                        "sbg:toolDefaultValue": "4",
                        "description": "Minimum reads at a locus to enable using the entropy calculation.",
                        "sbg:category": "Realigner Target Creator",
                        "label": "Minimum reads at locus",
                        "inputBinding": {
                            "prefix": "--minReadsAtLocus",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#min_reads_at_locus",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-minReads"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "sbg:category": "Execution",
                        "label": "Memory per job",
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "sbg:category": "Execution",
                        "label": "Memory overhead per job",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "MINUTES",
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime Units",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "name": "max_runtime_units",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-maxRuntimeUnits"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxRuntime"
                    },
                    {
                        "sbg:toolDefaultValue": "500",
                        "description": "Maximum interval size. Because the realignment algorithm is N^2, allowing too large an interval might take too long to completely realign.",
                        "sbg:category": "Realigner Target Creator",
                        "label": "Maximum interval size",
                        "inputBinding": {
                            "prefix": "--maxIntervalSize",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_interval_size",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxInterval"
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "Input Files",
                        "description": "VCF file with known indels.",
                        "sbg:fileTypes": "VCF",
                        "required": true,
                        "label": "Known indels",
                        "inputBinding": {
                            "prefix": "--known",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#known",
                        "type": [
                            {
                                "name": "known",
                                "items": "File",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Keep Program Records",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-kpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-L"
                    },
                    {
                        "sbg:toolDefaultValue": "sample",
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:category": "GATK General",
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "UNION",
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:category": "GATK General",
                        "label": "Interval Set Rule",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-isr"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:category": "GATK General",
                        "label": "Interval Padding",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-ip"
                    },
                    {
                        "sbg:toolDefaultValue": "ALL",
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:category": "GATK General",
                        "label": "Interval Merging",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-im"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "required": false,
                        "label": "Gatk key",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-K"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Fix Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-fixMisencodedQuals"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Exclude Intervals",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-XL"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Emit Original Quals",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-EOQ"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:category": "GATK General",
                        "label": "Downsampling Type",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "name": "downsampling_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-dt"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Fraction",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-dfrac"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Coverage",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-dcov"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:category": "GATK General",
                        "label": "Disable Randomization",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:category": "GATK General",
                        "label": "Disable Indel Quals",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-DIQ"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Default Base Qualities",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-DBQ"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "description": "Number of CPUs per job.",
                        "sbg:category": "Execution",
                        "label": "CPU per job",
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "40.0",
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Gap Open Penalty",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-baqGOP"
                    },
                    {
                        "sbg:toolDefaultValue": "OFF",
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Calculation Type",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "name": "baq",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-baq"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:category": "GATK General",
                        "label": "Allow Potentially Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores"
                    }
                ],
                "label": "GATK RealignerTargetCreator",
                "sbg:createdOn": 1450911384,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911384,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911384,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911385,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911386,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911387,
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1471364087,
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "known link staged.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472650598,
                        "sbg:revision": 6,
                        "sbg:revisionNotes": "Scatter metadata.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472724438,
                        "sbg:revision": 7,
                        "sbg:revisionNotes": ".bai as secondary",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1475576477,
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "BAMs are not required input",
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx1M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type RealignerTargetCreator -nt 2 --reference_sequence /folder/reference.fasta --known /folder/indels.vcf --out input.intervals",
                "sbg:revisionNotes": "BAMs are not required input",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "47510cb2da55",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1\n}",
                            "engine": "#cwl-js-engine"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "description": "An output file created by the walker.",
                        "sbg:fileTypes": "INTERVALS",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#reads",
                            "sbg:metadata": {
                                "intervals_file": {
                                    "class": "Expression",
                                    "script": "{\n  if ($job.inputs.intervals_file)\n    if($job.inputs.intervals_file.metadata)\n      if($job.inputs.intervals_file.metadata.sbg_scatter)\n        return $job.inputs.intervals_file.path.split('/').pop()\n  return 'NO_INTERVALS'\n}",
                                    "engine": "#cwl-js-engine"
                                }
                            },
                            "glob": "*.intervals"
                        },
                        "label": "Intervals",
                        "id": "#indel_realigner_intervals_file",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "MIT License",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-realignertargetcreator/13",
                "temporaryFailCodes": [],
                "description": "Overview\n\nThe local realignment process is designed to consume one or more BAM files and to locally realign reads such that the number of mismatching bases is minimized across all the reads. In general, a large percent of regions requiring local realignment are due to the presence of an insertion or deletion (indels) in the individual's genome with respect to the reference genome. Such alignment artifacts result in many bases mismatching the reference near the misalignment, which are easily mistaken as SNPs. Moreover, since read mapping algorithms operate on each read independently, it is impossible to place reads on the reference genome such that mismatches are minimized across all reads. Consequently, even when some reads are correctly mapped with indels, reads covering the indel near just the start or end of the read are often incorrectly mapped with respect the true indel, also requiring realignment. Local realignment serves to transform regions with misalignments due to indels into clean reads containing a consensus indel suitable for standard variant discovery approaches. Unlike most mappers, this tool uses the full alignment context to determine whether an appropriate alternate reference (i.e. indel) exists.\n\nThere are 2 steps to the realignment process:\nDetermining (small) suspicious intervals which are likely in need of realignment (RealignerTargetCreator)\nRunning the realigner over those intervals (see the IndelRealigner tool)\nFor more details, see the indel realignment method documentation.\n\nInputs\nOne or more aligned BAM files and optionally, one or more lists of known indels.\n\nOutput\nA list of target intervals to pass to the IndelRealigner.\n\nUsage example:\n java -jar GenomeAnalysisTK.jar \\\n   -T RealignerTargetCreator \\\n   -R reference.fasta \\\n   -I input.bam \\\n   --known indels.vcf \\\n   -o forIndelRealigner.intervals\n \nNotes\n\nThe input BAM(s), reference, and known indel file(s) should be the same ones to be used for the IndelRealigner step.\nWhen multiple potential indels are found by the tool in the same general region, the tool will choose the most likely one for realignment to the exclusion of the others. This is a known limitation of the tool.\nBecause reads produced from the 454 technology inherently contain false indels, the realigner will not work with them (or with reads from similar technologies).\nThis tool also ignores MQ0 reads and reads with consecutive indel operators in the CIGAR string.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:categories": [
                    "Analysis"
                ],
                "sbg:modifiedOn": 1475576477,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "ttps://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_indels_RealignerTargetCreator.php"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/gatk-2-3-9-lite-realignertargetcreator/13",
                "baseCommand": [
                    "java",
                    {
                        "class": "Expression",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "RealignerTargetCreator",
                    {
                        "class": "Expression",
                        "script": "{ \n  if(!$job.inputs.threads_per_job){\n    return '-nt '.concat(4)\n  }\n  else{\n  \treturn '-nt '.concat($job.inputs.threads_per_job)\n  }\n}",
                        "engine": "#cwl-js-engine"
                    }
                ],
                "sbg:toolkit": "GATK",
                "stdin": "",
                "sbg:latestRevision": 8,
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:revision": 8,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "memory_overhead_per_job": 0,
                        "cpu_per_job": 1,
                        "known": [
                            {
                                "path": "/folder/indels.vcf"
                            }
                        ],
                        "threads_per_job": 2,
                        "memory_per_job": 1,
                        "reads": [
                            {
                                "path": "input.bam"
                            }
                        ],
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "intervals_file": {
                            "path": "/path/to/file/rrrrrr.bed",
                            "secondaryFiles": [],
                            "metadata": {
                                "sbg_scatter": "true"
                            }
                        },
                        "intervals": ""
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 1
                    }
                },
                "x": 1271.6670011017177,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "vladimirk",
                    "bix-demo"
                ]
            },
            "inputs": [
                {
                    "id": "#GATK_RealignerTargetCreator.window_size"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.validation_strictness"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.use_original_qualities"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.unsafe"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.threads_per_job",
                    "default": 4
                },
                {
                    "id": "#GATK_RealignerTargetCreator.tag"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.remove_program_records"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference",
                        "#reference_1"
                    ]
                },
                {
                    "id": "#GATK_RealignerTargetCreator.reads",
                    "source": [
                        "#BWA_MEM_Bundle_0_7_13.aligned_reads"
                    ]
                },
                {
                    "id": "#GATK_RealignerTargetCreator.read_group_black_list"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.read_filter"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.phone_home"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.pedigree_validation_type"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.pedigree_string"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.mismatch_fraction"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.min_reads_at_locus"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_RealignerTargetCreator.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.max_runtime_units"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.max_runtime"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.max_interval_size"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.known",
                    "source": [
                        "#known_1"
                    ]
                },
                {
                    "id": "#GATK_RealignerTargetCreator.keep_program_records"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.intervals_file",
                    "source": [
                        "#SBG_Prepare_Intervals_1.intervals"
                    ]
                },
                {
                    "id": "#GATK_RealignerTargetCreator.intervals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.interval_set_rule"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.interval_padding"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.interval_merging"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.gatk_key"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.exclude_intervals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.emit_original_quals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.downsampling_type"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.downsample_to_fraction"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.downsample_to_coverage"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.disable_radnomization"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.disable_indel_quals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.default_base_qualities"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_RealignerTargetCreator.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.baq"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.allow_potentailly_misencoded_quals"
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_RealignerTargetCreator.indel_realigner_intervals_file"
                }
            ],
            "sbg:x": 1271.6670011017177,
            "sbg:y": 429.42749599989867,
            "scatter": "#GATK_RealignerTargetCreator.intervals_file"
        },
        {
            "id": "#GATK_UnifiedGenotyper",
            "run": {
                "arguments": [
                    {
                        "prefix": "--out",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n\n  if($job.inputs.bqsr){\n  \treturn read_namebase + '.base_recalibrated.vcf'\n  }\n  else{\n  \treturn read_namebase + '.vcf'\n  }\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    }
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Broad Institute",
                "y": 422.7605820931547,
                "inputs": [
                    {
                        "sbg:toolDefaultValue": "SILENT",
                        "description": "How strict should we be with validation.",
                        "sbg:category": "GATK General",
                        "label": "Validation Strictness",
                        "inputBinding": {
                            "prefix": "--validation_strictness",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#validation_strictness",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ],
                                "name": "validation_strictness",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-S"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:category": "GATK General",
                        "label": "Use Original Qualities",
                        "inputBinding": {
                            "prefix": "--useOriginalQualities",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_original_qualities",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-OQ"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:category": "GATK General",
                        "label": "Use Legacy Downsampler",
                        "inputBinding": {
                            "prefix": "--use_legacy_downsampler",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#use_legacy_downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-use_legacy_downsampler"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:category": "GATK General",
                        "label": "Unsafe",
                        "inputBinding": {
                            "prefix": "--unsafe",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#unsafe",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ],
                                "name": "unsafe",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-U"
                    },
                    {
                        "sbg:toolDefaultValue": "4",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:category": "Execution",
                        "label": "Threads per job",
                        "id": "#threads_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:category": "GATK General",
                        "label": "Tag",
                        "inputBinding": {
                            "prefix": "--tag",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#tag",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-tag"
                    },
                    {
                        "sbg:toolDefaultValue": "30.0",
                        "description": "The minimum phred-scaled confidence threshold at which variants should be emitted (and filtered with LowQual if less than the calling threshold).",
                        "sbg:category": "Unified Genotyper",
                        "label": "Stand Emit Conf",
                        "inputBinding": {
                            "prefix": "--standard_min_confidence_threshold_for_emitting",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#stand_emit_conf",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-stand_emit_conf"
                    },
                    {
                        "sbg:toolDefaultValue": "30.0",
                        "description": "The minimum phred-scaled confidence threshold at which variants should be called.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Stand Call Conf",
                        "inputBinding": {
                            "prefix": "--standard_min_confidence_threshold_for_calling",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#stand_call_conf",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-stand_call_conf"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Remove Program Records",
                        "inputBinding": {
                            "prefix": "--remove_program_records",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#remove_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-rpr"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "VCF file with the truth callset for the reference sample.",
                        "required": false,
                        "label": "Reference Sample Calls",
                        "inputBinding": {
                            "prefix": "--reference_sample_calls",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reference_sample_calls",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Reference Genome in FASTA format.",
                        "sbg:fileTypes": "FASTA, FA",
                        "required": true,
                        "label": "Reference Genome",
                        "inputBinding": {
                            "prefix": "--reference_sequence",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#reference",
                        "type": [
                            "File"
                        ],
                        "sbg:altPrefix": "-R"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Read sequences in BAM format.",
                        "sbg:fileTypes": "SAM,BAM",
                        "required": true,
                        "label": "Read sequences",
                        "inputBinding": {
                            "prefix": "--input_file",
                            "itemSeparator": null,
                            "separate": true,
                            "secondaryFiles": [
                                "^.bai"
                            ],
                            "sbg:cmdInclude": true
                        },
                        "id": "#reads",
                        "type": [
                            {
                                "name": "reads",
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-I"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:category": "GATK General",
                        "label": "Read Group Black List",
                        "inputBinding": {
                            "prefix": "--read_group_black_list",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_group_black_list",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rgbl"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:category": "GATK General",
                        "label": "Read Filter",
                        "inputBinding": {
                            "prefix": "--read_filter",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#read_filter",
                        "type": [
                            "null",
                            {
                                "items": {
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ],
                                    "name": "read_filter",
                                    "type": "enum"
                                },
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-rf"
                    },
                    {
                        "sbg:toolDefaultValue": "6",
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Preserve Qscores Less Than",
                        "inputBinding": {
                            "prefix": "--preserve_qscores_less_than",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#preserve_qscores_less_than",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-preserveQ"
                    },
                    {
                        "sbg:toolDefaultValue": "STANDARD",
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:category": "GATK General",
                        "label": "Phone Home",
                        "inputBinding": {
                            "prefix": "--phone_home",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#phone_home",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ],
                                "name": "phone_home",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-et"
                    },
                    {
                        "sbg:toolDefaultValue": "STRICT",
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree Validation Type",
                        "inputBinding": {
                            "prefix": "--pedigreeValidationType",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_validation_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ],
                                "name": "pedigree_validation_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-pedValidationType"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "Pedigree string for samples.",
                        "sbg:category": "GATK General",
                        "label": "Pedigree String",
                        "inputBinding": {
                            "prefix": "--pedigreeString",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pedigree_string",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-pedString"
                    },
                    {
                        "sbg:toolDefaultValue": "0.0001",
                        "description": "The PCR error rate to be used for computing fragment-based likelihoods.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Pcr Error Rate",
                        "inputBinding": {
                            "prefix": "--pcr_error_rate",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pcr_error_rate",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-pcr_error"
                    },
                    {
                        "sbg:toolDefaultValue": "ORIGINAL",
                        "description": "The PairHMM implementation to use for -glm INDEL genotype likelihood calculations.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Pair Hmm Implementation",
                        "inputBinding": {
                            "prefix": "--pair_hmm_implementation",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#pair_hmm_implementation",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "EXACT",
                                    "ORIGINAL",
                                    "CACHING",
                                    "LOGLESS_CACHING"
                                ],
                                "name": "pair_hmm_implementation",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-pairHMM"
                    },
                    {
                        "sbg:toolDefaultValue": "EXACT_INDEPENDENT",
                        "description": "Non-reference probability calculation model to employ.",
                        "sbg:category": "Unified Genotyper",
                        "label": "P Nonref Model",
                        "inputBinding": {
                            "prefix": "--p_nonref_model",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#p_nonref_model",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "EXACT_INDEPENDENT",
                                    "EXACT_REFERENCE",
                                    "EXACT_ORIGINAL",
                                    "EXACT_GENERAL_PLOIDY"
                                ],
                                "name": "p_nonref_model",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "EMIT_VARIANTS_ONLY",
                        "description": "Specifies which type of calls we should output.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Output Mode",
                        "inputBinding": {
                            "prefix": "--output_mode",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#output_mode",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "EMIT_VARIANTS_ONLY",
                                    "EMIT_ALL_CONFIDENT_SITES",
                                    "EMIT_ALL_SITES"
                                ],
                                "name": "output_mode",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-out_mode"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:category": "GATK General",
                        "label": "Non Deterministic Random Seed",
                        "inputBinding": {
                            "prefix": "--nonDeterministicRandomSeed",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#non_deterministic_random_seed",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-ndrs"
                    },
                    {
                        "sbg:toolDefaultValue": "0.25",
                        "description": "Minimum fraction of all reads at a locus that must contain an indel (of any allele) for that sample to contribute to the indel count for alleles.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Min Indel Frac",
                        "inputBinding": {
                            "prefix": "-minIndelFrac",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#min_indel_frac",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-minIndelFrac"
                    },
                    {
                        "sbg:toolDefaultValue": "5",
                        "description": "Minimum number of consensus indels required to trigger genotyping run.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Min Indel Cnt",
                        "inputBinding": {
                            "prefix": "--min_indel_count_for_genotyping",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#min_indel_cnt",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-minIndelCnt"
                    },
                    {
                        "sbg:toolDefaultValue": "17",
                        "description": "Minimum base quality required to consider a base for calling.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Min Base Quality Score",
                        "inputBinding": {
                            "prefix": "--min_base_quality_score",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#min_base_quality_score",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-mbq"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "sbg:category": "Execution",
                        "label": "Memory per job",
                        "id": "#memory_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "sbg:category": "Execution",
                        "label": "Memory overhead per job",
                        "id": "#memory_overhead_per_job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "MINUTES",
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime Units",
                        "inputBinding": {
                            "prefix": "--maxRuntimeUnits",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime_units",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ],
                                "name": "max_runtime_units",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-maxRuntimeUnits"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:category": "GATK General",
                        "label": "Max Runtime",
                        "inputBinding": {
                            "prefix": "--maxRuntime",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_runtime",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxRuntime"
                    },
                    {
                        "sbg:toolDefaultValue": "0.05",
                        "description": "Maximum fraction of reads with deletions spanning this locus for it to be callable [to disable, set to  1; default:0.05].",
                        "sbg:category": "Unified Genotyper",
                        "label": "Max Deletion Fraction",
                        "inputBinding": {
                            "prefix": "--max_deletion_fraction",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_deletion_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-deletions"
                    },
                    {
                        "sbg:toolDefaultValue": "6",
                        "description": "Maximum number of alternate alleles to genotype.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Max Alternate Alleles",
                        "inputBinding": {
                            "prefix": "--max_alternate_alleles",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#max_alternate_alleles",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-maxAltAlleles"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:category": "GATK General",
                        "label": "Keep Program Records",
                        "inputBinding": {
                            "prefix": "--keep_program_records",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#keep_program_records",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-kpr"
                    },
                    {
                        "sbg:stageInput": "link",
                        "required": false,
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:fileTypes": "BED,LIST,PICARD,INTERVAL_LIST,INTERVALS",
                        "sbg:category": "Input Files",
                        "label": "Intervals",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "itemSeparator": null,
                            "separate": true,
                            "valueFrom": {
                                "class": "Expression",
                                "script": "{\n  if($job.inputs.intervals_file){\n    if($job.inputs.intervals_file instanceof Array){\n      if($job.inputs.intervals_file.length > 1){\n        if([].concat($job.inputs.reads)[0].metadata)\n          if([].concat($job.inputs.reads)[0].metadata.intervals_file)\n            return '--intervals ' + [].concat($job.inputs.reads)[0].metadata.intervals_file\n      } else return '--intervals ' + [].concat($job.inputs.intervals_file)[0].path\n    } else return '--intervals ' + [].concat($job.inputs.intervals_file)[0].path\n  } else\n    return ''\n}",
                                "engine": "#cwl-js-engine"
                            }
                        },
                        "id": "#intervals_file",
                        "type": [
                            "null",
                            {
                                "name": "intervals_file",
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-L"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:category": "GATK General",
                        "label": "Intervals",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#intervals",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "UNION",
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:category": "GATK General",
                        "label": "Interval Set Rule",
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_set_rule",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-isr"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:category": "GATK General",
                        "label": "Interval Padding",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_padding",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-ip"
                    },
                    {
                        "sbg:toolDefaultValue": "ALL",
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:category": "GATK General",
                        "label": "Interval Merging",
                        "inputBinding": {
                            "prefix": "--interval_merging",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#interval_merging",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-im"
                    },
                    {
                        "sbg:toolDefaultValue": "0.000125",
                        "description": "Heterozygosity for indel calling.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Indel Heterozygosity",
                        "inputBinding": {
                            "prefix": "--indel_heterozygosity",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#indel_heterozygosity",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-indelHeterozygosity"
                    },
                    {
                        "sbg:toolDefaultValue": "45",
                        "description": "Indel gap open penalty, as Phred-scaled probability.  I.e., 30 => 10^-30/10.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Indel Gap Open Penalty",
                        "inputBinding": {
                            "prefix": "--indelGapOpenPenalty",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#indel_gap_open_penalty",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-indelGOP"
                    },
                    {
                        "sbg:toolDefaultValue": "10",
                        "description": "Indel gap continuation penalty, as Phred-scaled probability.  I.e., 30 => 10^-30/10.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Indel Gap Continuation Penalty",
                        "inputBinding": {
                            "prefix": "--indelGapContinuationPenalty",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#indel_gap_continuation_penalty",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-indelGCP"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Ignore lane when building error model, error model is then per-site.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Ignore Lane Info",
                        "inputBinding": {
                            "prefix": "--ignoreLaneInfo",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#ignore_lane_info",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "0.001",
                        "description": "Heterozygosity value used to compute prior likelihoods for any locus.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Heterozygosity",
                        "inputBinding": {
                            "prefix": "--heterozygosity",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#heterozygosity",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-hets"
                    },
                    {
                        "sbg:toolDefaultValue": "[u'Standard']",
                        "description": "One or more classes/groups of annotations to apply to variant calls.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Group",
                        "inputBinding": {
                            "prefix": "--group",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#group",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-G"
                    },
                    {
                        "sbg:toolDefaultValue": "DISCOVERY",
                        "description": "Specifies how to determine the alternate alleles to use for genotyping.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Genotyping Mode",
                        "inputBinding": {
                            "prefix": "--genotyping_mode",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#genotyping_mode",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "DISCOVERY",
                                    "GENOTYPE_GIVEN_ALLELES"
                                ],
                                "name": "genotyping_mode",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-gt_mode"
                    },
                    {
                        "sbg:toolDefaultValue": "SNP",
                        "description": "Genotype likelihoods calculation model to employ -- SNP is the default option, while INDEL is also available for calling indels and BOTH is available for calling both together.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Genotype Likelihoods Model",
                        "inputBinding": {
                            "prefix": "--genotype_likelihoods_model",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#genotype_likelihoods_model",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "GENERALPLOIDYSNP",
                                    "GENERALPLOIDYINDEL",
                                    "BOTH"
                                ],
                                "name": "genotype_likelihoods_model",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-glm"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "required": false,
                        "label": "Gatk key",
                        "inputBinding": {
                            "prefix": "--gatk_key",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#gatk_key",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-K"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Fix Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-fixMisencodedQuals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#fix_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-fixMisencodedQuals"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "required": false,
                        "label": "Exclude Intervals",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#exclude_intervals",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-XL"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "One or more specific annotations to exclude.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Exclude Annotation",
                        "inputBinding": {
                            "prefix": "--excludeAnnotation",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#exclude_annotation",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-XA"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:category": "GATK General",
                        "label": "Emit Original Quals",
                        "inputBinding": {
                            "prefix": "--emit_original_quals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#emit_original_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-EOQ"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:category": "GATK General",
                        "label": "Downsampling Type",
                        "inputBinding": {
                            "prefix": "--downsampling_type",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsampling_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ],
                                "name": "downsampling_type",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-dt"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Fraction",
                        "inputBinding": {
                            "prefix": "--downsample_to_fraction",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_fraction",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-dfrac"
                    },
                    {
                        "sbg:toolDefaultValue": "",
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:category": "GATK General",
                        "label": "Downsample to Coverage",
                        "inputBinding": {
                            "prefix": "--downsample_to_coverage",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#downsample_to_coverage",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-dcov"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:category": "GATK General",
                        "label": "Disable Randomization",
                        "inputBinding": {
                            "prefix": "--disableRandomization",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_radnomization",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:category": "GATK General",
                        "label": "Disable Indel Quals",
                        "inputBinding": {
                            "prefix": "--disable_indel_quals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#disable_indel_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-DIQ"
                    },
                    {
                        "sbg:toolDefaultValue": "-1",
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:category": "GATK General",
                        "label": "Default Base Qualities",
                        "inputBinding": {
                            "prefix": "--defaultBaseQualities",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#default_base_qualities",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-DBQ"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "DbSNP file in VCF format.",
                        "sbg:fileTypes": "VCF",
                        "required": false,
                        "label": "DbSNP",
                        "inputBinding": {
                            "prefix": "--dbsnp",
                            "itemSeparator": " ",
                            "separate": true,
                            "valueFrom": {
                                "class": "Expression",
                                "script": "{\n  return [].concat($job.inputs.dbsnp)[0].path\n}",
                                "engine": "#cwl-js-engine"
                            },
                            "sbg:cmdInclude": true
                        },
                        "id": "#dbsnp",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-D"
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "description": "Number of CPUs per job.",
                        "sbg:category": "Execution",
                        "label": "CPU per job",
                        "id": "#cpu_per_job",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:toolDefaultValue": "0.05",
                        "description": "Fraction of contamination in sequencing data (for all samples) to aggressively remove.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Contamination",
                        "inputBinding": {
                            "prefix": "--contamination_fraction_to_filter",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#contamination",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-contamination"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If provided, we will calculate the SLOD (SB annotation).",
                        "sbg:category": "Unified Genotyper",
                        "label": "Compute Slod",
                        "inputBinding": {
                            "prefix": "--computeSLOD",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#compute_slod",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-slod"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "Comparison VCF file.",
                        "required": false,
                        "label": "Comp",
                        "inputBinding": {
                            "prefix": "--comp",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#comp",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": null
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "The input covariates table file which enables on-the-fly base quality score recalibration.",
                        "sbg:fileTypes": "GRP",
                        "required": false,
                        "label": "BQSR",
                        "inputBinding": {
                            "prefix": "--BQSR",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#bqsr",
                        "type": [
                            "null",
                            {
                                "items": "File",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-BQSR"
                    },
                    {
                        "sbg:toolDefaultValue": "40.0",
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Gap Open Penalty",
                        "inputBinding": {
                            "prefix": "--baqGapOpenPenalty",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq_gap_open_penalty",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "-baqGOP"
                    },
                    {
                        "sbg:toolDefaultValue": "OFF",
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:category": "GATK General",
                        "label": "BAQ Calculation Type",
                        "inputBinding": {
                            "prefix": "--baq",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#baq",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ],
                                "name": "baq",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-baq"
                    },
                    {
                        "sbg:toolDefaultValue": "[]",
                        "description": "One or more specific annotations to apply to variant calls.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Annotation",
                        "inputBinding": {
                            "prefix": "--annotation",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#annotation",
                        "type": [
                            "null",
                            {
                                "items": "string",
                                "type": "array"
                            }
                        ],
                        "sbg:altPrefix": "-A"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "If provided, we will annotate records with the number of alternate alleles that were discovered (but not necessarily genotyped) at a given site.",
                        "sbg:category": "Unified Genotyper",
                        "label": "Annotate Nda",
                        "inputBinding": {
                            "prefix": "--annotateNDA",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#annotate_nda",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "-nda"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:category": "GATK General",
                        "label": "Allow Potentially Misencoded Quals",
                        "inputBinding": {
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#allow_potentailly_misencoded_quals",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores"
                    },
                    {
                        "sbg:category": "Input Files",
                        "description": "The set of alleles at which to genotype when --genotyping_mode is GENOTYPE_GIVEN_ALLELES.",
                        "sbg:fileTypes": "VCF",
                        "required": false,
                        "label": "Alleles",
                        "inputBinding": {
                            "prefix": "--alleles",
                            "itemSeparator": " ",
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#alleles",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "-alleles"
                    }
                ],
                "label": "GATK UnifiedGenotyper",
                "sbg:createdOn": 1450911349,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911349,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911350,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911351,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911352,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911353,
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911354,
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1463297747,
                        "sbg:revision": 6,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1463663096,
                        "sbg:revision": 7,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1469527805,
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "bam.bai extension removed from secondary files of reads input.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1471364268,
                        "sbg:revision": 9,
                        "sbg:revisionNotes": "dbsnp link.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1471445503,
                        "sbg:revision": 10,
                        "sbg:revisionNotes": "dbsnp guard []concat().",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472656204,
                        "sbg:revision": 11,
                        "sbg:revisionNotes": "Metadata scatter.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1475751155,
                        "sbg:revision": 12,
                        "sbg:revisionNotes": "fix for single interval file support",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1475802580,
                        "sbg:revision": 13,
                        "sbg:revisionNotes": "Double --intervals removed!",
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type UnifiedGenotyper -nt 4 --reference_sequence /folder/reference.fasta --input_file sample1.bam --input_file sample2.bam --out sample1.vcf",
                "sbg:revisionNotes": "Double --intervals removed!",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "47510cb2da55",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
                            "engine": "#cwl-js-engine"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "description": "A raw, unfiltered, highly specific callset in VCF format.",
                        "sbg:fileTypes": "VCF",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#reads",
                            "secondaryFiles": [
                                ".idx"
                            ],
                            "sbg:metadata": {},
                            "glob": "*.vcf"
                        },
                        "label": "VCF",
                        "id": "#raw_vcf",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "MIT License",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-unifiedgenotyper/31",
                "temporaryFailCodes": [],
                "description": "Overview\n\nThis tool uses a Bayesian genotype likelihood model to estimate simultaneously the most likely genotypes and allele frequency in a population of N samples, emitting a genotype for each sample. The system can either emit just the variant sites or complete genotypes (which includes homozygous reference calls) satisfying some phred-scaled confidence value.\n\nInput\nThe read data from which to make variant calls.\n\nOutput\nA raw, unfiltered, highly sensitive callset in VCF format.\n\nUsage examples:\n\n//Multi-sample SNP calling\n java -jar GenomeAnalysisTK.jar \\\n   -T UnifiedGenotyper \\\n   -R reference.fasta \\\n   -I sample1.bam [-I sample2.bam ...] \\\n   --dbsnp dbSNP.vcf \\\n   -o snps.raw.vcf \\\n   -stand_call_conf [50.0] \\\n   -stand_emit_conf 10.0 \\\n   [-L targets.interval_list]\n \n//Generate calls at all sites\n java -jar GenomeAnalysisTK.jar \\\n   -T UnifiedGenotyper \\\n   -R reference.fasta \\\n   -I input.bam \\\n   -o raw_variants.vcf \\\n   --output_mode EMIT_ALL_SITES\n \nCaveats\n\nThe caller can be very aggressive in calling variants in order to be very sensitive, so the raw output will contain many false positives. We use extensive post-calling filters to eliminate most of these FPs. See the documentation on filtering (especially by Variant Quality Score Recalibration) for more details.\nThis tool has been deprecated in favor of HaplotypeCaller, a much more sophisticated variant caller that produces much better calls, especially on indels, and includes features that allow it to scale to much larger cohort sizes.\nSpecial note on ploidy\n\nThis tool is able to handle almost any ploidy (except very high ploidies in large pooled experiments); the ploidy can be specified using the -ploidy argument for non-diploid organisms.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:categories": [
                    "Variant-Calling"
                ],
                "sbg:modifiedOn": 1475802580,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_genotyper_UnifiedGenotyper.php"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/gatk-2-3-9-lite-unifiedgenotyper/31",
                "baseCommand": [
                    "java",
                    {
                        "class": "Expression",
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  return '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "UnifiedGenotyper",
                    {
                        "class": "Expression",
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(4)\n  }\n}",
                        "engine": "#cwl-js-engine"
                    }
                ],
                "sbg:toolkit": "GATK",
                "stdin": "",
                "sbg:latestRevision": 13,
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:revision": 13,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "stand_call_conf": 50,
                        "memory_overhead_per_job": 0,
                        "reads": [
                            {
                                "path": "sample1.bam"
                            },
                            {
                                "path": "sample2.bam"
                            }
                        ],
                        "dbsnp": {
                            "path": "/folder/dbSNP.vcf"
                        },
                        "stand_emit_conf": 10,
                        "intervals_file": [
                            {
                                "size": 0,
                                "path": "/path/to/intervals_file-1.ext",
                                "secondaryFiles": [],
                                "class": "File"
                            },
                            {
                                "size": 0,
                                "path": "/path/to/intervals_file-2.ext",
                                "secondaryFiles": [],
                                "class": "File"
                            }
                        ],
                        "reference": {
                            "path": "/folder/reference.fasta"
                        }
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 2048
                    }
                },
                "x": 1971.6669149928698,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "vladimirk",
                    "bix-demo"
                ]
            },
            "inputs": [
                {
                    "id": "#GATK_UnifiedGenotyper.validation_strictness"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.use_original_qualities"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.unsafe"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.threads_per_job",
                    "default": 8
                },
                {
                    "id": "#GATK_UnifiedGenotyper.tag"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.stand_emit_conf"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.stand_call_conf"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.remove_program_records"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.reference_sample_calls"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_UnifiedGenotyper.reads",
                    "source": [
                        "#GATK_PrintReads_1.recalibrated_bam"
                    ]
                },
                {
                    "id": "#GATK_UnifiedGenotyper.read_group_black_list"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.read_filter"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.phone_home"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.pedigree_validation_type"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.pedigree_string"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.pcr_error_rate"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.pair_hmm_implementation"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.p_nonref_model"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.output_mode"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.min_indel_frac"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.min_indel_cnt"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.min_base_quality_score"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_UnifiedGenotyper.memory_overhead_per_job",
                    "default": 512
                },
                {
                    "id": "#GATK_UnifiedGenotyper.max_runtime_units"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.max_runtime"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.max_deletion_fraction"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.max_alternate_alleles"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.keep_program_records"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.intervals_file",
                    "source": [
                        "#SBG_Prepare_Intervals_1.intervals"
                    ]
                },
                {
                    "id": "#GATK_UnifiedGenotyper.intervals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.interval_set_rule"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.interval_padding"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.interval_merging"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.indel_heterozygosity"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.indel_gap_open_penalty"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.indel_gap_continuation_penalty"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.ignore_lane_info"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.heterozygosity"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.group"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.genotyping_mode"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.genotype_likelihoods_model",
                    "default": "BOTH"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.gatk_key"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.exclude_intervals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.exclude_annotation"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.emit_original_quals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.downsampling_type"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.downsample_to_fraction"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.downsample_to_coverage"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.disable_radnomization"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.disable_indel_quals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.default_base_qualities"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.dbsnp",
                    "source": [
                        "#known_sites_1"
                    ]
                },
                {
                    "id": "#GATK_UnifiedGenotyper.cpu_per_job"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.contamination"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.compute_slod"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.comp"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.bqsr"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.baq"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.annotation"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.annotate_nda"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.allow_potentailly_misencoded_quals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.alleles"
                }
            ],
            "outputs": [
                {
                    "id": "#GATK_UnifiedGenotyper.raw_vcf"
                }
            ],
            "sbg:x": 1971.6669149928698,
            "sbg:y": 422.7605820931547,
            "scatter": "#GATK_UnifiedGenotyper.reads"
        },
        {
            "id": "#BWA_MEM_Bundle_0_7_13",
            "run": {
                "arguments": [
                    {
                        "prefix": "",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{ \n     ///////////////////////////////////////////\n    ///  SAMBAMBA VIEW   //////////////////////\n   ///////////////////////////////////////////\nfunction common_substring(a,b) {\n  var i = 0;\n  \n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n  \n   // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n\n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){ \n    name = full_name\n\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n  \n  // Read number of threads if defined\n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else { threads = 8 }\n  \n  if ($job.inputs.filter_out_secondary_alignments){\n    filt_sec = ' --filter \\'not secondary_alignment\\' '\n  }\n  else {filt_sec=' '}\n   \n  // Set output command\n  sambamba_path = '/opt/sambamba_v0.6.0'\n  if ($job.inputs.output_format == 'BAM') {\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -S /dev/stdin -o \"+ name + \".bam\"\n  }\n  else if ($job.inputs.output_format == 'SAM'){ // SAM\n    return \"> \" + name + \".sam\"\n  }\n  else { // SortedBAM is considered default\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -l 0 -S /dev/stdin\"\n  }\n\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": false,
                        "position": 111
                    },
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  ///////////////////////////////////////////\n ///  SAMBAMBA SORT   //////////////////////\n///////////////////////////////////////////\n  \nfunction common_substring(a,b) {\n  var i = 0;\n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n\n   // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n  \n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){\n    name = full_name\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n\n  //////////////////////////\n  // Set sort memory size\n  \n  reads_size = 0 // Not used because of situations when size does not exist!\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ \n    suggested_memory = 4\n    suggested_cpus = 1\n  }\n  else if(reads_size < 10 * GB_1){ \n    suggested_memory = 15\n    suggested_cpus = 8\n  }\n  else { \n    suggested_memory = 58 \n    suggested_cpus = 31\n  }\n  \n  \n  if(!$job.inputs.total_memory){ total_memory = suggested_memory }\n  else{ total_memory = $job.inputs.total_memory }\n\n  // TODO:Rough estimation, should be fine-tuned!\n  if(total_memory > 16){ sorter_memory = parseInt(total_memory / 3) }\n  else{ sorter_memory = 5 }\n          \n  if ($job.inputs.sort_memory){\n    sorter_memory_string = $job.inputs.sort_memory +'GiB'\n  }\n  else sorter_memory_string = sorter_memory + 'GiB' \n  \n  // Read number of threads if defined  \n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else threads = suggested_cpus\n  \n  sambamba_path = '/opt/sambamba_v0.6.0'\n  \n  // SortedBAM is considered default\n  if (!(($job.inputs.output_format == 'BAM') || ($job.inputs.output_format == 'SAM'))){\n    cmd = \"| \" + sambamba_path + \" sort -t \" + threads\n    return cmd + \" -m \"+sorter_memory_string+\" --tmpdir ./ -o \"+ name +\".bam -l 5 /dev/stdin\"\n  }\n  else return \"\"\n}\n  \n",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": false,
                        "position": 112
                    },
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n    ///////////////////////////////////////////\n    ///  SAMBLASTER      //////////////////////\n   ///////////////////////////////////////////\n  if ($job.inputs.deduplication == \"MarkDuplicates\"){\n    return \"| /opt/samblaster/samblaster -i /dev/stdin -o /dev/stdout\"\n  }\n  else if ($job.inputs.deduplication == \"RemoveDuplicates\"){\n    return \"| /opt/samblaster/samblaster -r -i /dev/stdin -o /dev/stdout\"\n  }\n  else{\n   return \"\" \n  }\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true,
                        "position": 110
                    },
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  \n  if($job.inputs.read_group_header){\n  \treturn '-R ' + $job.inputs.read_group_header\n  }\n    \n  function add_param(key, val){\n    if(!val){\n      return\n\t}\n    param_list.push(key + ':' + val)\n  }\n\n  param_list = []\n\n  // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n  }\n  \n  //Read metadata for input reads\n  read_metadata = input_1.metadata\n  if(!read_metadata) read_metadata = []\n\n  add_param('ID', '1')\n  \n  if($job.inputs.rg_data_submitting_center){\n  \tadd_param('CN', $job.inputs.rg_data_submitting_center)\n  }\n  else if('data_submitting_center' in  read_metadata){\n  \tadd_param('CN', read_metadata.data_submitting_center)\n  }\n  \n  if($job.inputs.rg_library_id){\n  \tadd_param('LB', $job.inputs.rg_library_id)\n  }\n  else if('library_id' in read_metadata){\n  \tadd_param('LB', read_metadata.library_id)\n  }\n  \n  if($job.inputs.rg_median_fragment_length){\n  \tadd_param('PI', $job.inputs.rg_median_fragment_length)\n  }\n  \n  if($job.inputs.rg_platform){\n  \tadd_param('PL', $job.inputs.rg_platform)\n  }\n  else if('platform' in read_metadata){\n  \tadd_param('PL', read_metadata.platform)\n  }\n  \n  if($job.inputs.rg_platform_unit_id){\n  \tadd_param('PU', $job.inputs.rg_platform_unit_id)\n  }\n  else if('platform_unit_id' in read_metadata){\n  \tadd_param('PU', read_metadata.platform_unit_id)\n  }\n  \n  if($job.inputs.rg_sample_id){\n  \tadd_param('SM', $job.inputs.rg_sample_id)\n  }\n  else if('sample_id' in  read_metadata){\n  \tadd_param('SM', read_metadata.sample_id)\n  }\n    \n  return \"-R '@RG\\\\t\" + param_list.join('\\\\t') + \"'\"\n  \n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true,
                        "position": 1
                    },
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  /////// Set input reads in the correct order depending of the paired end from metadata\n    \n     // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_reads = $job.inputs.input_reads[0] // scatter mode\n  } else {\n    input_reads = $job.inputs.input_reads = [].concat($job.inputs.input_reads)\n  }\n  \n  \n  //Read metadata for input reads\n  read_metadata = input_reads[0].metadata\n  if(!read_metadata) read_metadata = []\n  \n  order = 0 // Consider this as normal order given at input: pe1 pe2\n  \n  // Check if paired end 1 corresponds to the first given read\n  if(read_metadata == []){ order = 0 }\n  else if('paired_end' in  read_metadata){ \n    pe1 = read_metadata.paired_end\n    if(pe1 != 1) order = 1 // change order\n  }\n\n  // Return reads in the correct order\n  if (input_reads.length == 1){\n    return input_reads[0].path // Only one read present\n  }\n  else if (input_reads.length == 2){\n    if (order == 0) return input_reads[0].path + ' ' + input_reads[1].path\n    else return input_reads[1].path + ' ' + input_reads[0].path\n  }\n\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true,
                        "position": 101
                    },
                    {
                        "prefix": "-t",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  \n  reads_size = 0 \n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_threads = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_threads = 8 }\n  else { suggested_threads = 31 }\n  \n  \n  if(!$job.inputs.threads){  \treturn suggested_threads  }  \n  else{    return $job.inputs.threads  }\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true,
                        "position": 2
                    },
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  name = reference_file.slice(0, -4) // cut .tar extension \n  \n  return name\n  \n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true,
                        "position": 10
                    }
                ],
                "sbg:project": "vladimirk/bwa-mem-bundle-0-7-13-demo",
                "sbg:createdBy": "vladimirk",
                "sbg:toolAuthor": "Heng Li",
                "y": 143.00002728568273,
                "inputs": [
                    {
                        "sbg:toolDefaultValue": "3",
                        "description": "Verbose level: 1=error, 2=warning, 3=message, 4+=debugging.",
                        "sbg:category": "BWA Input/output options",
                        "label": "Verbose level",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-v"
                        },
                        "id": "#verbose_level",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "1",
                                    "2",
                                    "3",
                                    "4"
                                ],
                                "name": "verbose_level",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "description": "Use soft clipping for supplementary alignments.",
                        "sbg:category": "BWA Input/output options",
                        "label": "Use soft clipping",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-Y"
                        },
                        "id": "#use_soft_clipping",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "17",
                        "description": "Penalty for an unpaired read pair.",
                        "sbg:category": "BWA Scoring options",
                        "label": "Unpaired read penalty",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-U"
                        },
                        "id": "#unpaired_read_penalty",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:toolDefaultValue": "15",
                        "description": "Total memory to be used by the tool in GB. It's sum of BWA, Sambamba Sort and Samblaster. For fastq files of total size less than 10GB, we suggest using the default setting of 15GB, for larger files we suggest using 58GB of memory (and 32CPU cores).",
                        "sbg:category": "Execution",
                        "label": "Total memory",
                        "id": "#total_memory",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "8",
                        "description": "Number of threads for BWA, Samblaster and Sambamba sort process.",
                        "sbg:category": "Execution",
                        "label": "Threads",
                        "id": "#threads",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "description": "Specify the mean, standard deviation (10% of the mean if absent), max (4 sigma from the mean if absent) and min of the insert size distribution.FR orientation only. This array can have maximum four values, where first two should be specified as FLOAT and last two as INT.",
                        "sbg:category": "BWA Input/output options",
                        "label": "Specify distribution parameters",
                        "inputBinding": {
                            "prefix": "-I",
                            "itemSeparator": null,
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "id": "#speficy_distribution_parameters",
                        "type": [
                            "null",
                            {
                                "name": "speficy_distribution_parameters",
                                "items": "float",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "label": "Memory for BAM sorting",
                        "description": "Amount of RAM [Gb] to give to the sorting algorithm (if not provided will be set to one third of the total memory).",
                        "id": "#sort_memory",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "description": "Smart pairing in input FASTQ file (ignoring in2.fq).",
                        "sbg:category": "BWA Input/output options",
                        "label": "Smart pairing in input FASTQ file",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-p"
                        },
                        "id": "#smart_pairing_in_input_fastq",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "500",
                        "description": "Skip seeds with more than INT occurrences.",
                        "sbg:category": "BWA Algorithm options",
                        "label": "Skip seeds with more than INT occurrences",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-c"
                        },
                        "id": "#skip_seeds",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "description": "Skip pairing; mate rescue performed unless -S also in use.",
                        "sbg:category": "BWA Algorithm options",
                        "label": "Skip pairing",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-P"
                        },
                        "id": "#skip_pairing",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Skip mate rescue.",
                        "sbg:category": "BWA Algorithm options",
                        "label": "Skip mate rescue",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-S"
                        },
                        "id": "#skip_mate_rescue",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "1.5",
                        "description": "Look for internal seeds inside a seed longer than {-k} * FLOAT.",
                        "sbg:category": "BWA Algorithm options",
                        "label": "Select seeds",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-r"
                        },
                        "id": "#select_seeds",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "20",
                        "description": "Seed occurrence for the 3rd round seeding.",
                        "sbg:category": "BWA Algorithm options",
                        "label": "Seed occurrence for the 3rd round",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-y"
                        },
                        "id": "#seed_occurrence_for_the_3rd_round",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "description": "Score for a sequence match, which scales options -TdBOELU unless overridden.",
                        "sbg:category": "BWA Scoring options",
                        "label": "Score for a sequence match",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-A"
                        },
                        "id": "#score_for_a_sequence_match",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "label": "Sambamba Sort threads",
                        "description": "Number of threads to pass to Sambamba sort, if used.",
                        "id": "#sambamba_threads",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "Inferred from metadata",
                        "description": "Specify the sample ID for RG line - A human readable identifier for a sample or specimen, which could contain some metadata information. A sample or specimen is material taken from a biological entity for testing, diagnosis, propagation, treatment, or research purposes, including but not limited to tissues, body fluids, cells, organs, embryos, body excretory products, etc.",
                        "sbg:category": "BWA Read Group Options",
                        "label": "Sample ID",
                        "id": "#rg_sample_id",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "Inferred from metadata",
                        "description": "Specify the platform unit (lane/slide) for RG line - An identifier for lanes (Illumina), or for slides (SOLiD) in the case that a library was split and ran over multiple lanes on the flow cell or slides.",
                        "sbg:category": "BWA Read Group Options",
                        "label": "Platform unit ID",
                        "id": "#rg_platform_unit_id",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "Inferred from metadata",
                        "description": "Specify the version of the technology that was used for sequencing, which will be placed in RG line.",
                        "sbg:category": "BWA Read Group Options",
                        "label": "Platform",
                        "id": "#rg_platform",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "454",
                                    "Helicos",
                                    "Illumina",
                                    "Solid",
                                    "IonTorrent"
                                ],
                                "name": "rg_platform",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "sbg:category": "BWA Read Group Options",
                        "label": "Median fragment length",
                        "description": "Specify the median fragment length for RG line.",
                        "id": "#rg_median_fragment_length",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "Inferred from metadata",
                        "description": "Specify the identifier for the sequencing library preparation, which will be placed in RG line.",
                        "sbg:category": "BWA Read Group Options",
                        "label": "Library ID",
                        "id": "#rg_library_id",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "BWA Read Group Options",
                        "label": "Data submitting center",
                        "description": "Specify the data submitting center for RG line.",
                        "id": "#rg_data_submitting_center",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:toolDefaultValue": "1",
                        "description": "Reserved number of threads on the instance used by scheduler.",
                        "sbg:category": "Configuration",
                        "label": "Reserved number of threads on the instance",
                        "id": "#reserved_threads",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:stageInput": "link",
                        "sbg:category": "Input files",
                        "description": "Reference fasta file with BWA index files packed in TAR.",
                        "sbg:fileTypes": "TAR",
                        "required": true,
                        "label": "Reference Index TAR",
                        "id": "#reference_index_tar",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "description": "Sequencing technology-specific settings; Setting -x changes multiple parameters unless overriden. pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref). ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref). intractg: -B9 -O16 -L5  (intra-species contigs to ref).",
                        "sbg:category": "BWA Scoring options",
                        "label": "Sequencing technology-specific settings",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-x"
                        },
                        "id": "#read_type",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "pacbio",
                                    "ont2d",
                                    "intractg"
                                ],
                                "name": "read_type",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "Constructed from per-attribute parameters or inferred from metadata.",
                        "description": "Read group header line such as '@RG\\tID:foo\\tSM:bar'.  This value takes precedence over per-attribute parameters.",
                        "sbg:category": "BWA Read Group Options",
                        "label": "Read group header",
                        "id": "#read_group_header",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "Configuration",
                        "label": "Output SAM/BAM file name",
                        "description": "Name of the output BAM file.",
                        "id": "#output_name",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "[5, 200]",
                        "description": "If there are <INT hits with score >80% of the max score, output all in XA. This array should have no more than two values.",
                        "sbg:category": "BWA Input/output options",
                        "label": "Output in XA",
                        "inputBinding": {
                            "prefix": "-h",
                            "itemSeparator": ",",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "id": "#output_in_xa",
                        "type": [
                            "null",
                            {
                                "items": "int",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "description": "Output the reference FASTA header in the XR tag.",
                        "sbg:category": "BWA Input/output options",
                        "label": "Output header",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-V"
                        },
                        "id": "#output_header",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "SortedBAM",
                        "description": "Specify output format (Sorted BAM option will output coordinate sorted BAM).",
                        "sbg:category": "Execution",
                        "label": "Output format",
                        "id": "#output_format",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "SAM",
                                    "BAM",
                                    "SortedBAM"
                                ],
                                "name": "output_format",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "description": "Output all alignments for SE or unpaired PE.",
                        "sbg:category": "BWA Input/output options",
                        "label": "Output alignments",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-a"
                        },
                        "id": "#output_alignments",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "4",
                        "description": "Penalty for a mismatch.",
                        "sbg:category": "BWA Scoring options",
                        "label": "Mismatch penalty",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-B"
                        },
                        "id": "#mismatch_penalty",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "19",
                        "description": "Minimum seed length for BWA MEM.",
                        "sbg:category": "BWA Algorithm options",
                        "label": "Minimum seed length",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-k"
                        },
                        "id": "#minimum_seed_length",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "30",
                        "description": "Minimum alignment score for a read to be output in SAM/BAM.",
                        "sbg:category": "BWA Input/output options",
                        "label": "Minimum alignment score for a read to be output in SAM/BAM",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-T"
                        },
                        "id": "#minimum_output_score",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "50",
                        "description": "Perform at most INT rounds of mate rescues for each read.",
                        "sbg:category": "BWA Algorithm options",
                        "label": "Mate rescue rounds",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-m"
                        },
                        "id": "#mate_rescue_rounds",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "description": "Mark shorter split hits as secondary.",
                        "sbg:category": "BWA Input/output options",
                        "label": "Mark shorter",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-M"
                        },
                        "id": "#mark_shorter",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Insert STR to header if it starts with @; or insert lines in FILE.",
                        "sbg:category": "BWA Input/output options",
                        "label": "Insert string to output SAM or BAM header",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-H"
                        },
                        "id": "#insert_string_to_header",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "Input files",
                        "description": "Input sequence reads.",
                        "sbg:fileTypes": "FASTQ, FASTQ.GZ, FQ, FQ.GZ",
                        "required": true,
                        "label": "Input reads",
                        "id": "#input_reads",
                        "type": [
                            {
                                "name": "input_reads",
                                "items": "File",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "description": "Treat ALT contigs as part of the primary assembly (i.e. ignore <idxbase>.alt file).",
                        "sbg:category": "BWA Input/output options",
                        "label": "Ignore ALT file",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-j"
                        },
                        "id": "#ignore_alt_file",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "[6,6]",
                        "description": "Gap open penalties for deletions and insertions. This array can't have more than two values.",
                        "sbg:category": "BWA Scoring options",
                        "label": "Gap open penalties",
                        "inputBinding": {
                            "prefix": "-O",
                            "itemSeparator": ",",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "id": "#gap_open_penalties",
                        "type": [
                            "null",
                            {
                                "items": "int",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "[1,1]",
                        "description": "Gap extension penalty; a gap of size k cost '{-O} + {-E}*k'. This array can't have more than two values.",
                        "sbg:category": "BWA Scoring options",
                        "label": "Gap extension",
                        "inputBinding": {
                            "prefix": "-E",
                            "itemSeparator": ",",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "id": "#gap_extension_penalties",
                        "type": [
                            "null",
                            {
                                "items": "int",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:toolDefaultValue": "False",
                        "description": "Filter out secondary alignments. Sambamba view tool will be used to perform this internally.",
                        "sbg:category": "Execution",
                        "label": "Filter out secondary alignments",
                        "id": "#filter_out_secondary_alignments",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "100",
                        "description": "Off-diagonal X-dropoff.",
                        "sbg:category": "BWA Algorithm options",
                        "label": "Dropoff",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-d"
                        },
                        "id": "#dropoff",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "0.50",
                        "description": "Drop chains shorter than FLOAT fraction of the longest overlapping chain.",
                        "sbg:category": "BWA Algorithm options",
                        "label": "Drop chains fraction",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-D"
                        },
                        "id": "#drop_chains_fraction",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "description": "Discard full-length exact matches.",
                        "sbg:category": "BWA Algorithm options",
                        "label": "Discard exact matches",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-e"
                        },
                        "id": "#discard_exact_matches",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "description": "Discard a chain if seeded bases shorter than INT.",
                        "sbg:category": "BWA Algorithm options",
                        "label": "Discard chain length",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-W"
                        },
                        "id": "#discard_chain_length",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "MarkDuplicates",
                        "description": "Use Samblaster for finding duplicates on sequence reads.",
                        "sbg:category": "Samblaster parameters",
                        "label": "PCR duplicate detection",
                        "id": "#deduplication",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "None",
                                    "MarkDuplicates",
                                    "RemoveDuplicates"
                                ],
                                "name": "deduplication",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "[5,5]",
                        "description": "Penalty for 5'- and 3'-end clipping.",
                        "sbg:category": "BWA Scoring options",
                        "label": "Clipping penalty",
                        "inputBinding": {
                            "prefix": "-L",
                            "itemSeparator": ",",
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "id": "#clipping_penalty",
                        "type": [
                            "null",
                            {
                                "items": "int",
                                "type": "array"
                            }
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "100",
                        "description": "Band width for banded alignment.",
                        "sbg:category": "BWA Algorithm options",
                        "label": "Band width",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-w"
                        },
                        "id": "#band_width",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "description": "Append FASTA/FASTQ comment to SAM output.",
                        "sbg:category": "BWA Input/output options",
                        "label": "Append comment",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "-C"
                        },
                        "id": "#append_comment",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    }
                ],
                "label": "BWA-MEM Bundle 0.7.13",
                "sbg:createdOn": 1458653351,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1458653351,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1458653365,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1458653397,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1458653457,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1458735076,
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1458744323,
                        "sbg:revision": 5,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1460644019,
                        "sbg:revision": 6,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1461676796,
                        "sbg:revision": 7,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1461677982,
                        "sbg:revision": 8,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1461691955,
                        "sbg:revision": 9,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1462799414,
                        "sbg:revision": 10,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1462800334,
                        "sbg:revision": 11,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1465226602,
                        "sbg:revision": 12,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1465997760,
                        "sbg:revision": 13,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1465999303,
                        "sbg:revision": 14,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466161520,
                        "sbg:revision": 15,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1468500423,
                        "sbg:revision": 16,
                        "sbg:revisionNotes": "Change red port type - FIX.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1469448834,
                        "sbg:revision": 17,
                        "sbg:revisionNotes": "port renamed to reference index tar",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1469449249,
                        "sbg:revision": 18,
                        "sbg:revisionNotes": "reference_index_tar renamed in other expressions.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1470746327,
                        "sbg:revision": 19,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1470747524,
                        "sbg:revision": 20,
                        "sbg:revisionNotes": "SortedBAM is default output type.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1471860342,
                        "sbg:revision": 21,
                        "sbg:revisionNotes": "Fix for single-ended reads.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1471864768,
                        "sbg:revision": 22,
                        "sbg:revisionNotes": "instanceof fix for common filename",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1471866804,
                        "sbg:revision": 23,
                        "sbg:revisionNotes": "[]concat(input_reads)",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1471868494,
                        "sbg:revision": 24,
                        "sbg:revisionNotes": "SortedBAM default - returned revision.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1471879715,
                        "sbg:revision": 25,
                        "sbg:revisionNotes": "Fix for same common sub-strings.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1471880959,
                        "sbg:revision": 26,
                        "sbg:revisionNotes": "Fix to support single FASTQ input.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472054931,
                        "sbg:revision": 27,
                        "sbg:revisionNotes": "reads_size for sorter made more robust.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472056751,
                        "sbg:revision": 28,
                        "sbg:revisionNotes": "FASTQs size use for memory and CPU estimation removed!",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472057639,
                        "sbg:revision": 29,
                        "sbg:revisionNotes": "reads size removed from estimating number of CPUs",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472122448,
                        "sbg:revision": 30,
                        "sbg:revisionNotes": "Added reference_genome metadata field to SAM/BAM.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1472126991,
                        "sbg:revision": 31,
                        "sbg:revisionNotes": "BAM/SAM metadata, reference_genome in the same format as in drop down menu.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1476202723,
                        "sbg:revision": 32,
                        "sbg:revisionNotes": "Added reserved number of threads as an input.",
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "tar -xf reference.b37.fasta.gz.tar ;  /opt/bwa-0.7.13/bwa mem  -R '@RG\\tID:1\\tPL:Illumina\\tSM:dnk_sample' -t 1  reference.b37.fasta.gz  /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz  | /opt/samblaster/samblaster -i /dev/stdin -o /dev/stdout | /opt/sambamba_v0.6.0 view -t 8 -f bam -l 0 -S /dev/stdin | /opt/sambamba_v0.6.0 sort -t 1 -m 5GiB --tmpdir ./ -o LP6005524-DNA_C01_lane_7.sorted.converted.filtered.bam -l 5 /dev/stdin",
                "sbg:revisionNotes": "Added reserved number of threads as an input.",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "",
                        "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.13"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{  \n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n\n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_cpus = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_cpus = 8 }\n  else { suggested_cpus = 31 }\n  \n  if($job.inputs.reserved_threads){ return $job.inputs.reserved_threads }\n  else if($job.inputs.threads){ return $job.inputs.threads } \n  else if($job.inputs.sambamba_threads) { return $job.inputs.sambamba_threads }\n  else{    return suggested_cpus  }\n}",
                            "engine": "#cwl-js-engine"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{  \n\n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n \n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_memory = 4 }\n  else if(reads_size < 10 * GB_1){ suggested_memory = 15 }\n  else { suggested_memory = 58 }\n  \n  if($job.inputs.total_memory){  \t\n    return  $job.inputs.total_memory* 1024  \n  } \n  else if($job.inputs.sort_memory){\n    return  $job.inputs.sort_memory* 1024\n  }\n  else{  \t\n    return suggested_memory * 1024  \n  }\n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "description": "Bam index produced by BWA MEM Bundle, if SortedBAM output format is chosen.",
                        "sbg:fileTypes": "BAI",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_reads",
                            "sbg:metadata": {
                                "reference_genome": {
                                    "class": "Expression",
                                    "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  name = reference_file.slice(0, -4) // cut .tar extension \n  \n  name_list = name.split('.')\n  ext = name_list[name_list.length-1]\n\n  if (ext == 'gz' || ext == 'GZ'){\n    a = name_list.pop() // strip fasta.gz\n    a = name_list.pop()\n  } else\n    a = name_list.pop() //strip only fasta/fa\n  \n  return name_list.join('.')\n  \n}",
                                    "engine": "#cwl-js-engine"
                                }
                            },
                            "glob": "*.bai"
                        },
                        "label": "Bam index",
                        "id": "#bam_index",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "description": "Aligned reads.",
                        "sbg:fileTypes": "SAM, BAM",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input_reads",
                            "secondaryFiles": [
                                ".bai",
                                "^.bai"
                            ],
                            "sbg:metadata": {
                                "reference_genome": {
                                    "class": "Expression",
                                    "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  name = reference_file.slice(0, -4) // cut .tar extension \n  \n  name_list = name.split('.')\n  ext = name_list[name_list.length-1]\n\n  if (ext == 'gz' || ext == 'GZ'){\n    a = name_list.pop() // strip fasta.gz\n    a = name_list.pop()\n  } else\n    a = name_list.pop() //strip only fasta/fa\n  \n  return name_list.join('.')\n  \n}",
                                    "engine": "#cwl-js-engine"
                                }
                            },
                            "glob": "{*.sam,*.bam}"
                        },
                        "label": "Aligned SAM/BAM",
                        "id": "#aligned_reads",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "BWA: GNU Affero General Public License v3.0, MIT License. Sambamba: GNU GENERAL PUBLIC LICENSE. Samblaster: The MIT License (MIT)",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/bwa-mem-bundle-0-7-13/54",
                "temporaryFailCodes": [],
                "description": "**BWA MEM** is an algorithm designed for aligning sequence reads onto a large reference genome. BWA MEM is implemented as a component of BWA. The algorithm can automatically choose between performing end-to-end and local alignments. BWA MEM is capable of outputting multiple alignments, and finding chimeric reads. It can be applied to a wide range of read lengths, from 70 bp to several megabases. \n\nIn order to obtain possibilities for additional fast processing of aligned reads, two tools are embedded together into the same package with BWA MEM (0.7.13): Samblaster. (0.1.22) and Sambamba (v0.6.0). \nIf deduplication of alignments is needed, it can be done by setting the parameter 'Duplication'. **Samblaster** will be used internally to perform this action.\nBesides the standard BWA MEM SAM output file, BWA MEM package has been extended to support two additional output options: a BAM file obtained by piping through **Sambamba view** while filtering out the secondary alignments, as well as a Coordinate Sorted BAM option that additionally pipes the output through **Sambamba sort**, along with an accompanying .bai file produced by **Sambamba sort** as side effect. Parameters responsible for these additional features are 'Filter out secondary alignments' and 'Output format'. Passing data from BWA MEM to Samblaster and Sambamba tools has been done through the pipes which saves processing times of two read and write of aligned reads into the hard drive. \n\nFor input reads fastq files of total size less than 10 GB we suggest using the default setting for parameter 'total memory' of 15GB, for larger files we suggest using 58 GB of memory and 32 CPU cores.\n\n**Important:**\nIn order to work BWA MEM Bundle requires fasta reference file accompanied with **bwa fasta indices** in TAR file.\nThere is the **known issue** with samblaster. It does not support processing when number of sequences in fasta is larger than 32768. If this is the case do not use deduplication option because the output BAM will be corrupted.",
                "sbg:categories": [
                    "Alignment",
                    "FASTQ-Processing"
                ],
                "sbg:modifiedOn": 1476202723,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "vladimirk",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://bio-bwa.sourceforge.net/"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/lh3/bwa"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://bio-bwa.sourceforge.net/bwa.shtml"
                    },
                    {
                        "label": "Download",
                        "id": "http://sourceforge.net/projects/bio-bwa/"
                    },
                    {
                        "label": "Publication",
                        "id": "http://arxiv.org/abs/1303.3997"
                    },
                    {
                        "label": "Publication BWA Algorithm",
                        "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/bwa-mem-bundle-0-7-13/54",
                "baseCommand": [
                    {
                        "class": "Expression",
                        "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  return 'tar -xf ' + reference_file + ' ; '\n  \n}",
                        "engine": "#cwl-js-engine"
                    },
                    "/opt/bwa-0.7.13/bwa",
                    "mem"
                ],
                "sbg:toolkit": "BWA",
                "stdin": "",
                "sbg:latestRevision": 32,
                "sbg:toolkitVersion": "0.7.13",
                "sbg:revision": 32,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "threads": null,
                        "rg_platform_unit_id": "",
                        "rg_sample_id": "",
                        "filter_out_secondary_alignments": false,
                        "output_format": null,
                        "rg_platform": "Illumina",
                        "sambamba_threads": null,
                        "skip_seeds": null,
                        "reserved_threads": 3,
                        "sort_memory": 0,
                        "input_reads": [
                            {
                                "size": 30000000000,
                                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz",
                                "secondaryFiles": [],
                                "metadata": {
                                    "sample_id": "dnk_sample",
                                    "paired_end": "2"
                                },
                                "class": "File"
                            },
                            {
                                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz"
                            }
                        ],
                        "rg_median_fragment_length": "",
                        "band_width": null,
                        "reference_index_tar": {
                            "size": 0,
                            "path": "/path/to/reference.b37.fasta.gz.tar",
                            "secondaryFiles": [
                                {
                                    "path": ".amb"
                                },
                                {
                                    "path": ".ann"
                                },
                                {
                                    "path": ".bwt"
                                },
                                {
                                    "path": ".pac"
                                },
                                {
                                    "path": ".sa"
                                }
                            ],
                            "class": "File"
                        },
                        "output_name": "",
                        "deduplication": "MarkDuplicates",
                        "total_memory": null,
                        "rg_library_id": "",
                        "read_group_header": "",
                        "rg_data_submitting_center": ""
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 4096
                    }
                },
                "x": 942.3334725035608,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "vladimirk"
                ]
            },
            "inputs": [
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.verbose_level"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.use_soft_clipping"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.unpaired_read_penalty"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.total_memory",
                    "default": 54
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.threads",
                    "default": 30
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.speficy_distribution_parameters"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.sort_memory"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.smart_pairing_in_input_fastq"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.skip_seeds"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.skip_pairing"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.skip_mate_rescue"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.select_seeds"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.seed_occurrence_for_the_3rd_round"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.score_for_a_sequence_match"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.sambamba_threads",
                    "default": 30
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_sample_id"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_platform_unit_id"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_platform"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_median_fragment_length"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_library_id"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_data_submitting_center"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.reserved_threads"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.reference_index_tar",
                    "source": [
                        "#BWA_INDEX.indexed_reference"
                    ]
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.read_type"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.read_group_header"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_name"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_in_xa"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_header"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_format",
                    "default": "SortedBAM"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_alignments"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.mismatch_penalty"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.minimum_seed_length"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.minimum_output_score"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.mate_rescue_rounds"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.mark_shorter",
                    "default": true
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.insert_string_to_header"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.input_reads",
                    "source": [
                        "#SBG_Pair_FASTQs_by_Metadata.tuple_list"
                    ]
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.ignore_alt_file"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.gap_open_penalties"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.gap_extension_penalties"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.filter_out_secondary_alignments",
                    "default": true
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.dropoff"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.drop_chains_fraction"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.discard_exact_matches"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.discard_chain_length"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.deduplication",
                    "default": "MarkDuplicates"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.clipping_penalty"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.band_width"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.append_comment"
                }
            ],
            "outputs": [
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.bam_index"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.aligned_reads"
                }
            ],
            "sbg:x": 942.3334725035608,
            "sbg:y": 143.00002728568273,
            "scatter": "#BWA_MEM_Bundle_0_7_13.input_reads"
        },
        {
            "id": "#Sambamba_View",
            "run": {
                "arguments": [
                    {
                        "prefix": "-o",
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\n  fnameRegex = /^(.*?)(?:\\.([^.]+))?$/;\n  if ($job.inputs.input) \n  {\n  \tfile_path = $job.inputs.input.path;\n  \tbase_name = fnameRegex.exec(file_path)[1];\n  \tfile_name = base_name.replace(/^.*[\\\\\\/]/, '');\n  \n  if ($job.inputs.output == 'sam'){\n  \treturn file_name + '.filtered.sam'\n  }\n  else if ($job.inputs.output == 'bam'){\n  \treturn file_name.concat('.filtered.bam')\n  }\n  else if ($job.inputs.output == 'json'){\n  \treturn file_name.concat('.filtered.json')\n  }\n  else if ($job.inputs.output == 'msgpack'){\n  \treturn file_name.concat('.filtered.msgpack')\n  }\n  else\t{\n  \treturn file_name + '.filtered.sam'\n  }\n  }\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true,
                        "position": 3
                    }
                ],
                "sbg:project": "bix-demo/sambamba-0-5-9-demo",
                "sbg:createdBy": "bix-demo",
                "sbg:toolAuthor": "Artem Tarasov",
                "y": -346.66673050986617,
                "inputs": [
                    {
                        "description": "Print header before reads (always done for BAM output).",
                        "sbg:category": "Execution",
                        "label": "With header",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "--with-header"
                        },
                        "id": "#with_header",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "h"
                    },
                    {
                        "sbg:category": "Execution",
                        "label": "Valid",
                        "description": "Output only valid reads.",
                        "id": "#valid",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Set seed for subsampling.",
                        "sbg:category": "Execution",
                        "label": "Subsampling seed",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "--subsampling-seed"
                        },
                        "id": "#subsampling_seed",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "description": "Subsample reads (read pairs).",
                        "sbg:category": "Execution",
                        "label": "Subsample",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "--subsample="
                        },
                        "id": "#subsample",
                        "type": [
                            "null",
                            "float"
                        ],
                        "sbg:altPrefix": "s"
                    },
                    {
                        "description": "Specify that input is in SAM format.",
                        "sbg:category": "Execution",
                        "label": "SAM input",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "--sam-input"
                        },
                        "id": "#sam_input",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "S"
                    },
                    {
                        "sbg:category": "File input.",
                        "description": "Output only reads overlapping one of regions from the BED file.",
                        "sbg:fileTypes": "BED",
                        "required": false,
                        "label": "Regions",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": false,
                            "prefix": "--regions="
                        },
                        "id": "#regions",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "L"
                    },
                    {
                        "sbg:category": "Execution",
                        "description": "Specify reference for writing CRAM.",
                        "sbg:fileTypes": "FASTA,FA",
                        "required": false,
                        "label": "Reference",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": false,
                            "prefix": "--ref-filename="
                        },
                        "id": "#ref_filename",
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:altPrefix": "T"
                    },
                    {
                        "description": "Specify which format to use for output (default is SAM).",
                        "sbg:category": "Execution",
                        "label": "Output format",
                        "inputBinding": {
                            "prefix": "--format=",
                            "separate": false,
                            "position": 1,
                            "sbg:cmdInclude": true
                        },
                        "id": "#output",
                        "type": [
                            {
                                "symbols": [
                                    "sam",
                                    "bam",
                                    "cram",
                                    "json"
                                ],
                                "name": "output",
                                "type": "enum"
                            }
                        ],
                        "sbg:altPrefix": "-f"
                    },
                    {
                        "sbg:toolDefaultValue": "8",
                        "description": "Number of threads to use.",
                        "sbg:category": "Execution",
                        "label": "Number of threads",
                        "inputBinding": {
                            "prefix": "--nthreads=",
                            "valueFrom": {
                                "class": "Expression",
                                "script": "{\n  if ($job.inputs.nthreads)\n    return $job.inputs.nthreads\n  else\n    return 8\n}",
                                "engine": "#cwl-js-engine"
                            },
                            "separate": false,
                            "sbg:cmdInclude": true
                        },
                        "id": "#nthreads",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "-t"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:toolDefaultValue": "1024",
                        "description": "Memory in MB.",
                        "sbg:category": "Execution",
                        "label": "Memory in MB",
                        "id": "#mem_mb",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Inputs",
                        "description": "BAM or SAM file.",
                        "sbg:fileTypes": "BAM, SAM",
                        "required": true,
                        "label": "Input",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "itemSeparator": " ",
                            "separate": true,
                            "position": 2
                        },
                        "id": "#input",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "description": "Set custom filter for alignments.",
                        "sbg:category": "Basic Options",
                        "label": "Filter",
                        "inputBinding": {
                            "prefix": "--filter",
                            "itemSeparator": " ",
                            "separate": true,
                            "valueFrom": {
                                "class": "Expression",
                                "script": "{\n  if ($job.inputs.filter)\n  {\n  \treturn '\"'.concat($job.inputs.filter, '\"')\n  }\n}",
                                "engine": "#cwl-js-engine"
                            },
                            "sbg:cmdInclude": true
                        },
                        "id": "#filter",
                        "type": [
                            "null",
                            "string"
                        ],
                        "sbg:altPrefix": "-F"
                    },
                    {
                        "description": "Specify that input is in CRAM format.",
                        "sbg:category": "Execution",
                        "label": "CRAM input",
                        "inputBinding": {
                            "prefix": "--cram-input",
                            "itemSeparator": null,
                            "separate": true,
                            "sbg:cmdInclude": true
                        },
                        "id": "#cram_input",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "description": "Output to stdout only count of matching records, hHI are ignored.",
                        "sbg:category": "Execution",
                        "label": "Count",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "--count"
                        },
                        "id": "#count",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "sbg:altPrefix": "c"
                    },
                    {
                        "description": "Specify compression level (from 0 to 9, works only for BAM output).",
                        "sbg:category": "Execution",
                        "label": "Compression level",
                        "inputBinding": {
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "prefix": "--compression-level"
                        },
                        "id": "#compression_level",
                        "type": [
                            "null",
                            "int"
                        ],
                        "sbg:altPrefix": "l"
                    }
                ],
                "label": "Sambamba View",
                "sbg:createdOn": 1450911559,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911559,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911560,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911561,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911561,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1470050578,
                        "sbg:revision": 4,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:modifiedOn": 1470050707,
                        "sbg:revision": 5,
                        "sbg:revisionNotes": "Added reference file type",
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:modifiedOn": 1470050762,
                        "sbg:revision": 6,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:modifiedOn": 1472475927,
                        "sbg:revision": 7,
                        "sbg:revisionNotes": "\"subsample\" type set to float.",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1475064551,
                        "sbg:revision": 8,
                        "sbg:revisionNotes": "Added resource parameters",
                        "sbg:modifiedBy": "ognjenm"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "/opt/sambamba_0.5.9/sambamba_v0.5.9 view --format=bam  /root/dir/example.bam -o example.filtered.bam",
                "sbg:revisionNotes": "Added resource parameters",
                "hints": [
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "59e577b13d5d",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/sambamba:0.5.9"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if ($job.inputs.nthreads) {\n    \n    return $job.inputs.nthreads\n    \n  } else {\n    \n    return 1\n    \n  }\n  \n}",
                            "engine": "#cwl-js-engine"
                        }
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": {
                            "class": "Expression",
                            "script": "{\n  if ($job.inputs.mem_mb) {\n    \n    return $job.inputs.mem_mb\n    \n  } else {\n    \n    return 1024\n    \n  }\n  \n}",
                            "engine": "#cwl-js-engine"
                        }
                    }
                ],
                "outputs": [
                    {
                        "description": "Bam file.",
                        "sbg:fileTypes": "BAM, SAM, JSON, MSGPACK",
                        "outputBinding": {
                            "sbg:inheritMetadataFrom": "#input",
                            "sbg:metadata": {},
                            "glob": {
                                "class": "Expression",
                                "script": "{\n  fnameRegex = /^(.*?)(?:\\.([^.]+))?$/;\n  file_path = $job.inputs.input.path;\n  base_name = fnameRegex.exec(file_path)[1];\n  file_name = base_name.replace(/^.*[\\\\\\/]/, '');\n  \n  if ($job.inputs.output == 'sam'){\n  \treturn file_name + '.filtered.sam'\n  }\n  else if ($job.inputs.output == 'bam'){\n  \treturn file_name.concat('.filtered.bam')\n  }\n  else if ($job.inputs.output == 'json'){\n  \treturn file_name.concat('.filtered.json')\n  }\n  else if ($job.inputs.output == 'msgpack'){\n  \treturn file_name.concat('.filtered.msgpack')\n  }\n  else\t{\n  \treturn file_name + '.filtered.sam'\n  }\n}",
                                "engine": "#cwl-js-engine"
                            }
                        },
                        "label": "BAM file",
                        "id": "#filtered",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:license": "GNU General Public License v2.0 only",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "sbg:id": "admin/sbg-public-data/sambamba-view-0-5-9/8",
                "temporaryFailCodes": [],
                "description": "Sambamba View efficiently filters a BAM file for alignments satisfying various conditions. It also accesses its SAM header and information about reference sequences. A JSON output is provided to make this data readily available for use with Perl, Python, and Ruby scripts.\n\nBy default, the tool expects a BAM file as an input. In order to work with a SAM file as an input, specify --sam-input command-line option. The tool does NOT automatically detect file format from its extension. Beware that when reading SAM, the tool will skip tags which don't conform to the SAM/BAM specification and set invalid fields to their default values. However, only syntax is checked, use --valid for full validation.",
                "sbg:categories": [
                    "SAM/BAM-Processing"
                ],
                "sbg:modifiedOn": 1475064551,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "ognjenm",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/lomereiter/sambamba"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://github.com/lomereiter/sambamba/wiki"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/lomereiter/sambamba/releases/tag/v0.5.9"
                    },
                    {
                        "label": "Publication",
                        "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html"
                    }
                ],
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/sambamba-view-0-5-9/8",
                "baseCommand": [
                    "/opt/sambamba_0.5.9/sambamba_v0.5.9",
                    "view"
                ],
                "sbg:toolkit": "Sambamba",
                "stdin": "",
                "sbg:latestRevision": 8,
                "sbg:toolkitVersion": "0.5.9",
                "sbg:revision": 8,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "input": {
                            "path": "/root/dir/example.bam"
                        },
                        "filter": "unmapped",
                        "nthreads": null,
                        "subsample": 9.236016917973757,
                        "output": "bam",
                        "mem_mb": 7
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 1024
                    }
                },
                "x": 1760.0002332263598,
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "vladimirk",
                    "ognjenm",
                    "bix-demo"
                ]
            },
            "inputs": [
                {
                    "id": "#Sambamba_View.with_header"
                },
                {
                    "id": "#Sambamba_View.valid"
                },
                {
                    "id": "#Sambamba_View.subsampling_seed"
                },
                {
                    "id": "#Sambamba_View.subsample"
                },
                {
                    "id": "#Sambamba_View.sam_input"
                },
                {
                    "id": "#Sambamba_View.regions"
                },
                {
                    "id": "#Sambamba_View.ref_filename"
                },
                {
                    "id": "#Sambamba_View.output",
                    "default": "bam"
                },
                {
                    "id": "#Sambamba_View.nthreads"
                },
                {
                    "id": "#Sambamba_View.mem_mb"
                },
                {
                    "id": "#Sambamba_View.input",
                    "source": [
                        "#BWA_MEM_Bundle_0_7_13.aligned_reads"
                    ]
                },
                {
                    "id": "#Sambamba_View.filter",
                    "default": "unmapped and mate_is_unmapped"
                },
                {
                    "id": "#Sambamba_View.cram_input"
                },
                {
                    "id": "#Sambamba_View.count"
                },
                {
                    "id": "#Sambamba_View.compression_level"
                }
            ],
            "outputs": [
                {
                    "id": "#Sambamba_View.filtered"
                }
            ],
            "sbg:x": 1760.0002332263598,
            "sbg:y": -346.66673050986617,
            "scatter": "#Sambamba_View.input"
        },
        {
            "id": "#SBG_Prepare_Intervals_1",
            "run": {
                "arguments": [
                    {
                        "valueFrom": {
                            "class": "Expression",
                            "script": "{\t\n  if (typeof($job.inputs.format) !== \"undefined\")\n  \treturn \"--format \" + \"\\\"\" + $job.inputs.format + \"\\\"\"\n}",
                            "engine": "#cwl-js-engine"
                        },
                        "separate": true
                    }
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:createdBy": "vladimirk",
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "sbg:id": "admin/sbg-public-data/sbg-prepare-intervals/81",
                "inputs": [
                    {
                        "description": "Depending on selected Split Mode value, output files are generated in accordance with description below:  1. Whole Genome - The tool creates one interval file per line of the input BED(FAI) file. Each interval file contains a single line (one of the lines of BED(FAI) input file).  2. Whole Genome with reduced number of jobs - For each contig(chromosome) a single file is created containing all the intervals corresponding to it . All the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as (\"others.bed\").  3. Whole Exome - BED file is required for execution of this mode. If mode  3 is applied input is passed to the output.  4. Whole Exome Parallel - BED file is required for execution of this mode. For each contig(chromosome) a single file is created containing all the intervals corresponding to it. All the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as (\"others.bed\"). If split mode is not selected, the tool will output original BED file.",
                        "sbg:category": "Input",
                        "label": "Split mode",
                        "inputBinding": {
                            "prefix": "--mode",
                            "valueFrom": {
                                "class": "Expression",
                                "script": "{\n  mode = $job.inputs.split_mode\n  switch (mode) \n  {\n    case \"File per interval\": \n      return 1\n    case \"File per chr with alt contig in a single file\": \n      return 2\n    case \"Output original BED\": \n      return 3\n    case \"File per interval with alt contig in a single file\": \n      return 4  \n  }\n  return 3\n}",
                                "engine": "#cwl-js-engine"
                            },
                            "separate": true,
                            "position": 3,
                            "sbg:cmdInclude": true
                        },
                        "id": "#split_mode",
                        "type": [
                            {
                                "symbols": [
                                    "File per interval",
                                    "File per chr with alt contig in a single file",
                                    "Output original BED",
                                    "File per interval with alt contig in a single file"
                                ],
                                "name": "split_mode",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input",
                        "label": "Interval format",
                        "description": "Format of the intervals in the generated files.",
                        "id": "#format",
                        "type": [
                            "null",
                            {
                                "symbols": [
                                    "chr start end",
                                    "chr:start-end"
                                ],
                                "name": "format",
                                "type": "enum"
                            }
                        ]
                    },
                    {
                        "description": "FAI file is converted to BED format if BED file is not provided.",
                        "sbg:fileTypes": "FAI",
                        "sbg:category": "File Input",
                        "label": "Input FAI file",
                        "inputBinding": {
                            "prefix": "--fai",
                            "separate": true,
                            "position": 2,
                            "sbg:cmdInclude": true
                        },
                        "id": "#fai_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    },
                    {
                        "sbg:stageInput": "link",
                        "description": "Input BED file containing intervals. Required for modes 3 and 4.",
                        "sbg:fileTypes": "BED",
                        "sbg:category": "File Input",
                        "label": "Input BED file",
                        "inputBinding": {
                            "prefix": "--bed",
                            "separate": true,
                            "position": 1,
                            "sbg:cmdInclude": true
                        },
                        "id": "#bed_file",
                        "type": [
                            "null",
                            "File"
                        ],
                        "required": false
                    }
                ],
                "label": "SBG Prepare Intervals",
                "sbg:createdOn": 1473083821,
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1473083821,
                        "sbg:revision": 0,
                        "sbg:revisionNotes": "Copy of medjo/sbg-prepare-intervals/sbg-prepare-intervals/75",
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1473084447,
                        "sbg:revision": 1,
                        "sbg:revisionNotes": "Copy of medjo/sbg-prepare-intervals/sbg-prepare-intervals/76",
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:modifiedOn": 1473928444,
                        "sbg:revision": 2,
                        "sbg:revisionNotes": null,
                        "sbg:modifiedBy": "medjo"
                    },
                    {
                        "sbg:modifiedOn": 1474970272,
                        "sbg:revision": 3,
                        "sbg:revisionNotes": "split_mode set to required",
                        "sbg:modifiedBy": "medjo"
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "python sbg_prepare_intervals.py  --format \"chr start end\" --mode 3",
                "sbg:revisionNotes": "split_mode set to required",
                "hints": [
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "",
                        "dockerPull": "images.sbgenomics.com/bogdang/sbg_prepare_intervals:1.0"
                    },
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    }
                ],
                "outputs": [
                    {
                        "description": "File containing the names of created files.",
                        "sbg:fileTypes": "TXT",
                        "outputBinding": {
                            "loadContents": true,
                            "outputEval": {
                                "class": "Expression",
                                "script": "{   \n content =  $self[0].contents.replace(/\\0/g, '')\n content = content.replace('[','')\n content = content.replace(']','')\n content = content.replace(/\\'/g, \"\")\n content = content.replace(/\\s/g, '')\n content_arr = content.split(\",\")\n\n return content_arr\n \n\n} ",
                                "engine": "#cwl-js-engine"
                            },
                            "glob": "Intervals/names.txt"
                        },
                        "label": "Output file names",
                        "id": "#names",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "description": "Array of BED files genereted as per selected Split Mode.",
                        "sbg:fileTypes": "BED",
                        "outputBinding": {
                            "sbg:metadata": {
                                "sbg_scatter": "true"
                            },
                            "glob": "Intervals/*.bed"
                        },
                        "label": "Intervals",
                        "id": "#intervals",
                        "type": [
                            "null",
                            {
                                "name": "intervals",
                                "items": "File",
                                "type": "array"
                            }
                        ]
                    }
                ],
                "sbg:license": "Apache License 2.0",
                "cwlVersion": "sbg:draft-2",
                "sbg:validationErrors": [],
                "temporaryFailCodes": [],
                "description": "Depending on selected Split Mode value, output files are generated in accordance with description below:\n\n1. Whole Genome - The tool creates one interval file per line of the input BED(FAI) file.\nEach interval file contains a single line (one of the lines of BED(FAI) input file).\n\n2. Whole Genome with reduced number of jobs - For each contig(chromosome) a single file\nis created containing all the intervals corresponding to it .\nAll the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as\n(\"others.bed\").\n\n3. Whole Exome - BED file is required for execution of this mode. If mode  3 is applied input is passed to the output.\n\n4. Whole Genome Hybrid - For each chromosome a single file is created for each interval.\nAll the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as\n(\"others.bed\").",
                "sbg:categories": [
                    "Converters"
                ],
                "sbg:modifiedOn": 1474970272,
                "sbg:sbgMaintained": false,
                "sbg:modifiedBy": "medjo",
                "requirements": [
                    {
                        "class": "CreateFileRequirement",
                        "fileDef": [
                            {
                                "fileContent": "\"\"\"\nUsage:\n    sbg_prepare_intervals.py [options] [--fastq FILE --bed FILE --mode INT --format STR --others STR]\n\nDescription:\n    Purpose of this tool is to split BED file into files based on the selected mode.\n    If bed file is not provided fai(fasta index) file is converted to bed.\n\nOptions:\n\n    -h, --help            Show this message.\n\n    -v, -V, --version     Tool version.\n\n    -b, -B, --bed FILE    Path to input bed file.\n\n    --fai FILE            Path to input fai file.\n\n    --format STR          Output file format.\n\n    --mode INT            Select input mode.\n\n\"\"\"\n\n\nfrom docopt import docopt\nimport os\nimport shutil\nimport glob\n\ndefault_extension = '.bed'  # for output files\n\n\n\ndef create_file(contents, contig_name, extension=default_extension):\n    \"\"\"function for creating a file for all intervals in a contig\"\"\"\n\n    new_file = open(\"Intervals/\" + contig_name + extension, \"w\")\n    new_file.write(contents)\n    new_file.close()\n\n\ndef add_to_file(line, name, extension=default_extension):\n    \"\"\"function for adding a line to a file\"\"\"\n\n    new_file = open(\"Intervals/\" + name + extension, \"a\")\n    if lformat == formats[1]:\n        sep = line.split(\"\\t\")\n        line = sep[0] + \":\" + sep[1] + \"-\" + sep[2]\n    new_file.write(line)\n    new_file.close()\n\n\ndef fai2bed(fai):\n    \"\"\"function to create a bed file from fai file\"\"\"\n\n    region_thr = 10000000  # threshold used to determine starting point accounting for telomeres in chromosomes\n    if not fai.rfind(\".fasta.fai\") == -1:\n        basename = fai[0:fai.rfind(\".fasta.fai\")]\n    else:\n        basename = fai[0:fai.rfind(\".\")]\n    with open(fai, \"r\") as ins:\n        new_array = []\n        for line in ins:\n            len_reg = int(line.split()[1])\n            cutoff = 0 if (len_reg < region_thr) else 0  # sd\\\\telomeres or start with 1\n            new_line = line.split()[0] + '\\t' + str(cutoff) + '\\t' + str(len_reg + cutoff)\n            new_array.append(new_line)\n    new_file = open(basename + \".bed\", \"w\")\n    new_file.write(\"\\n\".join(new_array))\n    return basename + \".bed\"\n\ndef chr_intervals(no_of_chrms = 23):\n    \"\"\"returns all possible designations for chromosome intervals\"\"\"\n    \n    chrms = []\n    for i in range(1, no_of_chrms):\n        chrms.append(\"chr\" + str(i))\n        chrms.append(str(i))\n    chrms.extend([\"x\", \"y\", \"chrx\", \"chry\"])\n    return chrms\n\n\ndef mode_1(orig_file):\n    \"\"\"mode 1: every line is a new file\"\"\"\n\n    with open(orig_file, \"r\") as ins:\n        prev = \"\"\n        counter = 0\n        names = []\n        for line in ins:\n            if line.split()[0] == prev:\n                counter += 1\n            else:\n                counter = 0\n            suffix = \"\" if (counter == 0) else \"_\" + str(counter)\n            create_file(line, line.split()[0] + suffix)\n            names.append(line.split()[0] + suffix)\n            prev = line.split()[0]\n\n        create_file(str(names), \"names\", extension=\".txt\")\n\ndef mode_2(orig_file, others_name):\n    \"\"\"mode 2: separate file is created for each chromosome, and one file is created for other intervals\"\"\"\n\n    chrms = chr_intervals()\n    names = []\n\n    with open(orig_file, 'r') as ins:\n        for line in ins:\n            name = line.split()[0]\n            if name.lower() in chrms:\n                name = name.lower()\n            else:\n                name = others_name\n            try:\n                add_to_file(line, name)\n                if not name in names:\n                    names.append(name)\n            except:\n                raise Exception(\"Couldn't create or write in the file in mode 2\")\n\n        create_file(str(names), \"names\", extension = \".txt\")\n\n\ndef mode_3(orig_file, extension=default_extension):\n    \"\"\"mode 3: input file is staged to output\"\"\"\n\n    orig_name = orig_file.split(\"/\")[len(orig_file.split(\"/\")) - 1]\n    output_file = r\"./Intervals/\" + orig_name[0:orig_name.rfind('.')] + extension\n\n    shutil.copyfile(orig_file, output_file)\n\n    names = [orig_name[0:orig_name.rfind('.')]]\n    create_file(str(names), \"names\", extension=\".txt\")\n\n\ndef mode_4(orig_file, others_name):\n    \"\"\"mode 4: every interval in chromosomes is in a separate file. Other intervals are in a single file\"\"\"\n\n    chrms = chr_intervals()\n    names = []\n\n    with open(orig_file, \"r\") as ins:\n        counter = {}\n        for line in ins:\n            name = line.split()[0].lower()\n            if name in chrms:\n                if name in counter:\n                    counter[name] += 1\n                else:\n                    counter[name] = 0\n                suffix = \"\" if (counter[name] == 0) else \"_\" + str(counter[name])\n                create_file(line, name + suffix)\n                names.append(name + suffix)\n                prev = name\n            else:\n                name = others_name\n                if not name in names:\n                    names.append(name)\n                try:\n                    add_to_file(line, name)\n                except:\n                    raise Exception(\"Couldn't create or write in the file in mode 4\")\n\n        create_file(str(names), \"names\", extension=\".txt\")\n\n\ndef prepare_intervals():\n    # reading input files and split mode from command line\n    args = docopt(__doc__, version='1.0')\n\n    bed_file = args['--bed']\n    fai_file = args['--fai']\n    split_mode = int(args['--mode'])\n\n    \n    # define file name for non-chromosomal contigs\n    others_name = 'others' \n\n    global formats, lformat\n    formats = [\"chr start end\", \"chr:start-end\"]\n    lformat = args['--format']\n    if lformat == None:\n        lformat = formats[0]\n    if not lformat in formats:\n        raise Exception('Unsuported interval format')\n\n    if not os.path.exists(r\"./Intervals\"):\n        os.mkdir(r\"./Intervals\")\n    else:\n        files = glob.glob(r\"./Intervals/*\")\n        for f in files:\n            os.remove(f)\n\n    # create variable input_file taking bed_file as priority\n    if bed_file:\n        input_file = bed_file\n    elif fai_file:\n        input_file = fai2bed(fai_file)\n    else:\n        raise Exception('No input files are provided')\n\n    # calling adequate split mode function\n    if split_mode == 1:\n        mode_1(input_file)\n    elif split_mode == 2:\n        mode_2(input_file, others_name)\n    elif split_mode == 3:\n        if bed_file:\n            mode_3(input_file)\n        else:\n            raise Exception('Bed file is required for mode 3')\n    elif split_mode == 4:\n        mode_4(input_file, others_name)\n    else:\n        raise Exception('Split mode value is not set')\n\n\nif __name__ == '__main__':\n    prepare_intervals()",
                                "filename": "sbg_prepare_intervals.py"
                            }
                        ]
                    },
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    }
                ],
                "stdout": "",
                "id": "admin/sbg-public-data/sbg-prepare-intervals/81",
                "baseCommand": [
                    "python",
                    "sbg_prepare_intervals.py"
                ],
                "sbg:toolkit": "SBG tools",
                "stdin": "",
                "sbg:latestRevision": 3,
                "sbg:toolkitVersion": "1.0",
                "sbg:revision": 3,
                "successCodes": [],
                "sbg:job": {
                    "inputs": {
                        "split_mode": null,
                        "bed_file": {
                            "size": 0,
                            "path": "/path/to/bed_file.ext",
                            "secondaryFiles": [],
                            "class": "File"
                        },
                        "fai_file": {
                            "size": 0,
                            "path": "/path/to/fai_file.ext",
                            "secondaryFiles": [],
                            "class": "File"
                        },
                        "format": "chr start end"
                    },
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 1000
                    }
                },
                "class": "CommandLineTool",
                "sbg:contributors": [
                    "medjo",
                    "bogdang",
                    "vladimirk"
                ],
                "x": 1046.6667486164326,
                "y": 602.7604595724919
            },
            "inputs": [
                {
                    "id": "#SBG_Prepare_Intervals_1.split_mode",
                    "default": "File per chr with alt contig in a single file"
                },
                {
                    "id": "#SBG_Prepare_Intervals_1.format"
                },
                {
                    "id": "#SBG_Prepare_Intervals_1.fai_file",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_index"
                    ]
                },
                {
                    "id": "#SBG_Prepare_Intervals_1.bed_file",
                    "source": [
                        "#bed_file_1"
                    ]
                }
            ],
            "outputs": [
                {
                    "id": "#SBG_Prepare_Intervals_1.names"
                },
                {
                    "id": "#SBG_Prepare_Intervals_1.intervals"
                }
            ],
            "sbg:x": 1046.6667486164326,
            "sbg:y": 602.7604595724919
        }
    ],
    "requirements": [],
    "inputs": [
        {
            "sbg:y": 356.6619691979336,
            "sbg:fileTypes": "ZIP",
            "label": "SnpEff database",
            "sbg:x": 3039.9998648299047,
            "id": "#database_1",
            "type": [
                "File"
            ],
            "sbg:suggestedValue": {
                "class": "File",
                "name": "GRCh37.75.zip",
                "path": "5772b6be507c1752674486c6"
            }
        },
        {
            "sbg:y": 254.66667691866573,
            "sbg:fileTypes": "FASTQ,FASTQ.GZ,FQ,FQ.GZ",
            "batchType": "metadata.sample_id",
            "label": "FASTQ",
            "sbg:includeInPorts": true,
            "sbg:x": -43.333329757054656,
            "id": "#fastq",
            "type": [
                {
                    "items": "File",
                    "type": "array"
                }
            ]
        },
        {
            "sbg:y": 21.33333672417546,
            "sbg:includeInPorts": true,
            "sbg:fileTypes": "TAR,FA,FASTA,FA.GZ,FASTA.GZ",
            "label": "Reference or TAR with BWA reference indices",
            "sbg:x": -83.99998560216626,
            "id": "#reference",
            "type": [
                "File"
            ],
            "sbg:suggestedValue": {
                "class": "File",
                "name": "human_g1k_v37_decoy.fasta.tar",
                "path": "5772b6d9507c1752674486e7"
            }
        },
        {
            "sbg:y": 1183.3286236522697,
            "sbg:includeInPorts": true,
            "sbg:fileTypes": "BED",
            "label": "Target BED",
            "sbg:x": 133.33333332008812,
            "id": "#bed_file_1",
            "type": [
                "File"
            ],
            "sbg:suggestedValue": {
                "class": "File",
                "name": "human_g1k_v37_decoy.breakpoints.bed",
                "path": "5772b6d8507c1752674486e5"
            }
        },
        {
            "sbg:y": 548.3286820515789,
            "sbg:includeInPorts": true,
            "sbg:fileTypes": "VCF",
            "label": "Known INDELs",
            "sbg:x": 711.6666337913925,
            "id": "#known_1",
            "type": [
                {
                    "items": "File",
                    "type": "array"
                }
            ],
            "sbg:suggestedValue": [
                {
                    "class": "File",
                    "name": "Mills_and_1000G_gold_standard.indels.b37.sites.vcf",
                    "path": "5772b6c9507c1752674486d4"
                },
                {
                    "class": "File",
                    "name": "1000G_phase1.indels.b37.vcf",
                    "path": "578cf947507c17681a3117ce"
                }
            ]
        },
        {
            "sbg:y": 391.6668539709586,
            "sbg:includeInPorts": true,
            "sbg:fileTypes": "VCF",
            "label": "Mills",
            "sbg:x": 2456.667814082613,
            "id": "#input_vcf_3",
            "type": [
                "File"
            ],
            "sbg:suggestedValue": {
                "class": "File",
                "name": "Mills_and_1000G_gold_standard.indels.b37.sites.vcf",
                "path": "5772b6c9507c1752674486d4"
            }
        },
        {
            "sbg:y": -60.00001516607127,
            "sbg:includeInPorts": true,
            "sbg:fileTypes": "VCF",
            "label": "1000g phase1 snps",
            "sbg:x": 2038.3335770898473,
            "id": "#input_vcf_2",
            "type": [
                "File"
            ],
            "sbg:suggestedValue": {
                "class": "File",
                "name": "1000G_phase1.snps.high_confidence.b37.vcf",
                "path": "578cf947507c17681a3117d0"
            }
        },
        {
            "sbg:y": -193.33337080478802,
            "sbg:includeInPorts": true,
            "sbg:fileTypes": "VCF",
            "label": "HapMap",
            "sbg:x": 2068.3336599270615,
            "id": "#input_vcf_1",
            "type": [
                "File"
            ],
            "sbg:suggestedValue": {
                "class": "File",
                "name": "hapmap_3.3.b37.vcf",
                "path": "5772b6d3507c1752674486df"
            }
        },
        {
            "sbg:y": -308.3333975738971,
            "sbg:includeInPorts": true,
            "sbg:fileTypes": "VCF",
            "label": "1000g Omni",
            "sbg:x": 2093.333741572182,
            "id": "#input_vcf",
            "type": [
                "File"
            ],
            "sbg:suggestedValue": {
                "class": "File",
                "name": "1000G_omni2.5.b37.vcf",
                "path": "578cf946507c17681a3117cb"
            }
        },
        {
            "sbg:y": 834.9953711163477,
            "sbg:includeInPorts": true,
            "sbg:fileTypes": "VCF",
            "label": "dbSNP",
            "sbg:x": 361.6667957968216,
            "id": "#known_sites_1",
            "type": [
                {
                    "items": "File",
                    "type": "array"
                }
            ],
            "sbg:suggestedValue": [
                {
                    "class": "File",
                    "name": "dbsnp_137.b37.vcf",
                    "path": "5772b6cd507c1752674486d8"
                }
            ]
        },
        {
            "sbg:y": 1119.9952387015019,
            "label": "BQSR intervals optimal value is 20 or chr20",
            "sbg:includeInPorts": true,
            "sbg:x": 828.3332543108171,
            "id": "#bqsr_intervals",
            "type": [
                "string"
            ]
        },
        {
            "label": "reference_1",
            "id": "#reference_1",
            "type": [
                "File"
            ],
            "sbg:fileTypes": "FASTA, FA",
            "sbg:x": 819.9999321831582,
            "sbg:y": -265.00001586808156
        }
    ],
    "outputs": [
        {
            "sbg:y": 444.0000584655357,
            "required": false,
            "label": "FastQC report",
            "sbg:includeInPorts": true,
            "sbg:x": 518.3334852059734,
            "id": "#b64html",
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "HTML, B64HTML",
            "source": [
                "#SBG_Html2b64.b64html"
            ]
        },
        {
            "sbg:y": -683.3334215879469,
            "required": false,
            "label": "Picard WGS Metrics",
            "sbg:includeInPorts": true,
            "sbg:x": 2741.667019089074,
            "id": "#wgs_metrics",
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "TXT",
            "source": [
                "#Picard_CollectWgsMetrics.wgs_metrics"
            ]
        },
        {
            "sbg:y": -523.3333742088753,
            "required": true,
            "label": "Picard Alignment Metrics",
            "sbg:includeInPorts": true,
            "sbg:x": 2745.0003536145005,
            "id": "#summary_metrics",
            "type": [
                "File"
            ],
            "sbg:fileTypes": "TXT",
            "source": [
                "#Picard_CollectAlignmentSummaryMetrics.summary_metrics"
            ]
        },
        {
            "sbg:y": 615.0001635419057,
            "required": false,
            "label": "BaseRecalibrator Plot",
            "sbg:includeInPorts": true,
            "sbg:x": 1800.0004876984663,
            "id": "#plot_pdf",
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "PDF",
            "source": [
                "#GATK_BaseRecalibrator.plot_pdf"
            ]
        },
        {
            "sbg:y": 59.99999346997966,
            "required": false,
            "label": "SnpEff Summary text",
            "sbg:includeInPorts": true,
            "sbg:x": 3690.0001456340174,
            "id": "#summary_text",
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "TXT",
            "source": [
                "#SnpEff.summary_text"
            ]
        },
        {
            "sbg:y": 371.66670515802275,
            "required": false,
            "label": "Annotated VCF",
            "sbg:includeInPorts": true,
            "sbg:x": 3673.333559420379,
            "id": "#annotated",
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "VCF, TXT, GATK, BED, BEDANN",
            "source": [
                "#SnpEff.annotated"
            ]
        },
        {
            "sbg:y": 648.3333466317924,
            "required": true,
            "label": "Raw VCF",
            "sbg:includeInPorts": true,
            "sbg:x": 2531.6667673985175,
            "id": "#combined_vcf",
            "type": [
                "File"
            ],
            "sbg:fileTypes": "VCF",
            "source": [
                "#GATK_CombineVariants.combined_vcf"
            ]
        },
        {
            "sbg:y": 219.99421000457625,
            "required": false,
            "label": "SnpEff summary HTML",
            "sbg:includeInPorts": true,
            "sbg:x": 3710.000015523695,
            "id": "#summary",
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "HTML, CSV",
            "source": [
                "#SnpEff.summary"
            ]
        }
    ],
    "sbg:id": "ivanbatic+admin/dfghhm/whole-genome-analysis-bwa-gatk-2-3-9-lite/1",
    "sbg:toolAuthor": "Seven Bridges",
    "sbg:batchBy": {
        "type": "criteria",
        "criteria": [
            "metadata.sample_id"
        ]
    },
    "sbg:categories": [
        "WGS"
    ],
    "sbg:modifiedOn": 1478533097,
    "sbg:update": "admin/sbg-public-data/whole-genome-analysis-bwa-gatk-2-3-9-lite/53",
    "sbg:modifiedBy": "ivanbatic+admin",
    "sbg:copyOf": "admin/sbg-public-data/whole-genome-analysis-bwa-gatk-2-3-9-lite/48",
    "sbg:toolkit": "SBGTools",
    "sbg:latestRevision": 1,
    "sbg:revisionNotes": "Copy of admin/sbg-public-data/whole-genome-analysis-bwa-gatk-2-3-9-lite/48",
    "sbg:revision": 1,
    "sbg:canvas_x": -605,
    "sbg:updateRevisionNotes": "Quality adjuster updated.",
    "sbg:project": "ivanbatic+admin/dfghhm",
    "sbg:canvas_y": -199,
    "sbg:contributors": [
        "ivanbatic+admin"
    ],
    "sbg:batchInput": "#fastq",
    "sbg:createdOn": 1470313902,
    "sbg:revisionsInfo": [
        {
            "sbg:modifiedOn": 1470313902,
            "sbg:revision": 0,
            "sbg:revisionNotes": "Copy of admin/sbg-public-data/whole-genome-analysis-bwa-gatk-2-3-9-lite/22",
            "sbg:modifiedBy": "ivanbatic+admin"
        },
        {
            "sbg:modifiedOn": 1478533097,
            "sbg:revision": 1,
            "sbg:revisionNotes": "Copy of admin/sbg-public-data/whole-genome-analysis-bwa-gatk-2-3-9-lite/48",
            "sbg:modifiedBy": "ivanbatic+admin"
        }
    ],
    "sbg:validationErrors": [],
    "sbg:license": "Apache License 2.0",
    "sbg:canvas_zoom": 0.5999999999999996,
    "sbg:createdBy": "ivanbatic+admin",
    "sbg:updateModifiedBy": "admin",
    "sbg:sbgMaintained": false,
    "sbg:image_url": null,
    "sbg:toolkitVersion": "1.0",

    "id": "ivanbatic+admin/dfghhm/whole-genome-analysis-bwa-gatk-2-3-9-lite/1",
    "label": "Whole Genome Analysis - BWA + GATK 2.3.9-Lite (with Metrics)",
    "description": "WGS pipeline is used to study the complete DNA sequence of an organism (known as Genome). Although WGS generally has lower coverage than WES, this method can detect variants outside of protein-coding areas and can detect changes affecting regulatory regions and various controlling mechanisms. This characteristic allows for wider application of the pipeline, especially in cases when novel variants are expected. For example, WGS can be used when the phenotype or family history strongly implicates genetic etiology but the phenotype does not correspondent to any specific disorder for which a testing targeting a specific gene is clinically available, or in case when a genetic disorder demonstrates high degree of genetic heterogeneity (H L Rehm, S J Bale et al. ACMG clinical laboratory standards for next-generation sequencing, Genet Med. 2013 September ; 15(9): 733–747. doi:10.1038/gim.2013.92.). \nThe pipeline is constructed following the Broad Institute best practice and utilizing Broad Institute's GATK tools. A separate step is undertaken to assess the quality of sequenced reads using Babraham Institute's tool FastQC. \nSequenced reads are aligned with the BWA tool after which duplicates are removed. The next step uses algorithms developed by the Broad Institute to improve alignment around indels followed by the re-evaluation of the qualities of sequenced bases. Generated SAM files are pooled together and variant calling is performed. Detected variants are subjected to additional analysis resulting in refined, high-quality set of identified variants (for more information on how variant calling is performed, please refer to the [Broad Institute's web site](https://www.broadinstitute.org/gatk/guide/topic?name=methods)).\n\nIn order to obtain optimal usage of the computational instance’s resources analysis is divided into the number of jobs that corresponds to the number of “chromosomal” regions in the input BED file plus one job for much smaller, mitochondrial and global contigs. Splitting of BED file into several smaller BED files is performed by SBG Pass Intervals tool. GATK RealignerTargetCreator uses these BED files to perform scatter (parallelization of execution) on its input intervals file and outputs for each execution intervals file used by GATK Indel Realigner, which performs scatter on this input and outputs BAM file for every interval. GATK BaseRecalibrator collects all the BAM files and use only those covered with BQSR intervals string input for creating the model for base quality score recalibration (BQSR). If BQSR intervals string is not set GATK BaseRecalibrator would work for more than 20 hours on Whole genome sample. For that reason this input is set to \"required\" with the **default value of 20** meaning only chromosome number 20 will be used for creating the model for BQSR. GATK PrintReads applies quality mapping table received from GATK BaseRecalibrator to the BAMs received from GATK IndelRealigner. It also works in scatter mode set on “reads” input (one job per BAM file). GATK UnifiedGenotyper caller scatters by BAM file received from GATK PrintReads. It performs variant calling on each of the BAMs and outputs raw variant calling file (VCF). Final steps of the workflow are re-calibrating and annotating of variants.\nWhole Genome Sequencing workflow can be used for processing several pairs of FASTQ files but all coming from the same sample, but different lanes. It is not created for processing FASTQ files coming from different samples together, but rather by processing each of these samples individually using \"batch by the sample\" on FASTQ files input and setting correctly metadata of FASTQ files. The tools SBG Pair Fastqs by metadata will split into the groups FASTQ files came from the different lanes and pass them through different jobs to BWA-MEM. Later, they will be merged in GATK IndelRealigner.\n\nIn order to complete the execution of the workflow the following fields in the metadata of FASTQ files must be set: **Paired-end, Sample ID, Platform and Library**.",
    "hints": [
        {
            "class": "sbg:AWSInstanceType",
            "value": "c3.8xlarge"
        },
        {
            "class": "sbg:GoogleInstanceType",
            "value": "n1-standard-32"
        }
    ]
};

const wf = WorkflowFactory.from(gatk as any);
const workflow = new Workflow(new Snap("#svg"), wf);

console.log("Model", wf);
